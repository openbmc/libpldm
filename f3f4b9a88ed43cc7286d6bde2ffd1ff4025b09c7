{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "057ad3a2_6009f2d6",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-09T02:00:22Z",
      "side": 1,
      "message": "So rather than a callback it would be nice if we could exploit a link seam. If it helps, here are some articles on the idea:\n\n- https://blog.peterritchie.com/posts/Seam-expansion\n- https://martinfowler.com/bliki/LegacySeam.html\n\nThe tests dynamically link against `libpldm.so`, which itself has to successfully link. Adding a new dynamic library for libpldm.so to link against to provide pluggable time APIs for testing is a bit heavy-handed.\n\nHowever, GCC and clang provide `__attribute__((weak))`:\n\n\u003e The weak attribute causes a declaration of an external symbol to be emitted as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. The overriding symbol must have the same type as the weak symbol. In addition, if it designates a variable it must also have the same size and alignment as the weak symbol. Weak symbols are supported for ELF targets, and also for a.out targets when using the GNU assembler and linker.\n\n- https://gcc.gnu.org/onlinedocs/gcc-15.2.0/gcc/Common-Function-Attributes.html#index-weak-function-attribute\n- https://clang.llvm.org/docs/AttributeReference.html#weak\n\nWe can arrange this so:\n\n1. We define `int libpldm_clock_gettimeval() __attribute__((weak)) { ... }` here in `src/transport/transport.c`\n2. In the test implementations, we define `int libpldm_clock_gettimeval() { ... }`\n\nThis way, for the tests, we\u0027ll call through the test implementation, but for production applications we\u0027ll fall back to the weak implementation in the library.\n\nFor the tests we also define some further functions to set the time in some fashion, to manipulate the code paths in `pldm_transport_send_recv_msg()` below.",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "598729c3_c0728628",
        "filename": "src/transport/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-09T02:00:22Z",
      "side": 1,
      "message": "This needn\u0027t be described in the header. It can live in the implementation.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 17,
        "endChar": 51
      },
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42db71f5_0469c777",
        "filename": "src/transport/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-09T02:00:22Z",
      "side": 1,
      "message": "Time isn\u0027t a behaviour of a transport. Rather, it\u0027s measurable through APIs provided by the application environment. While this might feel convenient it\u0027s not the right place. Please remove this callback.",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}