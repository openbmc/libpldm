{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "057ad3a2_6009f2d6",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-09T02:00:22Z",
      "side": 1,
      "message": "So rather than a callback it would be nice if we could exploit a link seam. If it helps, here are some articles on the idea:\n\n- https://blog.peterritchie.com/posts/Seam-expansion\n- https://martinfowler.com/bliki/LegacySeam.html\n\nThe tests dynamically link against `libpldm.so`, which itself has to successfully link. Adding a new dynamic library for libpldm.so to link against to provide pluggable time APIs for testing is a bit heavy-handed.\n\nHowever, GCC and clang provide `__attribute__((weak))`:\n\n\u003e The weak attribute causes a declaration of an external symbol to be emitted as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. The overriding symbol must have the same type as the weak symbol. In addition, if it designates a variable it must also have the same size and alignment as the weak symbol. Weak symbols are supported for ELF targets, and also for a.out targets when using the GNU assembler and linker.\n\n- https://gcc.gnu.org/onlinedocs/gcc-15.2.0/gcc/Common-Function-Attributes.html#index-weak-function-attribute\n- https://clang.llvm.org/docs/AttributeReference.html#weak\n\nWe can arrange this so:\n\n1. We define `int libpldm_clock_gettimeval() __attribute__((weak)) { ... }` here in `src/transport/transport.c`\n2. In the test implementations, we define `int libpldm_clock_gettimeval() { ... }`\n\nThis way, for the tests, we\u0027ll call through the test implementation, but for production applications we\u0027ll fall back to the weak implementation in the library.\n\nFor the tests we also define some further functions to set the time in some fashion, to manipulate the code paths in `pldm_transport_send_recv_msg()` below.",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d32e25f6_7f19ad4f",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-09-10T21:24:24Z",
      "side": 1,
      "message": "Ahhhh ok. I am well aware of this pattern. We used this in now legacy \"facebook openbmc\" a lot as a poor-man\u0027s inheritance where common is weak and the platform meta-layer can override it. I can take it in that direction. Thanks!\n\nBut... I found another issue. In the container which runs the unit tests, LONG_MAX is defined as a 64bit value. So, you dont run into the issue I was running into on the BMC. :-/. I discovered it when I switched this to\n```\nint pldm_transport_test_get_timeval(struct timeval *tv) {\n    if (pldm_transport_get_timeval(tv) !\u003d 0) return -1;\n    tv-\u003etv_sec +\u003d 2589793;\n    return 0;\n}\n```\nand to my horror (I was expecting the unit tests to fail) the unit tests still passed.\nSo, do you suggest in the tests/ implementation, I use `LONG_MAX - 10`?",
      "parentUuid": "057ad3a2_6009f2d6",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2936e233_27bded3d",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1000212
      },
      "writtenOn": "2025-09-10T21:34:09Z",
      "side": 1,
      "message": "also https://github.com/openbmc/libpldm/blob/main/src/utils.[c|h] is the place I think is appropriate to put the time API in.",
      "parentUuid": "d32e25f6_7f19ad4f",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7783ab1_4f412878",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-11T00:30:07Z",
      "side": 1,
      "message": "\u003e .../utils.[c|h] is the place I think is appropriate to put the time API in.\n\nAh, so, throwing things in a \"utils\" TU grinds me quite a bit. I intend to get rid of that over time. I much prefer we add `src/time.[ch]`. Let\u0027s name concepts where we can.\n\n\u003e So, do you suggest in the tests/ implementation, I use LONG_MAX - 10?\n\nYes, given the platform-specific nature, please use `*_MAX` macros where necessary.",
      "parentUuid": "2936e233_27bded3d",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "598729c3_c0728628",
        "filename": "src/transport/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-09T02:00:22Z",
      "side": 1,
      "message": "This needn\u0027t be described in the header. It can live in the implementation.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 17,
        "endChar": 51
      },
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42db71f5_0469c777",
        "filename": "src/transport/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-09-09T02:00:22Z",
      "side": 1,
      "message": "Time isn\u0027t a behaviour of a transport. Rather, it\u0027s measurable through APIs provided by the application environment. While this might feel convenient it\u0027s not the right place. Please remove this callback.",
      "revId": "f3f4b9a88ed43cc7286d6bde2ffd1ff4025b09c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}