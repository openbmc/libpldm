{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b5253528_b70dc97b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: Need to re-wrap the line.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 24
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52e96988_d017fc76",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: NC-SI is an acronym (Network Controller - Sideband Interface) so we should capitalise it",
      "range": {
        "startLine": 15,
        "startChar": 25,
        "endLine": 15,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a18914f5_6da8a24f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5253528_b70dc97b",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 24
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce4819f1_c46aa93a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52e96988_d017fc76",
      "range": {
        "startLine": 15,
        "startChar": 25,
        "endLine": 15,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dc031af_8c99d93d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5253528_b70dc97b",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 24
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c9ac187_606f433d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 15,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52e96988_d017fc76",
      "range": {
        "startLine": 15,
        "startChar": 25,
        "endLine": 15,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eb3df81_4f057a8f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 16,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: Also re-wrap this one.",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4942bc35_2056d47f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 16,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8eb3df81_4f057a8f",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44a5a71a_b04c736e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 16,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8eb3df81_4f057a8f",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eaed010_c582e1a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: plural for later grammar, so \"APIs\"",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 15
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90d62634_a948da5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8eaed010_c582e1a5",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 15
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7567f135_6e12c545",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: As a guide I tend to use markdown in my commit messages. I think it\u0027s nice to highlight specific concepts like the prefix value here, and so tend to enclose them in an inline code block (single backticks)",
      "range": {
        "startLine": 22,
        "startChar": 49,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba9e463d_a4d47244",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7567f135_6e12c545",
      "range": {
        "startLine": 22,
        "startChar": 49,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df7ed685_66dd6f24",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7567f135_6e12c545",
      "range": {
        "startLine": 22,
        "startChar": 49,
        "endLine": 22,
        "endChar": 63
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f2e23b_262eb869",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: Again with the single backticks here if you think that\u0027s a useful idea",
      "range": {
        "startLine": 23,
        "startChar": 5,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "475e5596_e101208a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d3f2e23b_262eb869",
      "range": {
        "startLine": 23,
        "startChar": 5,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fa82103_2e590100",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3f2e23b_262eb869",
      "range": {
        "startLine": 23,
        "startChar": 5,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e253de_17f36a06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 28,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "I think we either drop the colon, or if we keep it, make the list below an explicit numbered list",
      "range": {
        "startLine": 28,
        "startChar": 63,
        "endLine": 28,
        "endChar": 64
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eca3c5c0_6a811116",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 28,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "22e253de_17f36a06",
      "range": {
        "startLine": 28,
        "startChar": 63,
        "endLine": 28,
        "endChar": 64
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2835eea_cc413c9b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 28,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22e253de_17f36a06",
      "range": {
        "startLine": 28,
        "startChar": 63,
        "endLine": 28,
        "endChar": 64
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29411e0b_5ab4eed8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: Can you add a blank line above this first bullet, for clarity?",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c5d7969_17536b55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29411e0b_5ab4eed8",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4865e561_3a111d09",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29411e0b_5ab4eed8",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5d06067_4d30ed47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "Partial review for now, but I have to run and wanted to publish the comment on the range locking.",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "374bb763_4ec8c343",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-07T06:51:00Z",
      "side": 1,
      "message": "Update commit messages to give some details about \"current API\".\nAPI and APIs which is corrected?",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0daedb88_1fe3cc8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-07T09:01:06Z",
      "side": 1,
      "message": "Correct the type in the commit message also,",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d852704c_a4d9ac81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "I\u0027ve fixed a few, but not sure if it\u0027s the one you\u0027re referring to. There might be more :)",
      "parentUuid": "0daedb88_1fe3cc8b",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "355d6c4c_b9c877ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "374bb763_4ec8c343",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb742585_37ae07f3",
        "filename": "include/libpldm/meson.build",
        "patchSetId": 19
      },
      "lineNbr": 32,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2023-03-31T17:26:26Z",
      "side": 1,
      "message": "why this?",
      "range": {
        "startLine": 32,
        "startChar": 22,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a9ace11_36ad11fe",
        "filename": "include/libpldm/meson.build",
        "patchSetId": 19
      },
      "lineNbr": 32,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-19T04:10:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb742585_37ae07f3",
      "range": {
        "startLine": 32,
        "startChar": 22,
        "endLine": 32,
        "endChar": 23
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccedffef_e891d2f5",
        "filename": "include/libpldm/meson.build",
        "patchSetId": 19
      },
      "lineNbr": 33,
      "author": {
        "id": 1001049
      },
      "writtenOn": "2023-03-31T17:26:26Z",
      "side": 1,
      "message": "indentation",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "020af0de_52bb5669",
        "filename": "include/libpldm/meson.build",
        "patchSetId": 19
      },
      "lineNbr": 33,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-19T04:10:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccedffef_e891d2f5",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 3
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fbf2b7a_0b04d881",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 32,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "Let\u0027s drop \u0027being\u0027 and just state that it\u0027s deprecated.",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 28
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12c36d0e_909187f8",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 32,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fbf2b7a_0b04d881",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 28
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a13da5a9_66ec45c4",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 32,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fbf2b7a_0b04d881",
      "range": {
        "startLine": 32,
        "startChar": 23,
        "endLine": 32,
        "endChar": 28
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c33234d_741dc4ee",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 141,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: inconsistent capitalisation of acronyms? Should probably go with uppercase throughout.",
      "range": {
        "startLine": 141,
        "startChar": 26,
        "endLine": 141,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a799e2b0_56184042",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 141,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "I was trying to use capitalisation to differentiate between concepts directly from the PLDM spec (`PLDM`) and implementation based things `pldm`. Do you think it\u0027s fine to just use `PLDM` for both of those cases?",
      "parentUuid": "0c33234d_741dc4ee",
      "range": {
        "startLine": 141,
        "startChar": 26,
        "endLine": 141,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17169937_7d701f93",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 141,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-19T00:49:12Z",
      "side": 1,
      "message": "Yep, fine with capitalised PLDM everywhere. I don\u0027t think that distinction is obvious.",
      "parentUuid": "a799e2b0_56184042",
      "range": {
        "startLine": 141,
        "startChar": 26,
        "endLine": 141,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a390d5ff_432d8dd2",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 141,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-19T04:10:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "17169937_7d701f93",
      "range": {
        "startLine": 141,
        "startChar": 26,
        "endLine": 141,
        "endChar": 30
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d251fb9_86c61a85",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 163,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: If we\u0027re capitalising TID then we should capitalise \"ID\" here?",
      "range": {
        "startLine": 163,
        "startChar": 32,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8982ed8_ad27694e",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 163,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6d251fb9_86c61a85",
      "range": {
        "startLine": 163,
        "startChar": 32,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a567db0_2108d1ab",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 167,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "PLDM instance ID *object*",
      "range": {
        "startLine": 167,
        "startChar": 54,
        "endLine": 167,
        "endChar": 70
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b7fed08_f80d8378",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 167,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7a567db0_2108d1ab",
      "range": {
        "startLine": 167,
        "startChar": 54,
        "endLine": 167,
        "endChar": 70
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dd3e422_23b99b23",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 177,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-27T01:36:36Z",
      "side": 1,
      "message": "So I was thinking about this a bit more over the weekend. I think we might want to separate the instance ID allocation API from the `pldm_requester_*` set of APIs. I think we want to do that because as a user of the `pldm_requester_*` APIs, I shouldn\u0027t have to care about details such as instance IDs. Instance IDs are required to handle timeout/retry scenarios, which are details that should be abstracted over by `pldm_requester_*` APIs.\n\nNow, unfortunately, libpldm doesn\u0027t currently separate message serialisation from message framing. That is, the encode APIs require the caller pass in an allocated instance ID. Hopefully we can rework the APIs to remove that requirement, at which point the concept of an instance ID would be entirely contained within the implementation of the `pldm_requester_*` APIs.\n\nSo we separate the instance ID database API out. We bless it with its own object:\n\n```\ntypedef ... pldm_tid_t;\ntypedef ... pldm_iid_t;\nstruct pldm_instance_db;\nint pldm_instance_db_init(struct pldm_instance_db *ctx, const char *dbpath);\nstatic inline int pldm_instance_db_init_default(struct pldm_instance_db *ctx)\n{\n    return pldm_instance_db_init(ctx, \"/usr/share/libpldm/instance-db/default\");\n}\nint pldm_instance_db_destroy(struct pldm_instance_db *ctx);\nint pldm_instance_db_alloc(struct pldm_instance_db *ctx, pldm_tid_t tid, pldm_iid_t *iid);\nint pldm_instance_db_free(struct pldm_instance_db *ctx, pldm_tid_t tid, pldm_iid_t iid);\n```\n\nAnother problem solved in the proposal above is that it seems feasible for a system to contain separate TID domains, e.g. if you talk PLDM to devices over MCTP, these might be in a separate TID domain to devices on an NC-SI transport (i.e. devices on each transport may take the same TID). It\u0027s not clear whether this is something allowed for by the PLDM spec. In the event that it is allowed then the suggested API (of providing the db path to `pldm_instance_db_init()`) yields a correct implementation. We make life easy for those who don\u0027t care for the detail with the `pldm_instance_db_init_default()` function which just provides a path to a default database\n\nFrom here the `pldm_requester_*` object is implemented by the composition of the transport and instance db objects:\n\n```\n+---------------------------------------+\n|                                       |\n|           pldm_requester_*            |\n|                                       |\n+------------------+--------------------+\n|                  |                    |\n| pldm_transport_* | pldm_instance_db_* |\n|                  |                    |\n+------------------+--------------------+\n```\n\nThe prototype for `pldm_requester_init()` would look like:\n\n```\nint pldm_requester_init(struct pldm_requester *ctx,\n                        struct pldm_instance_db *instancedb);\n```\n\nAgain, for those that don\u0027t care about the details, we can do:\n\n```\nstatic inline pldm_requester_init_default(struct pldm_requester *ctx)\n{\n    struct pldm_instance_db idb;\n    int rc;\n    \n    rc \u003d pldm_instance_db_init_default(\u0026idb);\n    if (rc \u003c 0)\n        return rc;\n    \n    return pldm_requester_init(ctx, \u0026idb);\n}\n```\n\nThoughts?",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa481d94_2cddf8d8",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 177,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2023-04-03T06:13:35Z",
      "side": 1,
      "message": "\u003e Another problem solved in the proposal above is that it seems feasible for a system to contain separate TID domains, e.g. if you talk PLDM to devices over MCTP, these might be in a separate TID domain to devices on an NC-SI transport (i.e. devices on each transport may take the same TID). It\u0027s not clear whether this is something allowed for by the PLDM spec.\n\nI believe it is possible, but it can be same device reachable on 2 different transports.  In other words, from BMC perspective, A TID X on 2 different transport indicate same Terminus/Device. If we don\u0027t follow that logic, we will end up tracking PLDM UUIDs/transport specifier in other applications which consumes PLDM data.\n\nIf we take a PCIe add in card example, it could be reachable via PCIe and SMBus(not an ideal example though). And it will have different network id/EID. In that case, let\u0027s say card likes to use smbus interface at first and pcie transport later, then having same TID would help in managing PDRs, sensors, FRU, FW inventory etc.\n\n\nOn the other hand, if we provide same TID for 2 different devices then, TID alone will not be sufficient to identify a Terminus. I don\u0027t think this will be a feasible design.",
      "parentUuid": "3dd3e422_23b99b23",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61a2f8f5_e8109a09",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 177,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:25:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa481d94_2cddf8d8",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e77d2d_ff0855b7",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 188,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "Surely we can detect this case and return an error? I further, I think we want an error over success as we want to be able to detect logic bugs like double frees.",
      "range": {
        "startLine": 187,
        "startChar": 46,
        "endLine": 188,
        "endChar": 20
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b7ec436_01ce0e38",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 19
      },
      "lineNbr": 188,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "10e77d2d_ff0855b7",
      "range": {
        "startLine": 187,
        "startChar": 46,
        "endLine": 188,
        "endChar": 20
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56896ac0_cc54699c",
        "filename": "include/libpldm/transport/transport.h",
        "patchSetId": 19
      },
      "lineNbr": 36,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "nit: Again, inconsistent capitalisation across the documentation. Please audit all the added doxygen and make it consistent :)",
      "range": {
        "startLine": 36,
        "startChar": 32,
        "endLine": 36,
        "endChar": 36
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b3d4776_5ce1a5e0",
        "filename": "include/libpldm/transport/transport.h",
        "patchSetId": 19
      },
      "lineNbr": 36,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-19T04:10:34Z",
      "side": 1,
      "message": "I think I\u0027ve addressed this by deferring the addition of these `pldm_requester` APIs until we actually need them",
      "parentUuid": "56896ac0_cc54699c",
      "range": {
        "startLine": 36,
        "startChar": 32,
        "endLine": 36,
        "endChar": 36
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b367dcbd_8d11c796",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-24T04:10:34Z",
      "side": 1,
      "message": "I know we brainstormed this quickly elsewhere, but I think I lost track of my own train of thought.\n\nWe need some care as this becomes an internal ABI. If we merge this and then change the paths or behaviour down the track then things will break at runtime.\n\nWith the current implementation we need to make sure that these paths can be created when the loading process\u0027 EUID/EGID isn\u0027t e.g. root. We might need the build system to install the directory tree with the required permissions to allow that. However, configuring permissions for all EUID/EGIDs to create the files could lead to issues where a malicious process unlinks the files instead. Things are going to go south pretty hard at that point.\n\nOn a related point, no mutable state should need to persist across reboots. Having these files present after a reboot is not meaningful (no locks would be held) and we have to assume they don\u0027t exist anyway. Essentially they are ephemeral and probably belong in `/run` instead. However, `/run` suffers from the \"need something to set up the directories and permissions problem\" even more than `/var/lib` as we can\u0027t exploit the build system to initialise a directory in `/run`. Further, we certainly don\u0027t want to go down the path of requiring all applications that link against libpldm to use `ExecStartPre` directives in their service units to force the existence of the directory for the instance ID files. The other option would be to have a unit dedicated to libpldm to set it up before any dependent applications ran, but that still seems annoying and fragile to orchestrate.\n\nRegardless, moving things to `/run` doesn\u0027t solve the integrity problems outlined above. Same problem, different location.\n\nSo, is there something we can do that can solve both issues? I think there is. Essentially, we:\n\n1. Have one database file that caters to all instance IDs for all terminus IDs. The file size is thus `TERMINUS_ID_COUNT * INSTANCE_ID_COUNT \u003d 256 * 32 \u003d 8192` bytes\n2. Store that file in read-only storage, say /usr/share/libpldm/instance-ids\n3. Use the Open File Descriptor advisory locking to contain locks to file descriptors rather than processes (`F_OFD_*LCK` symbols rather than `F_*LCK` symbols)\n4. Exploit the lock escalation behaviour (converting a read lock to a write lock if there isn\u0027t another conflicting read lock) provided by `F_OFD_SETLCK`, where `F_OFD_GETLCK` will report `F_UNLCK` for a `F_WRLCK` request if the file descriptor already holds an `F_RDLCK` for the range.\n5. Exploit the fact that an `F_OFD_GETLCK` operation with an `F_WRLCK` lock type on a read-only file descriptor yields an `F_RDLCK` result on conflict and not an error due to the file descriptor being read-only\n\nWith this we eliminate all our problems. I will post a demo of the behaviour in a blog post and a sketch of the algorithm a bit later.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 52
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ade7d4e_9ebf45cb",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-03-30T21:26:35Z",
      "side": 1,
      "message": "Blog post!\n\nhttps://amboar.github.io/notes/2023/03/29/a-global-pldm-instance-id-allocator-for-libpldm.html",
      "parentUuid": "b367dcbd_8d11c796",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 52
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb1f9c69_83e7a432",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Some good points, I think I\u0027ve included everything you\u0027ve suggested.",
      "parentUuid": "6ade7d4e_9ebf45cb",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 52
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "883aa9e4_0c350b71",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:25:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb1f9c69_83e7a432",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 52
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffed1e14_ba8c0026",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 65,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2023-04-03T06:13:35Z",
      "side": 1,
      "message": "`pldm_requester_init_iid_file` How about iid(instance id), instead of just id?\nFor other APIs as well.",
      "range": {
        "startLine": 65,
        "startChar": 20,
        "endLine": 65,
        "endChar": 22
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7406590a_9f3f5b6c",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 65,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "thoughts on the new instance id API name?",
      "parentUuid": "ffed1e14_ba8c0026",
      "range": {
        "startLine": 65,
        "startChar": 20,
        "endLine": 65,
        "endChar": 22
      },
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1534f7f6_ceab16cc",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 187,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-07T09:01:06Z",
      "side": 1,
      "message": "With this instanceID allocation mechanism the instanceID will continue increasing until it hits 32 then back to 0.\nThis is difference with current mechanism which will priority the smallest free instanceID.\nI think the old mechanism have better performance because we will do less comparing than the new one.",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c157b2d_7b5c1549",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 187,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Hi, I\u0027m not convinced that this change  will result in a noticeable performance degradation considering the environment this code is running in. If it is something you are concerned about, we can work together to measure it?\n\n\u003eWith this instanceID allocation mechanism the instanceID will continue increasing until it hits 32 then back to 0.\n\nThis is intended. The PLDM spec specifies that:\n\u003e \"the Instance ID field is used to identify a new instance of a PLDM request to differentiate new PLDM requests that are sent to the same PLDM terminus\"\n\nwhich means the current approach of always using the first available ID (from 0) can lead to incorrect behaviour, as two successive PLDM requests to the same TID could have the same instance ID. The proposed approach means this scenario is a lot less likely to occur.",
      "parentUuid": "1534f7f6_ceab16cc",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0092bf8_605a98d5",
        "filename": "src/requester/pldm.c",
        "patchSetId": 19
      },
      "lineNbr": 187,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-13T13:49:52Z",
      "side": 1,
      "message": "New patch the next free instance ID of the latest allocated instance ID will be used. So there is no difference with the current pldm code.",
      "parentUuid": "8c157b2d_7b5c1549",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31186c39_8122d799",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 19
      },
      "lineNbr": 160,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-07T09:01:06Z",
      "side": 1,
      "message": "It is unnecessary, but should we add the default return of function?",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a382c1d9_be769a7a",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 19
      },
      "lineNbr": 160,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31186c39_8122d799",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0b259c_c59d33fe",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 19
      },
      "lineNbr": 199,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-07T09:01:06Z",
      "side": 1,
      "message": "Add constant definition instead of hardcode.",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3200ebb_5d5e7d64",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 19
      },
      "lineNbr": 199,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-04-13T07:52:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c0b259c_c59d33fe",
      "revId": "5ddf3e4ae99399f34ee2d8ad9961cd4d501fc0b9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}