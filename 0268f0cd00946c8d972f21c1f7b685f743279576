{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e9cca604_e46dafa6",
        "filename": "src/transport/transport.c",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-23T04:35:09Z",
      "side": 1,
      "message": "Oh, the return value must be one of the `PLDM_REQUESTER_*` constants, we mustn\u0027t be inconsistent here. Sorry, just noticed this.",
      "revId": "0268f0cd00946c8d972f21c1f7b685f743279576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f8800db_1fb1ff30",
        "filename": "src/transport/transport.c",
        "patchSetId": 15
      },
      "lineNbr": 156,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-05-23T14:50:24Z",
      "side": 1,
      "message": "I think PLDM_REQUESTER_RECV_FAIL and PLDM_REQUESTER_POLL_FAIL is potential options.",
      "parentUuid": "e9cca604_e46dafa6",
      "revId": "0268f0cd00946c8d972f21c1f7b685f743279576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb842a3e_632631a5",
        "filename": "src/transport/transport.c",
        "patchSetId": 15
      },
      "lineNbr": 172,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-23T04:35:09Z",
      "side": 1,
      "message": "This doesn\u0027t fix the upper bound issue I mentioned in PS14. We\u0027re still passing a constant through to `pldm_transport_poll()` on line 161 and that will allow us to exceed the timeout upper bound quite significantly if we take multiple trips through the loop.\n\nFurther if we break here we return the `rc` value provided by `pldm_transport_recv_msg()` which may be unrelated to a failure of `clock_gettimeval()`. We should be clear about what caused the failure. The success of the `clock_gettimeval()` call is essential to the correct operation of the loop, and if it doesn\u0027t succeed we can\u0027t meet the timing guarantee we\u0027re trying to provide. We should pick an appropriate `PLDM_REQUESTER_*` constant to return.",
      "revId": "0268f0cd00946c8d972f21c1f7b685f743279576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fef1537_06ae193b",
        "filename": "src/transport/transport.c",
        "patchSetId": 15
      },
      "lineNbr": 172,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-05-23T14:50:24Z",
      "side": 1,
      "message": "I think we can send PT1 + 2*PT4 \u003d 300ms to pldm_transport_poll() as \"Table 6: Timing specifications for PLDM messages\" in DSP0240\nSo we can reduce the exceed time from 4800ms to 300ms. The bias 6.25% with the expected time out is acceptable also.",
      "parentUuid": "bb842a3e_632631a5",
      "revId": "0268f0cd00946c8d972f21c1f7b685f743279576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}