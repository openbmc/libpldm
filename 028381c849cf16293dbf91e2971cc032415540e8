{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "594505c4_732307e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 27
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Hi Varsha, the patch continues to improve. I still have some (different) endianness and overflow concerns. I\u0027ll also ask Manoj to respond regarding the question of the PDR repository datastructure design.",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba293a77_f9f9a138",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 27
      },
      "lineNbr": 455,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Nit: Trailing whitespace.\n\nPlease audit the rest of the patch for other instances.",
      "range": {
        "startLine": 455,
        "startChar": 88,
        "endLine": 455,
        "endChar": 89
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22036b8b_0dc806c2",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 27
      },
      "lineNbr": 457,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "This shouldn\u0027t mention host, right?",
      "range": {
        "startLine": 457,
        "startChar": 38,
        "endLine": 457,
        "endChar": 42
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cc9280a_ee0ae689",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 27
      },
      "lineNbr": 462,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Updated how? What does it mean?",
      "range": {
        "startLine": 462,
        "startChar": 39,
        "endLine": 462,
        "endChar": 46
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1de1883_768c323b",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 27
      },
      "lineNbr": 462,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Typo: `contained`",
      "range": {
        "startLine": 462,
        "startChar": 64,
        "endLine": 462,
        "endChar": 73
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ada8bc4f_df0ba02e",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 27
      },
      "lineNbr": 477,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Typo: contained",
      "range": {
        "startLine": 477,
        "startChar": 68,
        "endLine": 477,
        "endChar": 77
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "757c5ce5_a740f3a4",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1348,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "The `undef` probably needs to come after its use ðŸ˜Š\n\nBut why not just leave it defined? Is this not a reasonable definition?\n\nIf we can leave it defined, just define it after the includes near the top of the file?",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2380c7ba_a9657233",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1348,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "757c5ce5_a740f3a4",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b3ae87a_8a8870e1",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1348,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2380c7ba_a9657233",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54a88a00_b7b9696a",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1360,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "What if `size_t` is 32-bit?",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd62fb6_cae1beb1",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1360,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54a88a00_b7b9696a",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e060c1e_5f64aa14",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1360,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-13T00:44:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "acd62fb6_cae1beb1",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "218d4171_ec18128c",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "This doesn\u0027t look right. What tells us `record-\u003erecord_handle` is in host-endianness, and why should it be inconsistent between `record` and `new_record`?\n\nFurther, we\u0027re not using it in any calculation, so there\u0027s no reason to care, right? Shouldn\u0027t this just be\n\n```\nnew_record-\u003erecord_handle \u003d record-\u003erecord_handle;\n```\n\n?",
      "range": {
        "startLine": 1370,
        "startChar": 29,
        "endLine": 1370,
        "endChar": 60
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e385bc3e_00fc3f43",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "corrected it",
      "parentUuid": "218d4171_ec18128c",
      "range": {
        "startLine": 1370,
        "startChar": 29,
        "endLine": 1370,
        "endChar": 60
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6deb3432_1bee4ed4",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e385bc3e_00fc3f43",
      "range": {
        "startLine": 1370,
        "startChar": 29,
        "endLine": 1370,
        "endChar": 60
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5003fc7_29c71307",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "If we\u0027re storing pointers in the struct why are we encoding non-pointer values into something that\u0027s not host-endianness? You can\u0027t (sensibly) put pointers on the wire, and mixing wire data with local data is just a recipe for confusion.\n\nThis comment is unfortunately a bit broader than your patch, but needs to be resolved.",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ad43071_88bd52b3",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Can we address this after this commit?",
      "parentUuid": "c5003fc7_29c71307",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a7dd09_b122a0e5",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Well, we need to understand that it\u0027s correct first! If it\u0027s not we need to fix the expression, but if the expression is correct in the context of the current design, we can certainly defer fixing the design until later.",
      "parentUuid": "6ad43071_88bd52b3",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7f9e8f2_a73cb31b",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-05-09T10:21:28Z",
      "side": 1,
      "message": "I think we need to make sure that when pldm call into the libpldm API\u0027s we give it data in host-endianness format, so that we could avoid complicated conversions in libpldm. \n\n@andrew in this case, looks to me like the `record` is basically coming from `repo` which is created by PLDM at https://github.com/openbmc/pldm/blob/ba741d5fd0e0f0f245e74d40caa159581a45479c/libpldmresponder/pdr_utils.cpp#L31 , its created in little endian because its created by the BMC app..and if we convert that to host endian before passing it to the libpldm API we would not have these conversions in libpldm. is that the right way to fix things ?",
      "parentUuid": "c6a7dd09_b122a0e5",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "112bc924_3693d099",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-10T01:45:39Z",
      "side": 1,
      "message": "\u003e I think we need to make sure that when pldm call into the libpldm API\u0027s we give it data in host-endianness format, so that we could avoid complicated conversions in libpldm. \n\nHmm, hang on a moment; libpldm is _precisely_ the place that we should put _all_ the endianness conversions, in the functions where we encoding-to and decoding-from the wire format. There should be no endian conversions anywhere else.\n\n\u003e its created in little endian because its created by the BMC app..and if we convert that to host endian before passing it to the libpldm API we would not have these conversions in libpldm. is that the right way to fix things ?\n\nAlright, hold onto your hats, because I think there might be a source of confusion here around the word \u0027host\u0027. Let me try to lay a few things out.\n\n1. OpenBMC is a project born from a design philosophy that divides a computer into (at least) two sub-computers. The functions to manage the computer are moved into one of the sub-computers which we often call the BMC, while the workload is run on the other sub-computer which we often call the host.\n\n2. Endianness is a problem born from two concerns:\n\n   2.1 Consensus on computer memory being addressable in 8-bit quantities (a byte), and\n   2.2 That we also need to work with numbers large enough to exceed 8 bits.\n   \n   So endianness is the problem of how we arrange in memory the ordering of the byte quantities that together represent the multi-byte value. There are two prevalent approaches:\n   \n   2.2. Little-endian, where the value\u0027s least-significant byte appears at the lowest memory address\n   2.3 Big-endian, where the values most-significant byte appears at the lowest memory address\n   \n   I\u0027ve drawn a nice diagram of this [here](https://amboar.github.io/notes/2023/06/19/representations-and-design-boundaries-with-endianness.html)\n   \n   The history of handling endianness has lead to its own terminology, with some back-story in how software is built and the language of cross-compilation. Diverting briefly through the [automake documentation](https://www.gnu.org/software/automake/manual/html_node/Cross_002dCompilation.html) we find the following definitions for the command line switches of `configure` from autotools:\n   \n   2.4 `--build\u003d`: The system on which the package is built.\n   2.5 `--host\u003d`: The system where built programs and libraries will run.\n   2.6 `--target\u003d`: (we\u0027re going to ignore this one, as it\u0027s both confusing and irrelevant for this discussion)\n   \n   To make this concrete, consider the case of OpenBMC. Typically it runs on 32-bit ARM systems, e.g. a Cortex-A7 in the AST2600, which implements the ARMv7-A ISA. However, I tend to build OpenBMC on my laptop, which is an x86-64 machine. In the context of the autotools vocabulary above, when building OpenBMC on my laptop, when running a `configure` script `bitbake` sets something that is approximately `--build\u003dx86_64-linux-gnu` and `--host\u003darm-linux-gnueabihf`.\n   \n---\n\nThe point here is that in this discussion, \u0027host\u0027 takes multiple definitions which together may cause a lot of confusion:\n\n1. In the context of OpenBMC, the \u0027host\u0027 is the thing that\u0027s _not_ the BMC\n2. In the context of endianness, the \u0027host\u0027 is the thing on which the software is _running_, which in OpenBMC could be _either_ the \u0027host\u0027 (in the \u0027not the BMC\u0027 sense), or the BMC itself.\n\nSo now an extract of the `endian` manpage:\n\n\u003e DESCRIPTION         top\n\u003e \n\u003e These functions convert the byte encoding of integer values from\n\u003e the byte order that the current CPU (the \"host\") uses, to and\n\u003e from little-endian and big-endian byte order.\n\nhttps://man7.org/linux/man-pages/man3/endian.3.html#DESCRIPTION\n\nSo in the context of endianness and software running on the BMC, the \u0027host\u0027 is the \u0027current CPU\u0027, which is the BMC\u0027s CPU. Concretely:\n\n- `le32toh()` converts a 32-bit value from little-endian to the endianness of the BMC\u0027s CPU\n- `htole32()` converts a 32-bit value from the endianness of the BMC\u0027s CPU to little-endian\n\nTo try to drive the point home, none of the behaviour of the endian-conversion functions involve anything to do with the \u0027host\u0027 in the not-the-BMC sense. There is no concept of this in their definition.\n\nThe remaining point is that the endian conversion functions uphold their post-condition regardless of _what_ endianness the current CPU is operating in. Which endianness the current CPU is operating in is a matter of how the hardware is implemented and how the ABI for the entire software stack is defined. For Linux on ARM and hence OpenBMC, we use little-endian. By way of contrast, IBM\u0027s Power CPUs are traditionally big-endian (and their firmware operates in big-endian).\n\nTo try to drive _that_ point home, the implementation of the endianness macros discussed above is instructive:\n\n```\n# if __BYTE_ORDER \u003d\u003d __LITTLE_ENDIAN\n...\n#  define htole32(x) __uint32_identity (x)\n#  define le32toh(x) __uint32_identity (x)\n...\n# else\n...\n#  define htole32(x) __bswap_32 (x)\n#  define le32toh(x) __bswap_32 (x)\n#endif\n```\n\nhttps://sourceware.org/git/?p\u003dglibc.git;a\u003dblob;f\u003dstring/endian.h;h\u003dfd20a2b1985de01e0472d826f2621839bb8e3032;hb\u003dHEAD\n\nThat is, if the current CPU (again, \u0027host\u0027 - the BMC\u0027s CPU in the case of OpenBMC) is little-endian, then they are defined to [return the argument value unchanged](https://sourceware.org/git/?p\u003dglibc.git;a\u003dblob;f\u003dbits/uintn-identity.h;h\u003d8104070583c7b1ef2b596420c4f2725b238e1b97;hb\u003dHEAD), otherwise (when the current CPU is running as big-endian) they are defined to swap the bytes.\n\n---\n\nWith that all in mind, can we re-examine whether some of these endian-conversions are required? Essentially:\n\n1. Anything that is in the PLDM wire-format must be little-endian.\n2. Anything _not_ in the PLDM wire-format _really should_ be host-endian, where \u0027host\u0027 is meant in the \u0027CPU on which the software is currently executing\u0027 sense\n\nSubstantiating 1, from DSP0240 v1.1.0, Section 5.3 Byte ordering:\n\n\u003e Unless otherwise specified, for all PLDM specifications byte ordering of multibyte numeric fields or multibyte bit fields is \"Little Endian\" (that is, the lowest byte offset holds the least significant byte, and higher offsets hold the more significant bytes).",
      "parentUuid": "e7f9e8f2_a73cb31b",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c81cce3_93aff2de",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1373,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-13T00:44:32Z",
      "side": 1,
      "message": "\u003e 2. Anything not in the PLDM wire-format really should be host-endian, where \u0027host\u0027 is meant in the \u0027CPU on which the software is currently executing\u0027 sense\n\nIf:\n\n1. The statement in 2. above was actually always the intent, and\n2. The statement about the members being little-endian was made with the additional context of libpldm running on the BMC\n\nThen:\n\n- We need to remove all endian conversion calls touching the `pldm_pdr_record` members.\n\nThe current patch is not self-consistent with how endianness is handled for `pldm_pdr_record`. It needs to be audited, any problems fixed (endian conversions removed) for all accesses, and not only in places where I\u0027ve left a comment.",
      "parentUuid": "112bc924_3693d099",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76aec7b0_9103631e",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1393,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Needs a check for overflow.",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8d61886_6b3bb1d6",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1393,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76aec7b0_9103631e",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd5d91c8_a57caf0d",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1393,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8d61886_6b3bb1d6",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27b92969_7da8b547",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1394,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "This can be `pldm_msgbuf_insert(dst, header_length);`, right?",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5b5bcb0_19370ca9",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1394,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27b92969_7da8b547",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0c28c9c_3b96c470",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1394,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5b5bcb0_19370ca9",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ade6b420_2fc63c33",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1406,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "It would feel to me like less of a contortion to do:\n\n```\nif (num_children \u003d\u003d UINT8_MAX) {\n    rc \u003d -EOVERFLOW;\n    goto cleanup_new_record;\n}\n```\n\nIt seems more obvious that we\u0027re hit the last one?",
      "range": {
        "startLine": 1406,
        "startChar": 5,
        "endLine": 1406,
        "endChar": 34
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50549fb_97a10c29",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1406,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ade6b420_2fc63c33",
      "range": {
        "startLine": 1406,
        "startChar": 5,
        "endLine": 1406,
        "endChar": 34
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c913cf1_dcc0fe4a",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1406,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b50549fb_97a10c29",
      "range": {
        "startLine": 1406,
        "startChar": 5,
        "endLine": 1406,
        "endChar": 34
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c35e2f81_8ebedc32",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1411,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Again, just `pldm_msgbuf_insert()` should be enough?",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdbd2a61_6c340c10",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1411,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c35e2f81_8ebedc32",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0422ac10_7be23c5b",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1411,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdbd2a61_6c340c10",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "973b6456_e71eee19",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1420,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "If you\u0027re going to reuse `src` here, you first need to:\n\n```\nrc \u003d pldm_msgbuf_destroy(src);\nif (rc) {\n    goto cleanup_new_record;\n}\n```\n\nOtherwise we\u0027re going to lose any overflow detection for the original buffer associated with `src`.",
      "range": {
        "startLine": 1420,
        "startChar": 23,
        "endLine": 1420,
        "endChar": 26
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7878c23e_51ca3708",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1420,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "973b6456_e71eee19",
      "range": {
        "startLine": 1420,
        "startChar": 23,
        "endLine": 1420,
        "endChar": 26
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d56b34a_81bcf9e2",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1420,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7878c23e_51ca3708",
      "range": {
        "startLine": 1420,
        "startChar": 23,
        "endLine": 1420,
        "endChar": 26
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "168e0a96_43e7bdbb",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Isn\u0027t this little-endian?\n\nWhat endianness is `repo-\u003esize`?",
      "range": {
        "startLine": 1448,
        "startChar": 15,
        "endLine": 1448,
        "endChar": 28
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ff07570_530fa716",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "168e0a96_43e7bdbb",
      "range": {
        "startLine": 1448,
        "startChar": 15,
        "endLine": 1448,
        "endChar": 28
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09b395a0_45692fa3",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1448,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ff07570_530fa716",
      "range": {
        "startLine": 1448,
        "startChar": 15,
        "endLine": 1448,
        "endChar": 28
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87d05e2a_b30687bb",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1449,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Same here?",
      "range": {
        "startLine": 1449,
        "startChar": 15,
        "endLine": 1449,
        "endChar": 32
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a234ce62_d50c3731",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1449,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87d05e2a_b30687bb",
      "range": {
        "startLine": 1449,
        "startChar": 15,
        "endLine": 1449,
        "endChar": 32
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e664442_72d986f3",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1449,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a234ce62_d50c3731",
      "range": {
        "startLine": 1449,
        "startChar": 15,
        "endLine": 1449,
        "endChar": 32
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80c498cb_80de6f0c",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1461,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:05:46Z",
      "side": 1,
      "message": "Oh, so rather than a conditional here, I prefer we add another label, so:\n\n```\ncleanup_new_record_data:\n    free(new_record-\u003edata);\n\ncleanup_new_record:\n    free(new_record);\n    \n    return rc;\n```\n\nAnd then adjust the `goto`s above.",
      "range": {
        "startLine": 1459,
        "startChar": 1,
        "endLine": 1461,
        "endChar": 2
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "168e48da_6a2e4d1c",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1461,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80c498cb_80de6f0c",
      "range": {
        "startLine": 1459,
        "startChar": 1,
        "endLine": 1461,
        "endChar": 2
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98856756_268d62d2",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1461,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "168e48da_6a2e4d1c",
      "range": {
        "startLine": 1459,
        "startChar": 1,
        "endLine": 1461,
        "endChar": 2
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf397dd9_aa2eaeb0",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Is it not declared packed? Why are we manually adding field lengths below?",
      "range": {
        "startLine": 1498,
        "startChar": 12,
        "endLine": 1498,
        "endChar": 46
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fc828b_87286c00",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf397dd9_aa2eaeb0",
      "range": {
        "startLine": 1498,
        "startChar": 12,
        "endLine": 1498,
        "endChar": 46
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00d03185_3b78587a",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72fc828b_87286c00",
      "range": {
        "startLine": 1498,
        "startChar": 12,
        "endLine": 1498,
        "endChar": 46
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83be7ec5_2c061e09",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1516,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "You must do the overflow check before the addition, otherwise the compiler will just delete the check.",
      "range": {
        "startLine": 1515,
        "startChar": 1,
        "endLine": 1516,
        "endChar": 47
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c83b5a4_d316b932",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1516,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83be7ec5_2c061e09",
      "range": {
        "startLine": 1515,
        "startChar": 1,
        "endLine": 1516,
        "endChar": 47
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "076706a3_79f4bea9",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1516,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c83b5a4_d316b932",
      "range": {
        "startLine": 1515,
        "startChar": 1,
        "endLine": 1516,
        "endChar": 47
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c6559c9_cae49e37",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1527,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Endianness",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ecb115_239cf762",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1527,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c6559c9_cae49e37",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aed81ad_e3cc6d02",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1527,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3ecb115_239cf762",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0ccdc0d_ad222074",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1541,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "`pldm_msgbuf_insert()`? The type information is encoded in the variable declaration.",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4b13f6e_df1f40ab",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1541,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0ccdc0d_ad222074",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0281b10_884a6869",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1541,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4b13f6e_df1f40ab",
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "871b3e7d_ef0bdd60",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1605,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:05:46Z",
      "side": 1,
      "message": "Use the `cleanup_new_record_data` label approach discussed above here as well.",
      "range": {
        "startLine": 1603,
        "startChar": 1,
        "endLine": 1605,
        "endChar": 2
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "673681a3_94549453",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1605,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T06:58:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "871b3e7d_ef0bdd60",
      "range": {
        "startLine": 1603,
        "startChar": 1,
        "endLine": 1605,
        "endChar": 2
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cd6e861_b891e927",
        "filename": "src/pdr.c",
        "patchSetId": 27
      },
      "lineNbr": 1605,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T07:42:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "673681a3_94549453",
      "range": {
        "startLine": 1603,
        "startChar": 1,
        "endLine": 1605,
        "endChar": 2
      },
      "revId": "028381c849cf16293dbf91e2971cc032415540e8",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}