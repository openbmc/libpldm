{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e96867b_51d58368",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "This patch affects the PDR subsystem, so please prefix the subject with `pdr: `.",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776790ff_f8ac7893",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "Generally if you\u0027re starting a sentence with \"This commit ...\" it indicates that you\u0027re explaining *what*, not *why*. We need the *why* in the commit message. Why would someone want to find the last record?",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b91107f4_fa198023",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "Range of what?",
      "range": {
        "startLine": 10,
        "startChar": 38,
        "endLine": 10,
        "endChar": 62
      },
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae6f023a_0add9cd8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "Hi Pavithra, there\u0027s a bit of a problem regarding inclusive vs exclusive ranges. That\u0027s the primary concern.\n\nI\u0027ve also suggested an approach to tidying up the search loop that eliminates many of the variables we have currently.\n\nThere should also be tests provided for this new functionality.",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93b9b751_49c64375",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "`first` itself isn\u0027t a range, it\u0027s the first record handle value in the range. The documentation should state that it\u0027s value is a handle value.",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c1d3ec_14fed2ef",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "As above, `last` itself isn\u0027t a range, just an element. The documentation should state that it\u0027s value is a handle value.\n\nThat said, you need to indicate whether the range is open or closed at each end. Intuitively this range should be closed at both ends.\n\nhttps://en.wikipedia.org/wiki/Interval_(mathematics)#Terminology\n\nHowever, there are several ways to represent the range, the way we have it here, and `[start, length]`. I\u0027m honestly not sure which we should choose, but I went with `[first, last]`. What do you think?",
      "range": {
        "startLine": 163,
        "startChar": 1,
        "endLine": 164,
        "endChar": 46
      },
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e373f448_795e0588",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 5
      },
      "lineNbr": 2181,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "Is this an IBM-specific value? If so it should not be defined in this file (`include/libpldm/platform.h`). At worst it should be defined in an OEM include. Ideally we\u0027d not define it in libpldm at all.",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f77cfd_2bd23856",
        "filename": "src/pdr.c",
        "patchSetId": 5
      },
      "lineNbr": 979,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "Please make sure declarations occur before code. I realise that\u0027s no longer required, but it does retain alignment with Linux\u0027s C style requirements (which are the style requirements for C in OpenBMC).",
      "range": {
        "startLine": 976,
        "startChar": 1,
        "endLine": 979,
        "endChar": 35
      },
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "082b192d_423644ba",
        "filename": "src/pdr.c",
        "patchSetId": 5
      },
      "lineNbr": 980,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "Shouldn\u0027t we do this instead?\n\n```\nif (!curr) {\n    return NULL;\n}\nrecent_record_handle \u003d curr-\u003erecord_handle;\n```\n\nOr better yet, bail out before all the other assignments by just testing `repo-\u003efirst` on line 976 and moving all the assignments down.",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8db4d62_232153a4",
        "filename": "src/pdr.c",
        "patchSetId": 5
      },
      "lineNbr": 985,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "These inequalities make the provided range exclusive, not inclusive. That\u0027s not right as it makes impossible to include handle values at extremes.",
      "range": {
        "startLine": 984,
        "startChar": 1,
        "endLine": 985,
        "endChar": 37
      },
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ba7839_c7b9e49f",
        "filename": "src/pdr.c",
        "patchSetId": 5
      },
      "lineNbr": 994,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-02T06:58:31Z",
      "side": 1,
      "message": "The loop doesn\u0027t contain a break, so it\u0027s implied that `curr \u003d\u003d NULL` here. Further, if we return early as per my suggestion on line 980, that also implies that `prev !\u003d NULL`. Which means we can eliminate this if-block and just do `return record` in place of both it and the `return NULL` on line 997.\n\nFurther, because we know `prev !\u003d NULL` it implies there\u0027s no actual reason to track `prev` anymore, as it doesn\u0027t factor into any of the tests in the loop. That gets us closer to the form where we could re-write it as a `for()` loop. We can also eliminate `recent_record_handle` by relying on `record` instead (the compiler will deal with the inefficiency through the optimiser, hopefully):\n\n```\npldm_pdr_record *record \u003d NULL;\npldm_pdr_record *curr;\n\nif (!repo) {\n    return NULL;\n}\n\nfor (curr \u003d repo-\u003efirst; curr; curr \u003d curr-\u003enext) {\n    if (first \u003e curr-\u003erecord_handle || last \u003c curr-\u003erecord_handle) {\n        continue;\n    }\n    if (!record || curr-\u003erecord_handle \u003e record-\u003erecord_handle) {\n        record \u003d curr;\n    }\n}\n\nreturn record;\n```",
      "revId": "c224494e5705ef1fdf835f2adb68742de257507e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}