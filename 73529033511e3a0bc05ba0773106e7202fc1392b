{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f7774eab_245237ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-06-05T05:41:37Z",
      "side": 1,
      "message": "Andrew, so any error handling APIs should go into src/dsp/\u003c....h\u003e file from now on?",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "933309bb_7b0021f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-06T03:20:29Z",
      "side": 1,
      "message": "Well, we need to be careful with that statement. The existence of the header is driven by me trying to sort out some error handling stuff, but the purpose of the header is not for error handling. Specifically:\n\nThe header is under `src/` and not `include/` so it\u0027s not part of the public API of the library. We need the functions declared in a header because they\u0027re used elsewhere in the libpldm implementation, but at the moment it\u0027s most sensible for their definitions to live in `src/dsp/base.c`. Further, because the function implementations in `src/dsp/base.c` are not annotated with one of the `LIBPLDM_ABI_*` macros they will never be visible to the dynamic linker. An internal header is the right place for the declarations.\n\nThe same goes for any other internal-only declarations we need. We should just drop a header under `src/` alongside the `.c` file where the things are defined, and go from there.\n\nDoes that make sense?",
      "parentUuid": "f7774eab_245237ee",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ea75d8e_797111b6",
        "filename": "src/api.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002058
      },
      "writtenOn": "2024-06-04T07:04:20Z",
      "side": 1,
      "message": "Is this here to guard against addition of other errno values in APIs without adding them here? If so, I feel like the 2 lines after it should be removed.",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5de8cec_d3bbce3c",
        "filename": "src/api.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-04T07:16:52Z",
      "side": 1,
      "message": "The concern with that is that they are not unreachable - libpldm is by default configured with `-Db_ndebug\u003dif-release`. That is, if you `meson setup --buildtype\u003drelease ...` then `-DNDEBUG` is added to `CFLAGS`.",
      "parentUuid": "2ea75d8e_797111b6",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34a55976_43c3c772",
        "filename": "src/api.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002058
      },
      "writtenOn": "2024-06-04T07:32:03Z",
      "side": 1,
      "message": "In this case it\u0027s fine as is.",
      "parentUuid": "f5de8cec_d3bbce3c",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2439067a_a706b73a",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1002058
      },
      "writtenOn": "2024-06-04T07:04:20Z",
      "side": 1,
      "message": "Should this (and unpack) be marked as stable/testing?",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d995e525_2da2a84f",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-04T07:16:52Z",
      "side": 1,
      "message": "I didn\u0027t yet provide an annotation as I didn\u0027t want to expose them to the dynamic linker at all - for now they\u0027re just for the internal link.\n\nI want to bikeshed the name for the new API a bit; my preference is `int pldm_pack_header()` and `int pldm_unpack_header()`, returning the negative errno. I was concerned that was too confusing, and I\u0027m half-wondering whether we can get away without them altogether, so punted it to later (as it\u0027s not urgent). I would like to deprecate `{un,}pack_pldm_header()` though (but again, can do that later).",
      "parentUuid": "2439067a_a706b73a",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b78ff860_0baa8e54",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1002058
      },
      "writtenOn": "2024-06-04T07:32:03Z",
      "side": 1,
      "message": "ACK",
      "parentUuid": "d995e525_2da2a84f",
      "revId": "73529033511e3a0bc05ba0773106e7202fc1392b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}