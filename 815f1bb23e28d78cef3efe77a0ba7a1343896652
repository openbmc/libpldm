{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "88470612_5097a62d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T04:39:05Z",
      "side": 1,
      "message": "Patchset 16 is just reordering functions in the header and source file to be in the same order.",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93447550_d1637c6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "A few remaining nitpicks :)",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0a54428_cbccb803",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "Where does this instance ID come from? There\u0027s no provision in `pldm_requester_send_msg()` to provide it or for it to be returned. Is that something we need to consider?",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 18
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ced80351_43a2ffa4",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "It\u0027s in the PLDM header of the PLDM messages. So the caller is responsible for making sure something sensible is in the header of the msg given to `pldm_requester_send_msg` and passed in here. Do you think this needs to be clearer?",
      "parentUuid": "a0a54428_cbccb803",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 18
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22195980_89309111",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-15T00:54:10Z",
      "side": 1,
      "message": "\u003e Do you think this needs to be clearer?\n\nI suspect we need to change it.\n\nLooking forward, I expect we\u0027re going to have to implement PLDM instance ID tagging in the kernel via specifying the `protocol` parameter to `socket(2)`. This means when we encode the message we will not know the ultimate value for the instance ID field until the message is sent via `sendto(2)`. As such, we need a way for the API to pass the value back out.\n\nI suspect what we should do is change the prototype of `pldm_requester_send_msg(...)` to:\n\n```\npldm_requester_rc_t pldm_requester_send_msg(struct pldm_requester *ctx,\n\t\t\t\t\t    pldm_tid_t tid,\n\t\t\t\t\t    uint8_t *instance_id,\n\t\t\t\t\t    const void *pldm_req_msg,\n\t\t\t\t\t    size_t req_msg_len)\n```\n\n`instance_id` is an `out` parameter only, not in. `instance_id` must not be `NULL`. if `instance_id` is `NULL` then we can return `PLDM_REQUESTER_INVALID_SETUP`. If the call is successful then the value pointed to by `instance_id` is the value of the instance ID the message was sent with.\n\nWith this definition we can maintain the current behaviour of externally requesting an instance ID from pldmd prior to encoding the message. For the implementation of `pldm_requester_send_msg()` we simply extract the encoded instance ID from the message and assign the value to `*instance_id`.\n\nWhen/if we move instance ID allocation into the kernel via `socket()`\u0027s `protocol` parameter we use the metadata returned by `sendto()` to populate `*instance_id`.\n\nThis feels like the API with the fewest sharp edges: We can continue to use `uint8_t` as the fundamental type for `*instance_id` as we don\u0027t need out-of-bounds values like `-1` to indicate a different behaviour, we don\u0027t need a `flags` parameter to control alternative behaviours, and `instance_id` never needs to be `NULL`.",
      "parentUuid": "ced80351_43a2ffa4",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 18
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee25aec1_5655a990",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 212,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-15T06:29:19Z",
      "side": 1,
      "message": "Why do we need to have PLDM instance ID tagging in the kernel? How about instance id expiration? will that be handled also by the kernel. \n\nI think we will need more clarity on all the aspects of the PLDM requester behavior (what is handled in the userspace vs kernel). Instance ID management is currently done in the userspace. https://github.com/openbmc/pldm/blob/master/requester/handler.hpp\n\nSeeing the scope of the changes in the patch, it seems we are missing on a design document.",
      "parentUuid": "22195980_89309111",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 212,
        "endChar": 18
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d665b7a_9d3e4a9a",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 247,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "Missing indent?",
      "range": {
        "startLine": 246,
        "startChar": 11,
        "endLine": 247,
        "endChar": 24
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e282681e_499441c6",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 247,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d665b7a_9d3e4a9a",
      "range": {
        "startLine": 246,
        "startChar": 11,
        "endLine": 247,
        "endChar": 24
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c908aeb4_c3611147",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 280,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "Missing indent?",
      "range": {
        "startLine": 279,
        "startChar": 11,
        "endLine": 280,
        "endChar": 74
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d18e139_95ccb06b",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 16
      },
      "lineNbr": 280,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c908aeb4_c3611147",
      "range": {
        "startLine": 279,
        "startChar": 11,
        "endLine": 280,
        "endChar": 74
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc3b1b0c_59778c72",
        "filename": "src/requester/meson.build",
        "patchSetId": 16
      },
      "lineNbr": 3,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "Let\u0027s instead add a meson file in the transport directory and append `mctp-demux.c` there. Will need to add `subdir(\u0027transport\u0027)` to `src/meson.build`.",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5920d3a_9ba8a5ed",
        "filename": "src/requester/meson.build",
        "patchSetId": 16
      },
      "lineNbr": 3,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc3b1b0c_59778c72",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32c74145_3d375316",
        "filename": "src/requester/pldm.c",
        "patchSetId": 16
      },
      "lineNbr": 72,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "Given we\u0027re no-longer even looking at `.revents` in `pldm_requester_poll()` I think we can drop this, they\u0027re dead stores and are meaningless.",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 72,
        "endChar": 2
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82330a4b_2e684a8d",
        "filename": "src/requester/pldm.c",
        "patchSetId": 16
      },
      "lineNbr": 72,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32c74145_3d375316",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 72,
        "endChar": 2
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e597ee7f_537f9ae6",
        "filename": "src/requester/pldm.c",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "nit: Add another newline here to help with visual separation to the function prototype below.",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd5eb422_6f75a753",
        "filename": "src/requester/pldm.c",
        "patchSetId": 16
      },
      "lineNbr": 76,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e597ee7f_537f9ae6",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a2e3dad_56814c70",
        "filename": "src/transport/container_of.h",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "Do we squash the prior patch into this one? If not we should fix this move there rather than in this patch.\n\nIMO this is trivial enough to just squash in.",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b172785_a8ba8b28",
        "filename": "src/transport/container_of.h",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4a2e3dad_56814c70",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2103168b_b831e3d5",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 16
      },
      "lineNbr": 191,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:41:23Z",
      "side": 1,
      "message": "void",
      "range": {
        "startLine": 191,
        "startChar": 64,
        "endLine": 191,
        "endChar": 66
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bd6c7fc_0c9cdc92",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 16
      },
      "lineNbr": 191,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2103168b_b831e3d5",
      "range": {
        "startLine": 191,
        "startChar": 64,
        "endLine": 191,
        "endChar": 66
      },
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d524b5f0_962fdbe1",
        "filename": "src/transport/transport_internal.h",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-14T05:19:47Z",
      "side": 1,
      "message": "How about we place this at `src/transport.h`? Any header in `src/` is internal by definition and so I think we can drop that part of the path and include guard symbol name.",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2783621c_0584d6e4",
        "filename": "src/transport/transport_internal.h",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-14T07:36:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d524b5f0_962fdbe1",
      "revId": "815f1bb23e28d78cef3efe77a0ba7a1343896652",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}