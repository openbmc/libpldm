{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0afc5148_e0a0ce25",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "Try to avoid \"this commit\" - hopefully the message is about the commit it\u0027s written in ðŸ˜Š\n\nThis can instead be:\n\n\u003e Add `pldm_msgbuf_extract_uint8_to_size()`",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 16
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d8fb16c_4201e84a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T04:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0afc5148_e0a0ce25",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 16
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9337934_8936c1af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "Hi Chau, thanks for taking this up. I have a few requests inline.",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9823e866_bb2723f5",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "Please let\u0027s avoid unrelated whitespace changes.",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26e634ee_0c236596",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T04:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9823e866_bb2723f5",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca84d8ff_f187dfee",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1359,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "Can you please put this code above the C++ typecheck functions on line 1294",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c75e6985_834eacff",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1359,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T04:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca84d8ff_f187dfee",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3026d602_f9eaed65",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "For consistency I think it would be nice to add the macro wrapper to take the address of `dst` and rename this function to `pldm__msgbuf_extract_uint8_to_size` (double-underscore)",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21033a21_a30110c8",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1370,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-25T09:25:29Z",
      "side": 1,
      "message": "But `dst` will always be of `size_t` type, so caller has to specify the necessary function name to specify the extract type. What else should the wrapper do? typecheck for size_t?",
      "parentUuid": "3026d602_f9eaed65",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "977c1866_6457ec80",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T23:17:38Z",
      "side": 1,
      "message": "Yes, take the address, and do a typecheck for `size_t`. I\u0027d like the behaviour match the existing `_extract()` macros. Otherwise we should call it `pldm_msgbuf_extract_uint8_to_size_p()` (`p` for \"pointer\"). I\u0027d rather not do the latter.",
      "parentUuid": "21033a21_a30110c8",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ea18e22_b20aa32e",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1370,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T04:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "977c1866_6457ec80",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84535728_50b5520e",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "This can just be `pldm_msgbuf_extract()` - the type is defined by `value` and the call will be correctly dispatched thanks to the `_Generic()` macro.",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69d3eb32_d8f63666",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-25T09:23:06Z",
      "side": 1,
      "message": "When these functions use `pldm_msgbuf_extract()`, it fails with the below msg unless I put them inside #ifndef __cplusplus. I think something is wrong.\n\n\u003e error: â€˜_Genericâ€™ was not declared in this scope",
      "parentUuid": "84535728_50b5520e",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "732ceee1_f9c6eaca",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T23:17:38Z",
      "side": 1,
      "message": "`_Generic` is not specified by C++. If you\u0027re hitting that error you\u0027re trying to compile the translation unit including the header with a C++ compiler. That should never happen in the library implementation as it\u0027s all C, and for the tests, you should be testing these APIs in `tests/msgbuf_generic.c` (for this reason).",
      "parentUuid": "69d3eb32_d8f63666",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87e2fa3c_4483ebab",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T03:20:13Z",
      "side": 1,
      "message": "```\n LIBPLDM_CC_ALWAYS_INLINE int\n pldm__msgbuf_extract_uint8_to_size(struct pldm_msgbuf *ctx, size_t *dst)\n {\n\t uint8_t value;\n\t int rc;\n \n\t if (!dst) {\n\t\t return -EINVAL;\n\t }\n \n\t rc \u003d pldm_msgbuf_extract(ctx, value);\n\t if (rc) {\n\t\t return rc;\n\t }\n \n\t static_assert(SIZE_MAX \u003e\u003d UINT8_MAX, \"Invalid promotion\");\n \n\t *dst \u003d value;\n\t return 0;\n }\n \n#define pldm_msgbuf_extract_uint8_to_size(ctx, dst) \\\n\tpldm_msgbuf_extract_typecheck(size_t, pldm__msgbuf_extract_uint8_to_size, dst, ctx, \u0026(dst))\n```\n\nWith the above code added to msgbuf.hs at line 1294, when the test/*.cpp files include this msgbuf.h, the `pldm_msgbuf_extract()` line will be expanded and _Generic exposed. That\u0027s why it fails with the error unless I put it inside #ifndef __cplusplus, or make it a macro function.",
      "parentUuid": "732ceee1_f9c6eaca",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b2a007b_82ebba47",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-26T03:22:28Z",
      "side": 1,
      "message": "Ugh, yeah, okay. Obviously I didn\u0027t think that through enough! Sorry for the detour, leave it as you have it, though maybe add a comment about it so the question is answered for anyone wondering the same.",
      "parentUuid": "87e2fa3c_4483ebab",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b295622_37b53e9b",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T03:31:15Z",
      "side": 1,
      "message": "Would you prefer putting them inside #ifndef __cplusplus? Otherwise, it has to be placed at the end to be able to use the c++ `pldm_msgbuf_typecheck_*` APIs, contradicting to your [comment](https://gerrit.openbmc.org/c/openbmc/libpldm/+/79130/comment/ca84d8ff_f187dfee/), as it will be built in the .cpp test files.",
      "parentUuid": "4b2a007b_82ebba47",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b39d1c2_46cac127",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-26T03:36:52Z",
      "side": 1,
      "message": "No, please let\u0027s avoid more `#ifdef`ery where we can. Just use the typed function name as you have in the existing code.\n\nBut perhaps we can drop the typecheck from the macros I suggested. They\u0027re only required for unaligned stores. I\u0027m not yet aware of cases where we need that. Just define them to take the address of the `size_t` parameter\n\n```c\n#define pldm_msgbuf_extract_uint8_to_size(ctx, dst) \\\n    pldm__msgbuf_extract_uint8_to_size(ctx, \u0026(dst))\nLIBPLDM_CC_ALWAYS_INLINE int\npldm__msgbuf_extract_uint8_to_size(struct pldm_msgbuf *ctx, size_t *dst)\n{\n...\n}\n```",
      "parentUuid": "4b295622_37b53e9b",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd1038b7_fc1e6bbb",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1379,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T04:23:58Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9b39d1c2_46cac127",
      "range": {
        "startLine": 1379,
        "startChar": 6,
        "endLine": 1379,
        "endChar": 31
      },
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2c27e8e_15c30b9e",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1384,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-25T00:53:42Z",
      "side": 1,
      "message": "Above this line, can you add:\n\n```\nstatic_assert(SIZE_MAX \u003e\u003d UINT8_MAX, \"Invalid promotion\");\n```\n\nAnd similarly for the other implementations",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "302ef0d4_d7651e66",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 1384,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-26T04:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2c27e8e_15c30b9e",
      "revId": "3c6296adfba0cf1045b94dc27ecb5e5382254e47",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}