{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "75674e20_00ffa5ec",
        "filename": "include/libpldm/base.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-09-13T05:33:21Z",
      "side": 1,
      "message": "may be use \n\n```\n#define PLDM_MSG_SIZE(size) \\\n    (offsetof(struct pldm_msg, payload) + (size))\n\n``` \ninstead ? seems much more safer ?",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 177,
        "endChar": 73
      },
      "revId": "324ff8455623dbfa9519cb236f2f638f03bbff79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a3a272_b37ab5bb",
        "filename": "include/libpldm/base.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-16T05:11:39Z",
      "side": 1,
      "message": "Can you unpack why you think it\u0027s safer? From C17 the definition of `sizeof` states (6.5.3.4):\n\n\u003e The sizeof operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. The size is determined from the type of the operand. The result is an integer. If the type of the operand is a variable length array type, the operand is evaluated; otherwise, the operand is not evaluated and the result is an integer constant.\n\nWe don\u0027t have a variable length array, so the operand is not evaluated, which means the fact that we use `NULL` here as the pointer value is not relevant.\n\n\"Take the size, remove the sketchy bit, then add on the variable bit\" is more intuitive to me than \"the offset of this member represents the size of the struct, now add the variable bit\".",
      "parentUuid": "75674e20_00ffa5ec",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 177,
        "endChar": 73
      },
      "revId": "324ff8455623dbfa9519cb236f2f638f03bbff79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f409f5a7_9e561c8f",
        "filename": "include/libpldm/base.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-09-17T00:54:07Z",
      "side": 1,
      "message": "well, the existing code is not really unsafe, when i meant safer, its just the use of `((struct pldm_msg *)NULL)-\u003epayload` may raise concern for people unfamiliar with this pattern even though it\u0027s safe in this context because the sizeof() operator does not evaluate its operand (it just determines the size at compile time). However, i felt that this pattern is somewhat obscure and might be better replaced with something more intuitive :) , but i am okay if you wanna leave it as-is since you think it otherwise.",
      "parentUuid": "a2a3a272_b37ab5bb",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 177,
        "endChar": 73
      },
      "revId": "324ff8455623dbfa9519cb236f2f638f03bbff79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4e47b4a_bdd44ca6",
        "filename": "include/libpldm/base.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-09-13T05:33:21Z",
      "side": 1,
      "message": "may be change this to\n\n```\n#define PLDM_MSG_BUFFER(name, size) \\\n    alignas(struct pldm_msg) unsigned char name[PLDM_MSG_SIZE(size)]\n```\nits a little more intuitive ?",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 179,
        "endChar": 66
      },
      "revId": "324ff8455623dbfa9519cb236f2f638f03bbff79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02854439_c7c943f5",
        "filename": "include/libpldm/base.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-16T05:11:39Z",
      "side": 1,
      "message": "The parentheses are needed to handle name as an expression. The unintuitive whitespace shenanigans are the result of clang-format.",
      "parentUuid": "d4e47b4a_bdd44ca6",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 179,
        "endChar": 66
      },
      "revId": "324ff8455623dbfa9519cb236f2f638f03bbff79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "105b25c9_a76114a5",
        "filename": "include/libpldm/base.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-09-17T00:54:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "02854439_c7c943f5",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 179,
        "endChar": 66
      },
      "revId": "324ff8455623dbfa9519cb236f2f638f03bbff79",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}