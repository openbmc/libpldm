{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4a236b6d_cdf673ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "Hi Roger, thanks for the rework. I\u0027ve made some comments, though I haven\u0027t yet got to the test cases.",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16ed567b_f80736b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-12T08:47:05Z",
      "side": 1,
      "message": "Hi Roger, I have some nit comments",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edfb62bc_6995d677",
        "filename": "CHANGELOG.md",
        "patchSetId": 16
      },
      "lineNbr": 86,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "This needs to be moved up to the `[Unreleased]` section above ðŸ˜Š",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6b53b32_6eafd347",
        "filename": "CHANGELOG.md",
        "patchSetId": 16
      },
      "lineNbr": 86,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edfb62bc_6995d677",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89c9a89_2a4529c2",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2500,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-12T08:47:05Z",
      "side": 1,
      "message": "if(!msg)",
      "range": {
        "startLine": 2500,
        "startChar": 1,
        "endLine": 2500,
        "endChar": 19
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff050ff8_f455b274",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2500,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b89c9a89_2a4529c2",
      "range": {
        "startLine": 2500,
        "startChar": 1,
        "endLine": 2500,
        "endChar": 19
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f73928c_430717ab",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2514,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "I think we can reduce this to:\n\n```c\nreturn pldm_pack_header_errno(...);\n```\n\nSince this leaves `payload_length` unused, you can mark it `LIBPLDM_CC_UNUSED`.",
      "range": {
        "startLine": 2504,
        "startChar": 1,
        "endLine": 2514,
        "endChar": 34
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b47b0db_7394749c",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2514,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2f73928c_430717ab",
      "range": {
        "startLine": 2504,
        "startChar": 1,
        "endLine": 2514,
        "endChar": 34
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "660f7cae_19fd525c",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2521,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "Given the message isn\u0027t fixed-length, we should make this an in-out pointer ...",
      "range": {
        "startLine": 2521,
        "startChar": 23,
        "endLine": 2521,
        "endChar": 44
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3a9bab9_7b233ebe",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2521,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "660f7cae_19fd525c",
      "range": {
        "startLine": 2521,
        "startChar": 23,
        "endLine": 2521,
        "endChar": 44
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2b75dd8_4095276e",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2525,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-12T08:47:05Z",
      "side": 1,
      "message": "we could write this as - `if(!msg || !event_receiver_info)`",
      "range": {
        "startLine": 2525,
        "startChar": 1,
        "endLine": 2525,
        "endChar": 50
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9bb2b71_a9420b4a",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2525,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2b75dd8_4095276e",
      "range": {
        "startLine": 2525,
        "startChar": 1,
        "endLine": 2525,
        "endChar": 50
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad63f723_65422812",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2562,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "So part of the trick of the `msgbuf` APIs is that they can handle errors in aggregate. We can reduce this to:\n\n```c\npldm_msgbuf_insert(buf, event_receiver_info-\u003ecompletion_code);\npldm_msgbuf_insert(buf, event_receiver_info-\u003etransport_protocol_type);\npldm_msgbuf_insert(buf, event_receiver_info-\u003eevent_receiver_address.mctp_eid);\nreturn pldm_msgbuf_complete(buf);\n```",
      "range": {
        "startLine": 2545,
        "startChar": 1,
        "endLine": 2562,
        "endChar": 43
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "269d42d4_198824dc",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2562,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "Note that we don\u0027t want to require that the caller supply us an exactly-sized buffer - this makes the APIs tricky to use in cases where messages are variable length. Instead, for `encode_*()` functions, we should use:\n\n```\nreturn pldm_msgbuf_complete_used(buf, *payload_length, payload_length);\n```\n\nThis ensures the supplied buffer was at least big enough, but doesn\u0027t care if it was bigger than required, and provides the length consumed back to the caller.",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1bd4f20_af950022",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2562,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ad63f723_65422812",
      "range": {
        "startLine": 2545,
        "startChar": 1,
        "endLine": 2562,
        "endChar": 43
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c409b20_89e2bbd3",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2562,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "269d42d4_198824dc",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a093519a_e90814c3",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2572,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-12T08:47:05Z",
      "side": 1,
      "message": "if(!msg)",
      "range": {
        "startLine": 2572,
        "startChar": 1,
        "endLine": 2572,
        "endChar": 19
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b171ed22_fd782ab0",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2572,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a093519a_e90814c3",
      "range": {
        "startLine": 2572,
        "startChar": 1,
        "endLine": 2572,
        "endChar": 19
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77f05498_15f448fd",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2581,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "So the `*_p()` APIs exist to deal with legacy public APIs that deconstruct message members into a bunch of pointer parameters to the decode function. We don\u0027t have that concern here as you\u0027re passing through a `struct pldm_get_event_receiver_resp *`.\n\nYou can change these to e.g the following, throughout:\n\n```\npldm_msgbuf_extract(buf, resp-\u003ecompletion_code);\n```\n\nNote that in this specific case of extracting the completion code, if the completion code isn\u0027t success, then it\u0027s likely that there\u0027s no following content in the message. You can use `pldm_msg_has_error()` like so, prior to initialising the msgbuf:\n\n```\nrc \u003d pldm_msg_has_error(msg, payload_length);\nif (rc) {\n\tresp-\u003ecompletion_code \u003d rc;\n\treturn 0;\n}\n\nrc \u003d pldm_msgbuf_init_errno(...)\n```",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cee07a21_ce233040",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2581,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77f05498_15f448fd",
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b529c267_247f64ab",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2590,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "We can\u0027t do this unless we know it is actually an MCTP EID that\u0027s in the message. You need to do this extraction conditionally:\n\n```\nrc \u003d pldm_msgbuf_exract(buf, resp-\u003etransport_protocol_type);\nif (rc) {\n    return pldm_msgbuf_discard(buf, rc);\n}\nif (resp-\u003etransport_protocol_type \u003d\u003d PLDM_TRANSPORT_PROTOCOL_TYPE_MCTP) {\n    pldm_msgbuf_extract(buf, resp-\u003eevent_receiver_addres.mctp_eid);\n} else {\n    return pldm_msgbuf_discard(buf, -ENOTSUP);\n}\n\nreturn pldm_msgbuf_complete_consumed(buf);\n```",
      "range": {
        "startLine": 2590,
        "startChar": 1,
        "endLine": 2590,
        "endChar": 73
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b05ab78_d58a2239",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2590,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b529c267_247f64ab",
      "range": {
        "startLine": 2590,
        "startChar": 1,
        "endLine": 2590,
        "endChar": 73
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d531d61a_e25e6a11",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2597,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-08T07:06:38Z",
      "side": 1,
      "message": "Please no casting like this - it\u0027s what\u0027s causing the problems you noted in the comment thread in the header\n\nRather, you\u0027ve already extracted the value into `resp-\u003etransport_protocol_type`, so we can do:\n\n```\nif (resp-\u003etransport_protocol_type !\u003d PLDM_TRANSPORT_PROTOCOL_TYPE_MCTP) {\n    return pldm_msgbuf_discard(buf, -ENOTOSUP);\n```",
      "range": {
        "startLine": 2594,
        "startChar": 1,
        "endLine": 2597,
        "endChar": 41
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38035a92_dd1c9450",
        "filename": "src/dsp/platform.c",
        "patchSetId": 16
      },
      "lineNbr": 2597,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d531d61a_e25e6a11",
      "range": {
        "startLine": 2594,
        "startChar": 1,
        "endLine": 2597,
        "endChar": 41
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c61974a_edc50e65",
        "filename": "tests/dsp/platform.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-12T08:47:05Z",
      "side": 1,
      "message": "Can we use the placement new operator?\nsame to the entire file",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 66
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e6a4274_99fc22bf",
        "filename": "tests/dsp/platform.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2c61974a_edc50e65",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 66
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5ebda23_2f844eec",
        "filename": "tests/dsp/platform.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3607,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-12T08:47:05Z",
      "side": 1,
      "message": "can we use placement new",
      "range": {
        "startLine": 3607,
        "startChar": 4,
        "endLine": 3607,
        "endChar": 68
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c193627_b5e18921",
        "filename": "tests/dsp/platform.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3607,
      "author": {
        "id": 1002071
      },
      "writtenOn": "2025-05-27T13:37:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d5ebda23_2f844eec",
      "range": {
        "startLine": 3607,
        "startChar": 4,
        "endLine": 3607,
        "endChar": 68
      },
      "revId": "98dfed0d9285e48df529807ecf4574c8a5710288",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}