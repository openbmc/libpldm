{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fd3f0661_005265f9",
        "filename": "src/pdr.c",
        "patchSetId": 1
      },
      "lineNbr": 1220,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-09T02:55:14Z",
      "side": 1,
      "message": "Generally, you must not use `assert()` to manage conditions that can be created by the caller. `assert()` must only be used to test _invariants that are properties of the implementation_.\n\nConsider that libpldm may be integrated into host firmware, which runs freestanding and underneath the OS. If an `assert()` is executed that brings down the entire machine. That\u0027s undesirable, hence it\u0027s usually the case we propagate an error instead. This allows the caller to make a choice about how to handle the error (that may still be to bring down the machine, but at least the caller owns that choice).\n\nYou can only use `assert()` if the doxygen documentation for the function lists non-NULL as a precondition for these functions. The doxygen documentation currently does not list any preconditions.\n\nWhat motivated you to make this change? What error occurred in practice? Please provide more context in the commit message.\n\nAt the very least, if we are to do this, this requires an update to document the precondition in the doxygen and an addition to the changelog, OR, defining a second function with a different symbol name that returns an error if the argument values are invalid and deprecate this one.\n\nNote that libpldm is configured by default with `b_ndebug\u003dif-release`:\n\nhttps://github.com/openbmc/libpldm/blob/5664cf20d414ceeefa2569462c7278077bbb7c49/meson.build#L9\n\nThis means that all `assert()` invocations _are removed_ from the resulting binary. Any invariants they were testing are _required_ to be upheld else the execution yields undefined behaviour.",
      "revId": "5e54fbacb1c021cd1081c46956b1ac9d182c27e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "597d4595_58bb9f0d",
        "filename": "src/pdr.c",
        "patchSetId": 1
      },
      "lineNbr": 1220,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2023-11-09T03:18:00Z",
      "side": 1,
      "message": "\u003e Generally, you must not use `assert()` to manage conditions that can be created by the caller. `assert()` must only be used to test _invariants that are properties of the implementation_.\n\u003e \n\u003e Consider that libpldm may be integrated into host firmware, which runs freestanding and underneath the OS. If an `assert()` is executed that brings down the entire machine. That\u0027s undesirable, hence it\u0027s usually the case we propagate an error instead. This allows the caller to make a choice about how to handle the error (that may still be to bring down the machine, but at least the caller owns that choice).\n\u003e \n\u003e You can only use `assert()` if the doxygen documentation for the function lists non-NULL as a precondition for these functions. The doxygen documentation currently does not list any preconditions.\n\u003e \n\u003e What motivated you to make this change? What error occurred in practice? Please provide more context in the commit message.\n\nThanks arj.\nBecause in our internal testing, when calling the this method in pldm, due to some errors, a null value was passed in, causing coredump.\nAccording to your suggestion, for this situation, I want to confirm with you that we should use assert for forward verification? Or should we judge whether the parameter is NULL and return it directly?\n\n\u003e \n\u003e At the very least, if we are to do this, this requires an update to document the precondition in the doxygen and an addition to the changelog, OR, defining a second function with a different symbol name that returns an error if the argument values are invalid and deprecate this one.\n\nSorry, I am not familiar with API/ABI.\n\n\u003e \n\u003e Note that libpldm is configured by default with `b_ndebug\u003dif-release`:\n\u003e \n\u003e https://github.com/openbmc/libpldm/blob/5664cf20d414ceeefa2569462c7278077bbb7c49/meson.build#L9\n\u003e \n\u003e This means that all `assert()` invocations _are removed_ from the resulting binary. Any invariants they were testing are _required_ to be upheld else the execution yields undefined behaviour.",
      "parentUuid": "fd3f0661_005265f9",
      "revId": "5e54fbacb1c021cd1081c46956b1ac9d182c27e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9070874_e9bac3be",
        "filename": "src/pdr.c",
        "patchSetId": 1
      },
      "lineNbr": 1220,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-09T03:25:43Z",
      "side": 1,
      "message": "\u003e Because in our internal testing, when calling the this method in pldm, due to some errors, a null value was passed in, causing coredump.\n\nUse of `assert()` doesn\u0027t help with not crashing. It may help you identify problems earlier, but only in debug builds. Release builds of the library _remove assert() from the compiled binary_.\n\n\u003e According to your suggestion, for this situation, I want to confirm with you that we should use assert for forward verification?\n\nBluntly: You must not use `assert()`.\n\nLess bluntly, please re-read this:\n\n\u003e You can only use `assert()` if the doxygen documentation for the function lists non-NULL as a precondition for these parameters. The doxygen documentation currently does not list any preconditions.\n\nand this:\n\n\u003e At the very least, if we are to do this, this requires an update to document the non-NULL precondition in the doxygen and an addition to the changelog\n\n\u003e Sorry, I am not familiar with API/ABI.\n\nI\u0027m not sure what you mean by this. The current function prototype returns void, allowing no mechanism for informing the caller of a problem. We can\u0027t change the prototype because the function is tracked in our ABI definition (marked stable), but we can provide an alternative one that has better behaviour.",
      "parentUuid": "597d4595_58bb9f0d",
      "revId": "5e54fbacb1c021cd1081c46956b1ac9d182c27e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2d7d172_e4ad0dd5",
        "filename": "src/pdr.c",
        "patchSetId": 1
      },
      "lineNbr": 1220,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2023-11-09T03:41:35Z",
      "side": 1,
      "message": "\u003e \u003e Because in our internal testing, when calling the this method in pldm, due to some errors, a null value was passed in, causing coredump.\n\u003e \n\u003e Use of `assert()` doesn\u0027t help with not crashing. It may help you identify problems earlier, but only in debug builds. Release builds of the library _remove assert() from the compiled binary_.\n\u003e \n\u003e \u003e According to your suggestion, for this situation, I want to confirm with you that we should use assert for forward verification?\n\u003e \n\u003e Bluntly: You must not use `assert()`.\n\u003e \n\u003e Less bluntly, please re-read this:\n\u003e \n\u003e \u003e You can only use `assert()` if the doxygen documentation for the function lists non-NULL as a precondition for these parameters. The doxygen documentation currently does not list any preconditions.\n\u003e \n\u003e and this:\n\u003e \n\u003e \u003e At the very least, if we are to do this, this requires an update to document the non-NULL precondition in the doxygen and an addition to the changelog\n\nGot it.\nSo you mean change to `if (org_tree \u003d\u003d NULL || new_tree \u003d\u003d NULL) {return;}`, or abandon this submission?\n\n\u003e \n\u003e \u003e Sorry, I am not familiar with API/ABI.\n\u003e \n\u003e I\u0027m not sure what you mean by this. The current function prototype returns void, allowing no mechanism for informing the caller of a problem. We can\u0027t change the prototype because the function is tracked in our ABI definition (marked stable), but we can provide an alternative one that has better behaviour.",
      "parentUuid": "e9070874_e9bac3be",
      "revId": "5e54fbacb1c021cd1081c46956b1ac9d182c27e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbab5935_6e7ed739",
        "filename": "src/pdr.c",
        "patchSetId": 1
      },
      "lineNbr": 1220,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-11-09T04:09:23Z",
      "side": 1,
      "message": "\u003e So you mean change to if (org_tree \u003d\u003d NULL || new_tree \u003d\u003d NULL) {return;}, or abandon this submission?\n\nYou can\u0027t do that either, because then the function is explicitly not doing what is documented and isn\u0027t reporting that it didn\u0027t do anything. It\u0027s just not crashing. It\u0027s still incorrect behaviour, it\u0027s just more subtle.\n\n\u003e At the very least, if we are to do this, this requires an update to document the non-NULL precondition in the doxygen and an addition to the changelog\n\nI\u0027m saying you can add the `assert()`s _if you change the doxygen comment in the header to specify it\u0027s a precondition of calling the function that the arguments point to valid objects_.\n\nHere\u0027s the doxygen documentation for the function which will need to be modified:\n\nhttps://github.com/openbmc/libpldm/blob/main/include/libpldm/pdr.h#L549-L553\n\nHere\u0027s a different function that documents some non-NULL pre-conditions that you could use as a reference:\n\nhttps://github.com/openbmc/libpldm/blob/main/include/libpldm/pdr.h#L85-L86\n\nIf you do the same in the documentation for `pldm_entity_association_tree_copy_root()` then you can keep the `asserts()` that you have in this patch, but you _must also_ update `CHANGELOG.md` to highlight your change.\n\nAnd again, the `assert()`s won\u0027t actually do anything in a release builds of libpldm because they are _deleted by the compiler_. So your firmware image builds will likely have just as much undefined behaviour as they did previously.",
      "parentUuid": "d2d7d172_e4ad0dd5",
      "revId": "5e54fbacb1c021cd1081c46956b1ac9d182c27e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}