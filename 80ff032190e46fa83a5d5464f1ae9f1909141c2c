{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1d007e19_d5227112",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "Unfortunately I have many of the same concerns as I did on PS7.\n\nPlease discuss the comments if you\u0027re unsure and avoid proceeding with changes until we have consensus on direction in each case.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27606762_46d8b445",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-28T15:50:55Z",
      "side": 1,
      "message": "@arj We discussed the concerns you had and following are possible solutions -\n\n1. Replace assert for error handling - I will change the return type of this API as int instead of uint32 so that we can return error cases . Record handle will be added as an in-out parameter for the API. We will also modify the calling function in PLDM to handle the errors correctly.\n\n2. event_data_op should be of enum type and not uint8* - We have found a way to not include this parameter as an input in this API. It will be modified in the calling function inside PLDM itself. So we dont need to address this concern at all.\n\n3. Msgbuf - I will include a generic case for the function pldm_msgbuf_extract that handles pldm_entity data type. This will allow me to use msgbuf to extract the contents of PDR. This will be a separate commit on top of this commit.\n\nPlease let me know if you have any further concerns on above suggestions. As mentioned by you,  I will add the changes to the commit after we agree on solutions for all concerns.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec2ea67d_d0859367",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1368,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "No. You must not use assert for error handling. `malloc()` can fail and return `NULL` in contexts that are not Linux, for instance hostboot and skiboot. You must handle these gracefully by returning an error to the caller.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ab47a13_966aa4d0",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1442,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "All of this should be implemented in terms of the `msgbuf` APIs.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b7cf699_301d1baa",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "The return type must accommodate the possibility of errors.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df48fa0d_977ce146",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1474,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "No. You must not handle errors using `assert()`. You need to return the error to the caller.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14b16f81_a6e23ba5",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "Again, I think much of this should be implemented with `msgbuf`.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba1fbea0_dea5bde8",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1524,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "The return type must accommodate the possibility of errors, and error conditions must be returned to the caller.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e633d83_a96ea7f8",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:58:02Z",
      "side": 1,
      "message": "typo , will be corrected",
      "range": {
        "startLine": 1566,
        "startChar": 16,
        "endLine": 1566,
        "endChar": 21
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}