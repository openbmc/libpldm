{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "90ff64fa_e8d09b91",
        "filename": "/COMMIT_MSG",
        "patchSetId": 20
      },
      "lineNbr": 21,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "could you please wrap this to 72 characters ? this seems like its wrapped to even less than 50 characters in some lines.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 21,
        "endChar": 23
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82d60e39_2212ef52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 20
      },
      "lineNbr": 21,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90ff64fa_e8d09b91",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 21,
        "endChar": 23
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d007e19_d5227112",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "Unfortunately I have many of the same concerns as I did on PS7.\n\nPlease discuss the comments if you\u0027re unsure and avoid proceeding with changes until we have consensus on direction in each case.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27606762_46d8b445",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-28T15:50:55Z",
      "side": 1,
      "message": "@arj We discussed the concerns you had and following are possible solutions -\n\n1. Replace assert for error handling - I will change the return type of this API as int instead of uint32 so that we can return error cases . Record handle will be added as an in-out parameter for the API. We will also modify the calling function in PLDM to handle the errors correctly.\n\n2. event_data_op should be of enum type and not uint8* - We have found a way to not include this parameter as an input in this API. It will be modified in the calling function inside PLDM itself. So we dont need to address this concern at all.\n\n3. Msgbuf - I will include a generic case for the function pldm_msgbuf_extract that handles pldm_entity data type. This will allow me to use msgbuf to extract the contents of PDR. This will be a separate commit on top of this commit.\n\nPlease let me know if you have any further concerns on above suggestions. As mentioned by you,  I will add the changes to the commit after we agree on solutions for all concerns.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecce02fd_2ce633ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-28T15:51:52Z",
      "side": 1,
      "message": "This was marked resolved by mistake",
      "parentUuid": "27606762_46d8b445",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29e9bee5_de980fc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "\u003e Replace assert for error handling - I will change the return type of this API as \u003e int instead of uint32 so that we can return error cases . Record handle will be\n\u003e added as an in-out parameter for the API. We will also modify the calling \n\u003e function in PLDM to handle the errors correctly.\n\nsounds like this could work.\n\n\u003e event_data_op should be of enum type and not uint8* - We have found a way to not \u003e include this parameter as an input in this API. It will be modified in the              \u003e calling function inside PLDM itself. So we dont need to address this concern at  \u003e all.\n\n\u003e Msgbuf - I will include a generic case for the function pldm_msgbuf_extract that \u003e handles pldm_entity data type. This will allow me to use msgbuf to extract the      \u003e contents of PDR. This will be a separate commit on top of this commit.\n\nShouldn\u0027t this be below this commit and shouldn\u0027t your commit be using that infrastructure ?",
      "parentUuid": "ecce02fd_2ce633ff",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ca317e7_3b27459b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-03T05:12:27Z",
      "side": 1,
      "message": "@manoj\n\nyes we dont need to address the concern on event_data_op from @arj at all if we follow the suggestion.\nyes msgbuf generic case for pldm_entity data type commit should be below this commit.",
      "parentUuid": "29e9bee5_de980fc6",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c587e4_b377404e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-03T06:21:22Z",
      "side": 1,
      "message": "Sorry, I lost track of this change somewhere.\n\n\u003e Replace assert for error handling - I will change the return type of this API as int instead of uint32 so that we can return error cases . Record handle will be added as an in-out parameter for the API. We will also modify the calling function in PLDM to handle the errors correctly.\n\nOkay, thanks. That sounds like a good way forward.\n\n\u003e event_data_op should be of enum type and not uint8* - We have found a way to not include this parameter as an input in this API. It will be modified in the calling function inside PLDM itself. So we dont need to address this concern at all.\n\nOkay. I guess I\u0027ll wait and see how that turns out ðŸ˜Š\n\n\u003e Msgbuf - I will include a generic case for the function pldm_msgbuf_extract that handles pldm_entity data type. This will allow me to use msgbuf to extract the contents of PDR. This will be a separate commit on top of this commit.\n\nI\u0027m not following what you\u0027re proposing here. I haven\u0027t yet seen a need to _add_ to the `msgbuf` API behaviours - the point was you should implement the PDR manipulation in terms of what it already supports. Adding _any_ behaviour to `msgbuf` is something that needs to be done with a lot of care, precisely because it provides the abstractions that make parsing and packing buffers safe.",
      "parentUuid": "7ca317e7_3b27459b",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85863caa_574ac3b1",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 40,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "could this be split into another commit with its own unit test ?",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 40,
        "endChar": 1
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b98e00c9_f4a03035",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 40,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-16T06:49:47Z",
      "side": 1,
      "message": "yes we can but this is a static function also it is defined in platform.c . I cannot call that function so I added it in pdr.c as well. This was a requirement from @arj saying we need to validate the headers. Do we need to convert it into a non static function and add its own unit test ?\n\nTEST(HeaderValidate, testPdrHdrValidate)\n{\n    struct pldm_msgbuf _ctx;\n    struct pldm_msgbuf* ctx \u003d \u0026_ctx;\n\n    ASSERT_EQ(pldm_platform_pdr_hdr_validate(ctx, 0, 0),\n              PLDM_ERROR_INVALID_LENGTH);\n    ASSERT_EQ(pldm_platform_pdr_hdr_validate(ctx, 10, 0),\n              PLDM_ERROR_INVALID_LENGTH);\n    ASSERT_EQ(pldm_platform_pdr_hdr_validate(ctx, 0, 10), PLDM_SUCCESS);\n}",
      "parentUuid": "85863caa_574ac3b1",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 40,
        "endChar": 1
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0009b78_1f875b78",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "doxygen for parameters missing.",
      "range": {
        "startLine": 1319,
        "startChar": 0,
        "endLine": 1321,
        "endChar": 3
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfa377c8_ae624c7a",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "removed this API",
      "parentUuid": "a0009b78_1f875b78",
      "range": {
        "startLine": 1319,
        "startChar": 0,
        "endLine": 1321,
        "endChar": 3
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0799653e_02279d1f",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "match seems like a redundant variable. Implicitly sending true or false is better. Again this also seems like something that could be seperated into its own commit with its own unit tests.",
      "range": {
        "startLine": 1326,
        "startChar": 1,
        "endLine": 1326,
        "endChar": 20
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8a85231_e2ad48af",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0799653e_02279d1f",
      "range": {
        "startLine": 1326,
        "startChar": 1,
        "endLine": 1326,
        "endChar": 20
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0455835_e42e4b5a",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1351,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "this API does not feel like something that should be separated, as most of the things seems to be hard coded within the function (like the PDR type as entity association), i don\u0027t foresee this being consumed by any other API in the future.",
      "range": {
        "startLine": 1341,
        "startChar": 0,
        "endLine": 1351,
        "endChar": 1
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "859d95b2_ba51802a",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1351,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "This was a review comment from @arj, can we discuss and then address this?",
      "parentUuid": "a0455835_e42e4b5a",
      "range": {
        "startLine": 1341,
        "startChar": 0,
        "endLine": 1351,
        "endChar": 1
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4fc917_e9b6a38c",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1351,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Mmm, I may have been wrong about it, or we may have changed the code to the point where it is more obviously unnecessary. I\u0027m not convinced I asked you to do the right thing there ðŸ˜Š",
      "parentUuid": "859d95b2_ba51802a",
      "range": {
        "startLine": 1341,
        "startChar": 0,
        "endLine": 1351,
        "endChar": 1
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec2ea67d_d0859367",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1368,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "No. You must not use assert for error handling. `malloc()` can fail and return `NULL` in contexts that are not Linux, for instance hostboot and skiboot. You must handle these gracefully by returning an error to the caller.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b69866b_e5051b12",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1368,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec2ea67d_d0859367",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ab47a13_966aa4d0",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1442,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "All of this should be implemented in terms of the `msgbuf` APIs.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab61caa7_d74b3b7d",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1442,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ab47a13_966aa4d0",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b7cf699_301d1baa",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "The return type must accommodate the possibility of errors.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28fe5629_61a5e776",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1447,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b7cf699_301d1baa",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df48fa0d_977ce146",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1474,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "No. You must not handle errors using `assert()`. You need to return the error to the caller.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01dd8485_bf2a91e1",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1474,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df48fa0d_977ce146",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14b16f81_a6e23ba5",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "Again, I think much of this should be implemented with `msgbuf`.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8792c14_8fa2752e",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1520,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14b16f81_a6e23ba5",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba1fbea0_dea5bde8",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1524,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:25:45Z",
      "side": 1,
      "message": "The return type must accommodate the possibility of errors, and error conditions must be returned to the caller.",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd519753_6e8acbd4",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1524,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba1fbea0_dea5bde8",
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e633d83_a96ea7f8",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:58:02Z",
      "side": 1,
      "message": "typo , will be corrected",
      "range": {
        "startLine": 1566,
        "startChar": 16,
        "endLine": 1566,
        "endChar": 21
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39e773eb_a8b84e79",
        "filename": "src/pdr.c",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "done",
      "parentUuid": "8e633d83_a96ea7f8",
      "range": {
        "startLine": 1566,
        "startChar": 16,
        "endLine": 1566,
        "endChar": 21
      },
      "revId": "80ff032190e46fa83a5d5464f1ae9f1909141c2c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}