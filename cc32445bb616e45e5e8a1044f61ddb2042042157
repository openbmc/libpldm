{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1d437076_01155237",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-24T05:05:49Z",
      "side": 1,
      "message": "Hi Thu, I think this is definitely the direction we want to go, however I have some suggestions for better integrating what you\u0027ve done with the existing `struct pldm_msgbuf` object.",
      "revId": "cc32445bb616e45e5e8a1044f61ddb2042042157",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820b147b_e208646f",
        "filename": "meson_options.txt",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-24T05:05:49Z",
      "side": 1,
      "message": "Please drop this addition of whitespace.",
      "revId": "cc32445bb616e45e5e8a1044f61ddb2042042157",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c115bc12_ac3d3eb3",
        "filename": "src/msgbuf.h",
        "patchSetId": 2
      },
      "lineNbr": 369,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-24T05:05:49Z",
      "side": 1,
      "message": "I agree we need to add APIs for packing data into a buffer, in addition to the existing `pldm_msgbuf_extract*()` APIs for extracting it.\n\nA couple of things:\n\n1. If we\u0027re going to define these types of APIs in `src/msgbuf.h` then they should integrate with the actual `struct pldm_msgbuf` object\n2. I will argue they should be part of the `struct pldm_msgbuf` object as they are the dual of the \"extract\" operations.\n\nI think the prototype should look like the following:\n\n```\nstatic inline int pldm_msgbuf_insert_uint32(struct pldm_msgbuf *ctx, uint32_t src);\n```\n\nFor this example the operation should insert a `uint32_t` type, in the correct endian form (LE for the PLDM specs), at the current cursor position for the buffer associated with the `struct pldm_msgbuf` instance.\n\nIn this way we can uphold the \"doesn\u0027t overflow\" property by checking against `struct pldm_msgbuf`\u0027s `remaining` member in the same way that the `pldm_msgbuf_extract*()` functions do.\n\nAlso note that `src` doesn\u0027t need to be a pointer here, I think that just makes the API a little more awkward than is necessary. It\u0027s necessary that it\u0027s a pointer for the `pldm_msgbuf_extract*()` functions as it\u0027s an out-parameter (the return value is the succes/error result) but there\u0027s no reason to try to be consistent with that between these functions you\u0027ve added and the extract functions.\n\nThis comment also applies for the remaining functions you\u0027ve added below.",
      "revId": "cc32445bb616e45e5e8a1044f61ddb2042042157",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}