{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "19246bf3_9db26247",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "Gerrit is claiming this file has been entirely rewritten. That doesn\u0027t feel right?",
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd2d96b8_355e44f8",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2022-12-19T05:00:29Z",
      "side": 1,
      "message": "I think I overwrote the symbolic link. Woops.",
      "parentUuid": "19246bf3_9db26247",
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "415c2bbd_f6126703",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "This isn\u0027t quite right ðŸ˜Š\n\nI think `#pragma once` is generally accepted?",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 14
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94de282a_2b7a6bbe",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-12T03:47:09Z",
      "side": 1,
      "message": "Though it is a C code-base, openbmc generally uses `#pragma once` in its C++ code. Maybe just flip it to PLDM_H?",
      "parentUuid": "415c2bbd_f6126703",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 14
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "458d72b7_690dde24",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "I think we just leave maintenance of this kind of data to the specific transport implementation.",
      "range": {
        "startLine": 30,
        "startChar": 1,
        "endLine": 31,
        "endChar": 30
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "853afa37_bc4a0361",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "I think the generic API should only deal in TIDs. We can expose transport-specific APIs for resolving e.g. an MCTP EID to a TID.",
      "range": {
        "startLine": 33,
        "startChar": 53,
        "endLine": 33,
        "endChar": 69
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab2f7332_74b94574",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "Again here.",
      "range": {
        "startLine": 36,
        "startChar": 55,
        "endLine": 36,
        "endChar": 69
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de4ca502_f39adbfd",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "This should be an int, right? Otherwise in the success case you\u0027re returning a value that\u0027s outside the valid enum range?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 19
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeabe71d_ea3f3822",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "MCTP EIDs shouldn\u0027t be part of this API, this should be a PLDM TID. The (MCTP) transport implementation needs to maintain the TID-to-EID mapping internally.",
      "range": {
        "startLine": 159,
        "startChar": 53,
        "endLine": 159,
        "endChar": 67
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15587c5e_a0cdbd22",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "I think you just want to pass `struct pldm *` here, not the transport specifically. Given the existence of pldm_{,un}register_transport() to hook an instance into a `struct pldm` instance, where would we get the `struct pldm_transport` that we need to pass through here from?",
      "range": {
        "startLine": 159,
        "startChar": 19,
        "endLine": 159,
        "endChar": 51
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55487fb2_19fd5dc6",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2022-12-18T19:27:28Z",
      "side": 1,
      "message": "What does it mean by (MCTP) transport implementation, in-kernel MCTP stack?\n\nIt will be a concern, since TID is a PLDM construct and mixing it with MCTP stack is probably a bad choice.\n\nIt is possible that BMC can have multiple PLDM terminus and the different PLDM apps can be assigned statically TID or dynamically assigned a TID from pldmd.",
      "parentUuid": "aeabe71d_ea3f3822",
      "range": {
        "startLine": 159,
        "startChar": 53,
        "endLine": 159,
        "endChar": 67
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "348c14b9_b950d240",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-19T04:00:25Z",
      "side": 1,
      "message": "\u003e What does it mean by (MCTP) transport implementation, in-kernel MCTP stack?\n\u003e \n\u003e It will be a concern, since TID is a PLDM construct and mixing it with MCTP stack is probably a bad choice.\n\nMaybe what I said was unclear. Let me try to clarify.\n\nThe DMTF are defining a set of related protocols. We\u0027re interested in PLDM and MCTP. However, it\u0027s not just a set of protocols, it\u0027s a stack of protocols. PLDM and MCTP both define a set of common behaviours (e.g. DSP0248 PLDM for Platform Monitoring and Control Specification, DSP0236 MCTP Base Specification) _and_ a means to exchange messages implementing those behaviours (e.g. DSP0241 Platform Level Data Model (PLDM) Over MCTP Binding Specification, MCTP PCIe VDM Transport Binding Specification). So:\n\n1. MCTP can use I2C, PCIe, serial and various other buses as its transport\n2. PLDM can use MCTP, NC-SI or potentially other lower level protocols as its transport\n\nTo exchange e.g. PLDM messages with some other device we need to package them for transmission via the underlying transport, and transmit it via that transport using the APIs exposed by its implementation. Consider PLDM over MCTP. Right now there are two implementations and two separate APIs libpldm can access:\n\n1. The mctp-demux-daemon, using an AF_UNIX socket with the abstract socket name \u0027\\0mctp-demux\u0027\n2. The in-kernel MCTP implementation, using an AF_MCTP socket\n\nThe job of the libpldm requester API is to provide an abstract API over either of these two implementations, and more. The code to implement this abstraction in libpldm is what I was referring to by \"transport implementation\" above. A transport implementation for e.g. mctp-demux-daemon AF_UNIX socket in libpldm would contain code to call `socket(AF_UNIX, ...)`, or `socket(AF_MCTP, ...)` for the in-kernel MCTP implementation. The user of the libpldm APIs mustn\u0027t need to care about these mechanics - that\u0027s the point of the abstraction. Again, this is the client code in libpldm, not the implementation of MCTP in e.g libmctp and its associated daemons, or the kernel.\n\nMCTP isn\u0027t the only transport for PLDM messages. We can use NC-SI as well. NC-SI and any future transports have no concept of the MCTP-specific EID, however they may have something similar with different representation and constraints. Thus, we can\u0027t embed the MCTP-specific EID representation in the generic API. TIDs are a PLDM concept and are relevant regardless of the underlying transport. They also uniquely identify a target address. From here, the transport implementation (client) in libpldm can maintain a mapping between TIDs and e.g. EIDs in the case of MCTP in order to encode the PLDM message for transmission via the appropriate MCTP API for the system (until now libpldm has only supported the mctp-demux-daemon as a transport).\n\n\u003e It will be a concern, since TID is a PLDM construct and mixing it with MCTP stack is probably a bad choice.\n\nThis follow-on concern only exists under the misinterpretation of my original statement, which I\u0027ve tried to clarify above. I\u0027m not talking about the in-kernel implementation of MCTP or libmctp, I\u0027m talking about the client code that lives in libpldm. This client code in libpldm needs to map the TID to an address appropriate for the underlying transport.\n\n\u003e It is possible that BMC can have multiple PLDM terminus and the different PLDM apps can be assigned statically TID or dynamically assigned a TID from pldmd.\n\nI don\u0027t think this is a significant concern.",
      "parentUuid": "55487fb2_19fd5dc6",
      "range": {
        "startLine": 159,
        "startChar": 53,
        "endLine": 159,
        "endChar": 67
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93ecfbe2_8b576003",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 159,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2022-12-19T05:00:29Z",
      "side": 1,
      "message": "@arj\n\u003e MCTP EIDs shouldn\u0027t be part of this API, this should be a PLDM TID. The (MCTP) transport implementation needs to maintain the TID-to-EID mapping internally.\nThis makes sense, as EIDs are an MCTP specific detail.\n\nI\u0027m not clear on how we should get the mapping between a given TID and it\u0027s associated EID. We could have the user set up this mapping via an MCTP transport only API call - all current users have the EID so this would be straightforward using the GetTID PLDM command. But that would be going against what you said:\n\u003e The user of the libpldm APIs mustn\u0027t need to care about these mechanics - that\u0027s the point of the abstraction\n\nDoes it make sense for the user to know the TID they want to communicate with and over which transport (mctp-demux-daemon, in-kernel mctp, nc-si), and (if that transport is MCTP) libpldm finds the right EID to use when we init the transport?\n\nThe PLDM spec mentions a type of PDR called Terminus Locater that contains information including a TID and an associate EID (if the terminus type is MCTP). Could we use these? I think I need to give the PLDM Platform Spec a thorough read.",
      "parentUuid": "348c14b9_b950d240",
      "range": {
        "startLine": 159,
        "startChar": 53,
        "endLine": 159,
        "endChar": 67
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50e2e4dc_c5bf0398",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "PLDM TID again.",
      "range": {
        "startLine": 176,
        "startChar": 65,
        "endLine": 176,
        "endChar": 79
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc3d1537_31b458ae",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "Drop this.",
      "range": {
        "startLine": 197,
        "startChar": 6,
        "endLine": 197,
        "endChar": 20
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "641abd5d_590557f8",
        "filename": "include/libpldm/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "Drop this",
      "range": {
        "startLine": 217,
        "startChar": 8,
        "endLine": 217,
        "endChar": 23
      },
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10d93562_ddfa84af",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-11T23:34:51Z",
      "side": 1,
      "message": "Oh. I think my comments on the other header are actually applicable here? And the changes to the other header should be dropped?",
      "revId": "7bab80f81ae5cf4993659b975ff8072f4ea9b72a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}