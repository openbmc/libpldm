{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b337fe01_64703604",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2022-12-01T08:16:42Z",
      "side": 1,
      "message": "The struct is difference with section 28.8 Sensor Auxiliary Names PDR.\nIt seem names[1] is simpler form for array of struct which includes nameStringCount, nameLanguageTag and sensorName.\nI also have one MR for pldm_effecter_auxiliary_names_pdr which use difference approach. @ManojKiran Eda Do you have any idea on this?",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e58408_2bc1de54",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-12-01T08:26:53Z",
      "side": 1,
      "message": "According to the sensorCount field description of table 83, there will M vary structure {nameStringCount\u003dN, nameLanugageTag, sensorName[N]} if sensorCount\u003dM and M \u003e 1.\nSo address of vary length data is after sensor_count and it is where the address of names[] array is.",
      "parentUuid": "b337fe01_64703604",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a78177e_d3531897",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-12-06T02:55:41Z",
      "side": 1,
      "message": "Resolved the comment since https://gerrit.openbmc.org/c/openbmc/libpldm/+/59006 also was updated to unit8_t array",
      "parentUuid": "67e58408_2bc1de54",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7648f3e1_a6c90f28",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 669,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2022-12-01T08:16:42Z",
      "side": 1,
      "message": "This union is the same as union_effecter_data_size, just difference the name. Should we rename union_effecter_data_size to use for both sensor and effecter data size?",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4b27a14_dc9076cf",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 669,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-12-06T02:55:41Z",
      "side": 1,
      "message": "The reason to add union for sensor data size is because that effecter and sensor data size are described in two different tables in DSP0248.\nsensorDataSize: table78\neffecterDataSize: table87",
      "parentUuid": "7648f3e1_a6c90f28",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88d9f48d_0afb0c61",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 669,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2022-12-07T10:13:43Z",
      "side": 1,
      "message": "lets have it as two different unions. Incase if one of them changes in future, i think its cleaner to have both seperate.",
      "parentUuid": "a4b27a14_dc9076cf",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "872417ef_a6b49a3c",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 701,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-09T00:25:31Z",
      "side": 1,
      "message": "This has me concerned.\n\nThe first concern is that DSP0248 1.2.0 28.4 Table 78 doesn\u0027t specify structure offsets for data elements. If the data structure was composed of fixed-length members then this should be feasible. It\u0027s not possible to provide sensible values for offsets if members are variable length. The implication of not providing them is that some members are variable length.\n\nFurther, the type of sensorDataSize in Table 78 is `enum8`, which is fixed-length, however the type of hysteresis is described as `uint8 | sint8 | uint16 | sint16 | uint32 | sint32`. This suggests the data of the type of any one of the types listed.\n\nFrom the C99 draft specification WG14/N1256 6.7.2.1 Structure and union specifiers we have:\n\n\u003e 14 The size of a union is sufficient to contain the largest of its members. The value of at most one of the members can be stored in a union object at any time. A pointer to a union object, suitably converted, points to each of its members (or if a member is a bit-field, then to the unit in which it resides), and vice versa.\n\nDSP2048 refers us to DSP0240 for PLDM conventions, notations and data types. By DSP0240 5.3 and its associated Table 1, there\u0027s no suggestion of padding out a type disjunction to the largest type, or even of the disjunction notation they\u0027ve used in DSP0248 (|, the pipe character).\n\nI think we have to assume the length of the hysteresis field is entirely defined by the sensorDataSize member, which means it\u0027s inappropriate to cast a buffer containing a sensor value PDR message to this struct-based description. If sensorDataSize is anything but a u32 or s32 type, the data in all following members is corrupt, and accessing members towards the end of the struct may lead to out of bounds memory accesses.\n\nVariable length structures require explicit unpacking of members via e.g. memcpy().",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0855c61f_8a6e0c8e",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 701,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-12-09T02:47:10Z",
      "side": 1,
      "message": "Yes, the structure is for unpacked numeric sensor PDR data. Unpacking the variable length field to the structure is done by parseNumericSensorPDR()\nhttps://gerrit.openbmc.org/c/openbmc/pldm/+/53961/35/platform-mc/terminus.cpp#175/\n\nlibpldm has a similar sturcture defined for numeric effecter pdr. The patch set follows its style to define a structure for numeric sensor pdr.\nhttps://github.com/openbmc/libpldm/blob/main/include/libpldm/platform.h#L608.",
      "parentUuid": "872417ef_a6b49a3c",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68258db4_bb2a3012",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 1
      },
      "lineNbr": 701,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2022-12-09T04:14:02Z",
      "side": 1,
      "message": "But it\u0027s declared as __attribute__((packed)) on 719, which implies it was intended for casting onto a received buffer, or a buffer to be sent out? Declaring it as __attribute__((packed)) and then only using it in circumstances where the accesses would be properly aligned is going to impact efficiency as the compiler is forced to emit code for arbitrarily aligned accesses.\n\nShouldn\u0027t we be dropping __attribute__((packed)) given you intend to have an explicit parsing function?",
      "parentUuid": "0855c61f_8a6e0c8e",
      "revId": "9482e709ab51bdd07f86030fd6f025dbf336209e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}