{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2c8ac56f_e1880f2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T13:47:41Z",
      "side": 1,
      "message": "For some reason it only worked for me in the online tool after wrapping in\n\n```\n---- MODULE scratch ----\n...\n\u003d\u003d\u003d\u003d\n```\n\notherwise i would get a parse error. Is it required to have a named module or is it some quirk of the tool?",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54312e58_3b579baf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T13:47:41Z",
      "side": 1,
      "message": "This TLA+ spec could be useful to have in a separate file for further extension down the line, and to be able to run the TLA+ specific tools on it.",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10f73cc0_85d92296",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-14T02:16:46Z",
      "side": 1,
      "message": "So I did consider whether I should add it to the repo itself. I had decided against it for the following reasons:\n\n1. I wasn\u0027t sure if anyone beside myself would be interested in it\n2. Writing a spec can be quite a personal learning journey\n3. Maintaining the spec over time can be tricky as they really require people to \"live\" them\n\nAs a consequence I consider it a bit temporary in nature - something I used to guide me in the implementation. With respect to that, it really did act like a super-power and prevented me from agonizing with myself over how to represent all the related state - it boiled down to a few choice early-exit conditions, rather than trying to maintain a swamp of switch statements, for instance.\n\nRegarding 2, it tends to be that no-one sees the battles you fight with TLC, as by the time the spec is presented to others, it\u0027s generally upholding the desired properties ðŸ˜Š The battles with TLC _are_ the learning experience and I haven\u0027t found an easy way to document them.\n\nThis article captures the essence of my feelings:\n\nhttps://ahelwer.ca/post/2025-07-04-tla-contracts/",
      "parentUuid": "54312e58_3b579baf",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3454160c_8af7b3c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-14T02:16:46Z",
      "side": 1,
      "message": "Ah, yeah, that\u0027s a silly trap I guess. I\u0027ll add them in to ease use; I removed them because I thought they were noisy.",
      "parentUuid": "2c8ac56f_e1880f2c",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5670a48_bb52626e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-14T12:10:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3454160c_8af7b3c0",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c76b231f_70f534bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T13:01:04Z",
      "side": 1,
      "message": "What if you chose something simpler, like a graphviz (dot file) or mermaid diagram?\n\nThat would be easier without so much of a learning curve.\n\nMade a simple dot file for example purpose:\n\n```\ndigraph \"parsing\" {\n\n\tInit [Label\u003d\"Init\"]\n\tHeader [Label\u003d\"Header\"]\n\tFirmwareDevices [Label\u003d\"FirmwareDevices\"]\n\tDownstreamDevices [Label\u003d\"DownstreamDevices\"]\n\tComponentImageInfo [Label\u003d\"ComponentImageInfos\"]\n\tComplete [Label\u003d\"Complete\"]\n\tUnsupported [Label\u003d\"Unsupported\"]\n\tError [Label\u003d\"Error\"]\n\n\tInit -\u003e Header [label\u003d\"format \u003c\u003d pin\"]\n\tInit -\u003e Unsupported [label\u003d\"format \u003e pin\"]\n\n\tHeader -\u003e FirmwareDevices\n\tHeader -\u003e Error\n\n\tFirmwareDevices -\u003e DownstreamDevices [label\u003d\"pin \u003e 1\"]\n\tFirmwareDevices -\u003e Error\n\n\tDownstreamDevices -\u003e ComponentImageInfo [label\u003d\"pin \u003e 1\"]\n\tDownstreamDevices -\u003e Error\n\n\tFirmwareDevices -\u003e ComponentImageInfo [label\u003d\"pin \u003d\u003d 1\"]\n\n\tComponentImageInfo -\u003e Complete\n\tComponentImageInfo -\u003e Error\n}\n```\n\ncan use \n\n`dot -Tpng pldm_pkg.dot \u003e pldm_pkg.png`  to render.\n\nThen contributors could render that locally or refer to what\u0027s in the repo (github renders mermaid, not sure about dot) and refer to it.\n\n\nThen we already have the precondition state for the function and the postcondition documented.",
      "parentUuid": "10f73cc0_85d92296",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a07bb63b_3b1c0769",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-15T01:02:48Z",
      "side": 1,
      "message": "Thanks for putting in the effort to translate the spec into dot, it was nice to render it and take a look.\n\nSo I did consider mermaid initially, but then decided that if I was going to put the effort in to specifying a state machine, I\u0027d much rather do so in a way that was testable for the properties I needed, hence TLA+.\n\nWe should keep in mind what we\u0027re trying to achieve here. The spec and the state machine cover _implementation details_ of the library - a means to catch erroneous use of the APIs, given the problems with enforcing sequencing via the type system. The user-facing result of the state machine is the errors that are visible to the callers of the APIs. We should make sure *those* are documented appropriately, with descriptions of the circumstances in which specific error values arise, and the pre- and post- conditions as you suggested.\n\nOtherwise, the information on the sequencing required can be gleaned from DSP0267 in the context of the desired format revision to pin against. I don\u0027t think we should cater to people who aren\u0027t willing to read the spec that the APIs implement.\n\nI rather we be conservative about including implementer-oriented documentation because the implementation can change on a whim, and all of a sudden the documentation is incorrect. I\u0027m trying to avoid increasing my maintenance burden by acknowledging that some information is only temporally relevant, and locating it in time with the change (by putting it in the commit message).",
      "parentUuid": "c76b231f_70f534bd",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47439118_fd603d93",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T13:47:41Z",
      "side": 1,
      "message": "Could use a `Tested` statement with the commands/tools you used to check this spec. \n\nCould check this for example `https://will62794.github.io/spectacle/` or with local tools.",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd30be9b_2b8a6250",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-14T02:16:46Z",
      "side": 1,
      "message": "I\u0027m not sure there\u0027s much value in that; if you\u0027ve come far enough to understand what is going on above, no doubt you have access to the tools needed to exercise the spec with a model checker. I mentioned above setting `NR_FORMATS \u003c- 4`. I think that\u0027s enough to reproduce?",
      "parentUuid": "47439118_fd603d93",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a12d5a7d_903ec901",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T13:01:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd30be9b_2b8a6250",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7734a00b_34fb28f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T13:47:41Z",
      "side": 1,
      "message": "Thank you!",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46f0decd_32dee89c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-14T02:16:46Z",
      "side": 1,
      "message": "It makes me happy that you share some enthusiasm for this kind of thing ðŸ˜Š",
      "parentUuid": "7734a00b_34fb28f8",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a730a36f_678664f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T13:47:41Z",
      "side": 1,
      "message": "Did not look into the C code much so far.",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9f7175e_eb5bac66",
        "filename": "include/libpldm/firmware_update.h",
        "patchSetId": 1
      },
      "lineNbr": 2284,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-13T13:47:41Z",
      "side": 1,
      "message": "`Unsupported` and `Error` states are missing here, should we add those to match the TLA+ spec?",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "725aa161_f78834c9",
        "filename": "include/libpldm/firmware_update.h",
        "patchSetId": 1
      },
      "lineNbr": 2284,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-14T02:16:46Z",
      "side": 1,
      "message": "In my opinion, no; `Unsupported` and `Error` are represented in the implementation in return values and incorrect state for the current action.",
      "parentUuid": "f9f7175e_eb5bac66",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c3db7ff_775188b8",
        "filename": "include/libpldm/firmware_update.h",
        "patchSetId": 1
      },
      "lineNbr": 2284,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-08-14T13:01:04Z",
      "side": 1,
      "message": "Then the implementation does not match the state machine, right?\n\nI thought it should match. From the code perspective, i agree, the implemented behavior still works as the precondition state will be wrong in error case.\n\nBut from contributor perspective it might be harder to reason about since the state machine is not making progress and not ending up in one of the 3 final states.",
      "parentUuid": "725aa161_f78834c9",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4905ef8e_75971376",
        "filename": "include/libpldm/firmware_update.h",
        "patchSetId": 1
      },
      "lineNbr": 2284,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-15T01:02:48Z",
      "side": 1,
      "message": "\u003e Then the implementation does not match the state machine, right?\n\nTo give myself some credit here, I never claimed that it did. The commit message says:\n\n\u003e The state machine implementation is **modeled** on the TLA+ specification below\n\n(emphasis added)\n\nThe intent was that \"modeled\" suggested relative alignment rather than strict alignment between the two.\n\nFurther, there are details the TLA+ specification omits - it only tackles one specific problem, so you can claim it\u0027s not accurate regardless of whether we fix this issue.\n\nThat said, the spec was about setting expectations for the implementation, and I think you make a reasonable point that it diverges without any real discussion. I will update the commit message to describe how the `Unsupported` and `Error` states map to the implementation, which will hopefully reduce the surprise.\n\n\u003e since the state machine is not making progress and not ending up in one of the 3 final states\n\nThe reason that it doesn\u0027t is that the APIs shouldn\u0027t observe the problem in practice, because the callers are expected to perform appropriate error handling. This will detect the incorrect use and cause progress to stop (by way of no further calls into the APIs). Incorrect use should be caught quickly in testing.",
      "parentUuid": "1c3db7ff_775188b8",
      "revId": "889a67afd9a3aa0a73d0dc22969510a51a1b7915",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}