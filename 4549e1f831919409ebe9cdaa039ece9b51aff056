{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ad6c542b_c3392e5b",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1008,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T00:14:18Z",
      "side": 1,
      "message": "How does the caller know how much of the buffer is populated with data?",
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c16193a3_4847ea19",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1008,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-28T00:37:47Z",
      "side": 1,
      "message": "Do the caller really need that? If it is then we have to add the allocated size fields in pldm_msgbuf. With \"remaining\" and \"length\" fields the caller can know the populated buffer.",
      "parentUuid": "ad6c542b_c3392e5b",
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e0d4856_b875db3f",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1008,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T00:55:11Z",
      "side": 1,
      "message": "I meant the caller of `encode_poll_for_platform_event_message_resp()`, who doesn\u0027t have access to the `struct pldm_msgbuf` instance, let alone the length data. How does this work when the `struct pldm_msg` buffer gets passed to the transport APIs? How they know how much of the buffer to transmit?",
      "parentUuid": "c16193a3_4847ea19",
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0456842_f70a7d8b",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1008,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-28T02:28:16Z",
      "side": 1,
      "message": "When the event_id is 0xffff or 0x0000, the payload_length will be 4.\nI added code to checking that condition. In that case, the APIs will protect itself with invalid input.",
      "parentUuid": "4e0d4856_b875db3f",
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fa69711_3b1b78f9",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1008,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T02:29:22Z",
      "side": 1,
      "message": "Okay, I think your latest update resolves the problem. The caller has to know the length given the value for `event_id` that they pass in. That\u0027s at least something. We can defer thinking about how to make that more ergonomic for now because I suspect this approach is used in other places as well?",
      "parentUuid": "4e0d4856_b875db3f",
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fbaa9e7_00b351a2",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1025,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T00:14:18Z",
      "side": 1,
      "message": "We can do this check at line 1010 right? That\u0027s no need to do any of the work above if this check fails?",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1025,
        "endChar": 2
      },
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f168c5b1_dd4a12a2",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1025,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-28T00:37:47Z",
      "side": 1,
      "message": "This check require the event_data_size which only has after 1018 line.",
      "parentUuid": "1fbaa9e7_00b351a2",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1025,
        "endChar": 2
      },
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "299a9079_47fff3fa",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1025,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-28T00:55:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f168c5b1_dd4a12a2",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1025,
        "endChar": 2
      },
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e359253f_5f8d5d8b",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 1025,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-28T01:00:28Z",
      "side": 1,
      "message": "Oh, sorry. This is encode function so event_data_size is known. Let me update the code.",
      "parentUuid": "f168c5b1_dd4a12a2",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1025,
        "endChar": 2
      },
      "revId": "4549e1f831919409ebe9cdaa039ece9b51aff056",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}