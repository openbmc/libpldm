{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6abd51f0_b2429dcb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "Hi Alexander, this still needs some work, particularly around impoving the C APIs to better suit the needs of the C++ bindings. I\u0027ve left comments inline.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ca321f7_92bd4c92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-01-17T10:50:06Z",
      "side": 1,
      "message": "Alexander/Andrew - Is there a plan to write C APIs as well as part of this patchset? Or do we think we are ok with the C++ ones? I think it would be better to have a C API as well.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec5716cf_4b7f4003",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-17T11:42:44Z",
      "side": 1,
      "message": "My main goal here is to have any function which can parse a PLDM package and produces some data structure which can be queried. Processing a PLDM package should not involve 100s of lines of boilerplate code.\n\nEssentially what PackageParser (from pldm repo) does already.\n\nArguably such code should be part of libpldm since it will be needed in multiple places.\n\nI chose to make ```package_parser.cpp``` the starting point as i assume that code would already be very close to a solution.... Which was not the case.\n\nThe requirements for libpldm code seem to be a lot stricter that what that code does.\n\nIf there is a C API which does what i need, that is also fine for me.\n\nBut that API would need to allocate, to fill that data structure, and the data structure would need to be defined.",
      "parentUuid": "7ca321f7_92bd4c92",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2788d134_f278dbc9",
        "filename": "CHANGELOG.md",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "Okay, this and any other related parts needs to:\n\n1. Be a separate change\n2. Have a lot more substantiation (identifying relevant parts of specifications and compiler implementation documentation)",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 1
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b35839c_5b5cfa11",
        "filename": "bindings/cxx/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 4,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "If these headers are installed they need to live under `include/libpldm`.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edbcb83c_5b1f56ff",
        "filename": "bindings/cxx/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 4,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b35839c_5b5cfa11",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c8a3bb3_b6f57ecb",
        "filename": "bindings/cxx/package_parser.hpp",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1002325
      },
      "writtenOn": "2025-01-09T17:12:46Z",
      "side": 1,
      "message": "Adding this comment at the top as I have a few questions about the design-\n\n1. Considering the platform might support non-PLDM updaters, if a platform implements multiple code updaters, does each updater need to parse the package independently? This would imply running the same parsing logic and decode APIs multiple times in the update flow.\n\n2. The PackageIntegrity check needs to be integrated with the parsing logic. If the libpldm API implements this functionality, does it mean the integrity check will be performed every time different updaters parse the package?",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab07b820_24ee1cf8",
        "filename": "bindings/cxx/package_parser.hpp",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-09T18:01:09Z",
      "side": 1,
      "message": "Thanks for your interest in this patch ðŸ˜Š\n\n\u003e If a platform implements multiple code updaters, does each updater need to parse the package independently? \n\nI believe it depends on the package routing. If you go via bmcweb/redfish then the update is performed via dbus and the dbus fw inventory. In the new design \nhttps://github.com/openbmc/docs/blob/master/designs/code-update.md\nthe package has PLDM format. So if the component is not managed by the specific code updater, it may not even receive the update package.\n\nCurrently i do not know of any plans to have a front-end for the pldm package which does the parsing. So each updater to receive the package may need to parse it.\n\nHowever, parsing the PLDM package is easily done with the C++ binding.\n\n\u003e This would imply running the same parsing logic and decode APIs multiple times in the update flow.\n\nIf that happens for some reason, i do not see it as a problem. Parsing a PLDM package is quite efficient. And firmware update is not something that happens very often.\n\n\u003e The PackageIntegrity check needs to be integrated with the parsing logic. If the libpldm API implements this functionality, does it mean the integrity check will be performed every time different updaters parse the package?\n\nYes, the integrity has to be checked to avoid processing a corrupted pldm package or indexing out of bounds.\n\n\nConsider the following script\n\n```\n\ncurl -k ${creds} \\\n\t-H \"Content-Type:multipart/form-data\" \\\n\t-X POST \\\n\t-F UpdateParameters\u003d\"{\\\"Targets\\\":[\\\"/redfish/v1/UpdateService/FirmwareInventory/${target}\\\"],\\\"@Redfish.OperationApplyTime\\\":\\\"Immediate\\\"};type\u003dapplication/json\" \\\n\t-F \"UpdateFile\u003d@${fwpath};type\u003dapplication/octet-stream\" \\\n\thttps://${bmc}/redfish/v1/UpdateService/update\n```\n\nin which i target a single firmware inventory item. In that case, the PLDM parsing should only happen once.\n\nSo if you target your pldm fw update package correctly, it should not be processed more often than required.\n\nIf you do not know which devices from the fw inventory should receive the update package, you can also target it to all of them, and the update daemons should figure out if the package is intended for that device or not.\n\nThat would be the case you described where the PLDM fw update package is processed multiple times.",
      "parentUuid": "6c8a3bb3_b6f57ecb",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78a43e4_a392af6d",
        "filename": "include/libpldm/pldm_types.h",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "See the comment in the changelog.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51ad97a5_990cb878",
        "filename": "include/libpldm/pldm_types.h",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-28T01:01:04Z",
      "side": 1,
      "message": "This still needs to be addressed.",
      "parentUuid": "b78a43e4_a392af6d",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fc8b138_e9018ee4",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "Please don\u0027t add it as a default language. See below.",
      "range": {
        "startLine": 3,
        "startChar": 8,
        "endLine": 3,
        "endChar": 14
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6178ef98_aed2f707",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fc8b138_e9018ee4",
      "range": {
        "startLine": 3,
        "startChar": 8,
        "endLine": 3,
        "endChar": 14
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ea8cef1_bf2a5818",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "Change this to:\n\n```\nif get_option(\u0027bindings\u0027).contains(\u0027cpp\u0027) or get_option(\u0027tests\u0027)\n```",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "306a1d0c_81e4dbd6",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ea8cef1_bf2a5818",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5314f10_4909f87e",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "If we\u0027re supporting multiple languages, can we be consistent in naming the compiler variables?\n\nAlso, can we keep the scope limited to where it\u0027s necessary?",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00cae98b_0b64db1e",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "What\u0027s wrong with ```cpp_compiler```? Which name do you want?\n\nMoved the definition further down to limit the scope.",
      "parentUuid": "c5314f10_4909f87e",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5beeb633_7a4881e6",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-28T00:21:39Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s anything wrong with `cpp_compiler` (though maybe just `cpp`?). To clarify, my concern was for the variable for the C compiler, which is just called `compiler`. If we call the C++ compiler variable `cpp`, perhaps we can call the C compiler variable `cc`?",
      "parentUuid": "00cae98b_0b64db1e",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2b5118f_b7f860db",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "I prefer we negate the condition and `error()` here.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b321135b_6ddede3d",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "That would fail the CI. Output:\n```\nmeson.build:54:10: ERROR: Problem encountered: C++ compiler should support function attribute tainted_args: clang19.1.6\n```\n\nMade it a warning.",
      "parentUuid": "f2b5118f_b7f860db",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68a87d07_4fddf434",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-28T00:23:58Z",
      "side": 1,
      "message": "Well, that\u0027s part of the point? We shouldn\u0027t be mixing gcc for the C files with clang++ for the C++ files?\n\nIf that mix is occurring, whatever is causing the mix should be fixed.",
      "parentUuid": "b321135b_6ddede3d",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a85326f8_95c501d1",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "This is unnecessary as you\u0027ve done it above.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "159731c9_fe674289",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a85326f8_95c501d1",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d7cde20_1e81513c",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "we should make a consistent choice between `c++`, `cpp` and `cxx`. Mixing all three all throughout is a bit messy.",
      "range": {
        "startLine": 91,
        "startChar": 21,
        "endLine": 91,
        "endChar": 24
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8e2005a_d51b189c",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "choosing cpp, it\u0027s easier to write.",
      "parentUuid": "9d7cde20_1e81513c",
      "range": {
        "startLine": 91,
        "startChar": 21,
        "endLine": 91,
        "endChar": 24
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1ebf7a4_04848feb",
        "filename": "meson.options",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "maybe we switch this to `cpp` to align with meson and solve the consistency problem.",
      "range": {
        "startLine": 6,
        "startChar": 91,
        "endLine": 6,
        "endChar": 94
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02b71e3d_6ab8149a",
        "filename": "meson.options",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1ebf7a4_04848feb",
      "range": {
        "startLine": 6,
        "startChar": 91,
        "endLine": 6,
        "endChar": 94
      },
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b28cec5_58d1db47",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "Please see the comment about all public headers needing to live under `include/`.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85a19116_4b7ec2b4",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b28cec5_58d1db47",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8693bb2_37b43455",
        "filename": "tests/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 35,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-01-13T01:10:33Z",
      "side": 1,
      "message": "Please drop this guard.",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90356a51_92010af8",
        "filename": "tests/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 35,
      "author": {
        "id": 1001712
      },
      "writtenOn": "2025-01-20T17:57:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8693bb2_37b43455",
      "revId": "5630d6a67cae6269f29aab49be1035dab433e80d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}