{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e1981998_5eebc904",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "Hi Andrew, \nI have some questions to ask before making the changes.\nPlease see the link: https://gerrit.openbmc.org/c/openbmc/libpldm/+/72758/comment/fd443ca9_2bd76486/",
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b383af6b_dd3fcc11",
        "filename": "docs/oem/meta/file-io.md",
        "patchSetId": 32
      },
      "lineNbr": 41,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T01:42:20Z",
      "side": 1,
      "message": "Okay, a bit late to the party here, but can this please be combined to a `uint16_t` with PLDM-endianness? Manually reconstructing an offset seems way more error-prone than `pldm_msgbuf_extract(buf, req-\u003eoffset)` where `req-\u003eoffset` is `uint16_t`.",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 63
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8249da83_9433ccdf",
        "filename": "docs/oem/meta/file-io.md",
        "patchSetId": 32
      },
      "lineNbr": 41,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "I will change it to a parameter offset, type is uint16_t.",
      "parentUuid": "b383af6b_dd3fcc11",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 41,
        "endChar": 63
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4108a34_f9f89b4d",
        "filename": "docs/oem/meta/file-io.md",
        "patchSetId": 32
      },
      "lineNbr": 47,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T01:42:20Z",
      "side": 1,
      "message": "Seems odd to me that the size is `uint16` but the `length` field in the messages is `uint8`. This means we need ~64 transactions to read a full-sized file. Is there a reason for this?",
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca10673_6768fe33",
        "filename": "docs/oem/meta/file-io.md",
        "patchSetId": 32
      },
      "lineNbr": 47,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "I will change the length type in struct pldm_oem_meta_file_io_read_req to uint16_t so that users can obtain more data at one time.",
      "parentUuid": "b4108a34_f9f89b4d",
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3792f035_acfacc4e",
        "filename": "docs/oem/meta/file-io.md",
        "patchSetId": 32
      },
      "lineNbr": 57,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T01:42:20Z",
      "side": 1,
      "message": "Combine this into a `uint16_t` here also.",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 65
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e09cb32_26443d8b",
        "filename": "docs/oem/meta/file-io.md",
        "patchSetId": 32
      },
      "lineNbr": 57,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "I will change it to a parameter offset, type is uint16_t.",
      "parentUuid": "3792f035_acfacc4e",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 65
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5da7b6c2_066ae41e",
        "filename": "include/libpldm/oem/meta/file_io.h",
        "patchSetId": 32
      },
      "lineNbr": 48,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T01:42:20Z",
      "side": 1,
      "message": "See comments on message documentation.",
      "range": {
        "startLine": 47,
        "startChar": 1,
        "endLine": 48,
        "endChar": 19
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09d65b86_b651df26",
        "filename": "include/libpldm/oem/meta/file_io.h",
        "patchSetId": 32
      },
      "lineNbr": 48,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "I will change it to a parameter offset, type is uint16_t.",
      "parentUuid": "5da7b6c2_066ae41e",
      "range": {
        "startLine": 47,
        "startChar": 1,
        "endLine": 48,
        "endChar": 19
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd443ca9_2bd76486",
        "filename": "include/libpldm/oem/meta/file_io.h",
        "patchSetId": 32
      },
      "lineNbr": 56,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T02:11:17Z",
      "side": 1,
      "message": "See my comment about extensible structs here:\n\nhttps://gerrit.openbmc.org/c/openbmc/libpldm/+/72759/comment/0434ff06_ed1bd477/\n\nThis one also needs the `size_t version` field.",
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf080dea_b14541aa",
        "filename": "include/libpldm/oem/meta/file_io.h",
        "patchSetId": 32
      },
      "lineNbr": 56,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "If the size_t version field is added to struct pldm_oem_meta_file_io_read_req as suggested, the following changes will occurï¼š\n1. PLDM_OEM_META_FILE_IO_READ_REQ_MIN_LENGTH will be changed to 11u.\n2. We need to add size_t to the pldm_msgbuf_extract function to extract the version.\n3. After extracting the version, check whether the size of version and struct pldm_oem_meta_file_io_read_req are the same.\n\nThe second one has more changes. I want to confirm whether this change is correct first. If it is correct, I will use the pldm_msgbuf_extract function to extract the size_t type.",
      "parentUuid": "fd443ca9_2bd76486",
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3b1058_d58bb914",
        "filename": "include/libpldm/oem/meta/file_io.h",
        "patchSetId": 32
      },
      "lineNbr": 56,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T23:52:59Z",
      "side": 1,
      "message": "\u003e PLDM_OEM_META_FILE_IO_READ_REQ_MIN_LENGTH will be changed to 11u.\n\nNo, because we\u0027re not going to encode `version` in the message itself. The structure of the struct is not the same as the message - the idea behind the encode/decode functions is we make the messages easier to work with in C. The representations do not need to be equivalent (and shouldn\u0027t be). The `version` field is purely a C construct dealing with the shape of the `struct` definition for API forwards-compatibility.\n\n\u003e We need to add size_t to the pldm_msgbuf_extract function to extract the version.\n\nNo need, see the above. The version field just allows us to accommodate any new values for `option` added in the future but retain backwards compatibility of the library API.\n\n\u003e After extracting the version, check whether the size of version and struct pldm_oem_meta_file_io_read_req are the same.\n\nNot necessary, as above.",
      "parentUuid": "cf080dea_b14541aa",
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "538007dd_ab7485ee",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 32
      },
      "lineNbr": 132,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-09-11T01:42:20Z",
      "side": 1,
      "message": "See comments on message documentation.",
      "range": {
        "startLine": 131,
        "startChar": 1,
        "endLine": 132,
        "endChar": 53
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93ec0ca8_37e4c176",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 32
      },
      "lineNbr": 132,
      "author": {
        "id": 1002130
      },
      "writtenOn": "2024-09-11T10:28:50Z",
      "side": 1,
      "message": "I will change it to a parameter offset, type is uint16_t.",
      "parentUuid": "538007dd_ab7485ee",
      "range": {
        "startLine": 131,
        "startChar": 1,
        "endLine": 132,
        "endChar": 53
      },
      "revId": "4480ce37aecb7f1fcbb045c961ffda1e109ecafb",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}