{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "07cf8cf4_bcb75f9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 7,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "is it tree or PDR ? both of those words seem to be used interchangeably in this commit. are they same or different ? could we use one for consistency ?",
      "range": {
        "startLine": 7,
        "startChar": 43,
        "endLine": 7,
        "endChar": 48
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42c51700_beac5bf3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 7,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07cf8cf4_bcb75f9e",
      "range": {
        "startLine": 7,
        "startChar": 43,
        "endLine": 7,
        "endChar": 48
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "465ab00f_352a7e4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 11,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "could you explain what\u0027s a remote PDR and primary PDR in the commit message? are these words coming from the specification ?",
      "range": {
        "startLine": 11,
        "startChar": 11,
        "endLine": 11,
        "endChar": 40
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f6160a4_33f63880",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 11,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "465ab00f_352a7e4a",
      "range": {
        "startLine": 11,
        "startChar": 11,
        "endLine": 11,
        "endChar": 40
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e70e3fe9_5b0bfced",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Hi Varsha, thanks for the rework. This seems cleaner than previous iterations. I have fewer comments than before, but still some of high concern around the implementation. Some ask for further discussion.",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "468601fa_ebd2f365",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 457,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "nit : contained entity id ?",
      "range": {
        "startLine": 457,
        "startChar": 24,
        "endLine": 457,
        "endChar": 51
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22e2e052_8d14d8d8",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 457,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "468601fa_ebd2f365",
      "range": {
        "startLine": 457,
        "startChar": 24,
        "endLine": 457,
        "endChar": 51
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4defc668_efe6b2c5",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 458,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "nit: container entity id ? \n\nuse of words container \u0026 contained entity id\u0027s would make much sense here since they are documented in the spec ? \n\ndo you think otherwise ?",
      "range": {
        "startLine": 458,
        "startChar": 25,
        "endLine": 458,
        "endChar": 41
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57d18a5c_08ed82b7",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 458,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "agree",
      "parentUuid": "4defc668_efe6b2c5",
      "range": {
        "startLine": 458,
        "startChar": 25,
        "endLine": 458,
        "endChar": 41
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdf9073f_32642e2b",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 462,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "what is the significance of this word `bmc` here ? are there any other handles that we generate out of this stack ?",
      "range": {
        "startLine": 462,
        "startChar": 15,
        "endLine": 462,
        "endChar": 19
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16896c80_52e75e61",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 462,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "I have changed it to pdr_record_handle. bmc_record_handle is a common variable name for record handle throughout this file",
      "parentUuid": "fdf9073f_32642e2b",
      "range": {
        "startLine": 462,
        "startChar": 15,
        "endLine": 462,
        "endChar": 19
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58b727c5_482469d5",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 462,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "yeah we should change those as well , probably in a different commit.",
      "parentUuid": "16896c80_52e75e61",
      "range": {
        "startLine": 462,
        "startChar": 15,
        "endLine": 462,
        "endChar": 19
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9091f0c4_085eacf0",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 464,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "so this assumes that there is already a PDR with the same container entity in the repository ? and we are merely modifying it ? or does it work if we dont have any PDR with the container entity at all ? if so we need to add a little more detail into the @brief section to make things more clear.",
      "range": {
        "startLine": 464,
        "startChar": 12,
        "endLine": 464,
        "endChar": 50
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69d2c4b8_bb5c1462",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 464,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "This works when there is no PDR with the container entity also. In such a case we add the contained entity passed in this API to the association PDR and attach the container entity to it and we will return the event data operation as PDR_ADDED instead of PDR_MODIFIED.",
      "parentUuid": "9091f0c4_085eacf0",
      "range": {
        "startLine": 464,
        "startChar": 12,
        "endLine": 464,
        "endChar": 50
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5d57acf_35a6b533",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 464,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "so this here is inaccurate right ?\n\n\u003e  uint32_t the updated PDR record handle\n\nits not always updated record handle, it can be newly created record handle as well ?",
      "parentUuid": "69d2c4b8_bb5c1462",
      "range": {
        "startLine": 464,
        "startChar": 12,
        "endLine": 464,
        "endChar": 50
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea5f01e8_4484b1f8",
        "filename": "include/libpldm/pdr.h",
        "patchSetId": 18
      },
      "lineNbr": 464,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "do u prefer updated record handle or modified record handle? I dont think we should use new record handle because when we find the container entity inside the entity association PDR the record handle of the contained entity \u003d record handle of the container entity which is not new.",
      "parentUuid": "d5d57acf_35a6b533",
      "range": {
        "startLine": 464,
        "startChar": 12,
        "endLine": 464,
        "endChar": 50
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1d23d68_794fec38",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1304,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Please wrap all comments at the usual column limit.\n\nAlso, please put a space after `/*` and before `*/`. Multi-line `/* */` comments should\n\n```\n/*\n * Look like this\n */\n```\n\nPlease audit the rest of the patch and fix all other instances of the problem.",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f2b6d8_f92913a9",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1304,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "does the record handle change after this function is called ? if so what happens to the older record ? is that deleted or stays in the system ?",
      "range": {
        "startLine": 1304,
        "startChar": 54,
        "endLine": 1304,
        "endChar": 85
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d096c80_fa78f9b0",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1304,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "not sure what this really means, can you elaborate in the comment description itself.",
      "range": {
        "startLine": 1304,
        "startChar": 87,
        "endLine": 1304,
        "endChar": 163
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acdaade2_d385e935",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1304,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "By older record handle do you mean the record handle of the PDR already present in the association PDR? If yes, in line no 1309, the record handle of the PDR parent which matched the parent entity sent will be added as the updated record handle. So in this case record handle present in the system is the handle of new PDR added. No record handle is deleted.",
      "parentUuid": "12f2b6d8_f92913a9",
      "range": {
        "startLine": 1304,
        "startChar": 54,
        "endLine": 1304,
        "endChar": 85
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "802900b9_0d23e9bb",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1304,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1d23d68_794fec38",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "932bd060_291a7884",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1304,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d096c80_fa78f9b0",
      "range": {
        "startLine": 1304,
        "startChar": 87,
        "endLine": 1304,
        "endChar": 163
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61400b77_aa139832",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1307,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Given this is a static function, please add assertions that all these pointers are not `NULL`. In the callers, please add (early-return) conditions that ensure the assertions are upheld prior to invoking this function.\n\nPlease audit the rest of the patch for this concern and fix all other instances.",
      "range": {
        "startLine": 1306,
        "startChar": 1,
        "endLine": 1307,
        "endChar": 20
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95334640_f1379d27",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1307,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61400b77_aa139832",
      "range": {
        "startLine": 1306,
        "startChar": 1,
        "endLine": 1307,
        "endChar": 20
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a665a7_c4488238",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1309,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "it looks like updated_record_handle is initialized with that ever was passed to this function, but that never really is modified, but sent back as return in 1385 ?what is the purpose of it ? did i miss it changing some where else ?",
      "range": {
        "startLine": 1309,
        "startChar": 1,
        "endLine": 1309,
        "endChar": 56
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a4cdc7c_d66811d4",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1309,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "yes updated record handle whatever passed into the function. This can also be added in the calling function and not necessarily here.",
      "parentUuid": "93a665a7_c4488238",
      "range": {
        "startLine": 1309,
        "startChar": 1,
        "endLine": 1309,
        "endChar": 56
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc57e94f_32f4cf16",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1315,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "The implementation here contains no checks or assertions that the formed pointer is valid. That must be fixed.\n\nPlease audit the rest of the patch for this concern and fix all other instances.\n\nFurther, can you please discuss whether there\u0027s an opportunity to use the `msgbuf` APIs throughout to help provide correctness? They provide correct buffer bounds management, alignment and endianness conversions that generate efficient code.",
      "range": {
        "startLine": 1313,
        "startChar": 1,
        "endLine": 1315,
        "endChar": 36
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7bfa2a1_a691a98b",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1315,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Cannot add msgbuf in this case because we need to extract data of type pldm_entity from the msgbuf to get the address of child entity. \nstruct pldm_entity *child \u003d (struct pldm_entity *)(\u0026pdr-\u003echildren[0])\nAbove line needs pdr defined. with msgbuf i cannot get the child pldm_entity",
      "parentUuid": "bc57e94f_32f4cf16",
      "range": {
        "startLine": 1313,
        "startChar": 1,
        "endLine": 1315,
        "endChar": 36
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "791d4691_05a047e8",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1315,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:15:27Z",
      "side": 1,
      "message": "As requested above, please don\u0027t mark discussion threads as resolved until we have consensus on a direction. As the original commenter, I don\u0027t feel like consensus has been achieved.\n\n\u003e Cannot add msgbuf in this case because we need to extract data of type pldm_entity from the msgbuf to get the address of child entity.\n\u003e struct pldm_entity child \u003d (struct pldm_entity )(\u0026pdr-\u003echildren[0])\n\u003e Above line needs pdr defined. with msgbuf i cannot get the child pldm_entity\n\nThe `msgbuf` APIs provide a generic and ergonomic means for packing and unpacking serialised message types, with correct handling of buffer bounds and value endianness with reasonable performance. If you need access to the child data it too can be unpacked. Other uses of `msgbuf` already demonstrate unpacking of nested data, for example:\n\nhttps://github.com/openbmc/libpldm/blob/main/src/platform.c#L253-L292\n\nUsing this one concern to dismiss using `msgbuf` everywhere doesn\u0027t sit well with me.\n\nUnless there\u0027s exceptional justification to the contrary, I\u0027m going to require use of `msgbuf` for any new code touching data encoded in the PLDM wire format.",
      "parentUuid": "f7bfa2a1_a691a98b",
      "range": {
        "startLine": 1313,
        "startChar": 1,
        "endLine": 1315,
        "endChar": 36
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ef262a6_b9d2b8fb",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1315,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "791d4691_05a047e8",
      "range": {
        "startLine": 1313,
        "startChar": 1,
        "endLine": 1315,
        "endChar": 36
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49c738ed_01a11e2e",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1315,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ef262a6_b9d2b8fb",
      "range": {
        "startLine": 1313,
        "startChar": 1,
        "endLine": 1315,
        "endChar": 36
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4346963_54c6d7d2",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1319,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "You\u0027re returning a negative value here, but the return type is `uint32_t`. That invokes clause 2 of 6.3.1.3 in the C23 (draft) spec (to pick one):\n\n\u003e 6.3.1.3 Signed and unsigned integers\n\u003e 1. When a value with integer type is converted to another integer type other than bool, if the value can be represented by the new type, it is unchanged.\n\u003e\n\u003e 2. Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more than the maximum value that can be represented in the new type until the value is in the range of the new type.64)\n\nWe have:\n\n```\n$ errno -l | grep ENOMEM\nENOMEM 12 Cannot allocate memory\n```\n\nSo perhaps you\u0027re returning `-12` here. By the spec statements above, that yields e.g. `(-12 + UINT32_MAX + 1)`, which is not a number that anyone will expect.\n\nPlease fix the return type so that it can cope with error values. Either use a larger signed value representation, or just use `int` to indicate success or failure, and take the record handle as an out-parameter to the function.\n\nPlease audit the rest of hte patch for the concern and fix all other instances.",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "685941af_f5b01577",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1319,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Using assert has taken care of this issue. we no longer return ENOMEM or EINVAL for this change",
      "parentUuid": "a4346963_54c6d7d2",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a741635_d5ca2eeb",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1319,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:15:27Z",
      "side": 1,
      "message": "You must not use `assert()` for error handling. If you\u0027re doing dynamic memory allocation with `malloc()` then you must handle the `NULL` case as an error.",
      "parentUuid": "685941af_f5b01577",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7839e870_ee23b979",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1319,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "This feedback is taken care of when we change the return type of the function from unt32_t to int. We return error codes for error handling now",
      "parentUuid": "5a741635_d5ca2eeb",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c778677_f49c8f1b",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1319,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Thanks. So far the implementation is looking a _lot_ better 😊",
      "parentUuid": "7839e870_ee23b979",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f19272_2a4d6b2b",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Which endianness is this size member? On line 1329 we\u0027re setting a size member to LE32, and now I\u0027m worried.\n\nFurther, what evidence do we have that this won\u0027t overflow? There are no checks or assertions.",
      "range": {
        "startLine": 1321,
        "startChar": 27,
        "endLine": 1321,
        "endChar": 39
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03d84f42_1bfcdd09",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "1. since the record-\u003esize is the size of a record already present in the entity association PDR, it is already in the correct endianness format. Because new_record-\u003esize is the size of a new record being added we need to take of care that it has the correct endianness.\n\n2. I have used assert to check for overflows and memory allocation issues throughout the changes made by me for this commit. Assert has been used to validate input parameters and malloc",
      "parentUuid": "d4f19272_2a4d6b2b",
      "range": {
        "startLine": 1321,
        "startChar": 27,
        "endLine": 1321,
        "endChar": 39
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1cdc801_7cd8fd8f",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:15:27Z",
      "side": 1,
      "message": "You\u0027re using a value specifically encoded as LE32 in a calculation executed in host-endianness. What happens if libpldm is used on a big-endian system?",
      "parentUuid": "03d84f42_1bfcdd09",
      "range": {
        "startLine": 1321,
        "startChar": 27,
        "endLine": 1321,
        "endChar": 39
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e5affff_b28f216f",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "This still needs to be addressed.",
      "parentUuid": "f1cdc801_7cd8fd8f",
      "range": {
        "startLine": 1321,
        "startChar": 27,
        "endLine": 1321,
        "endChar": 39
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c478400a_a81788fe",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1321,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-08T02:25:06Z",
      "side": 1,
      "message": "can we discuss how we can approach this?- can we add #ifdef or #define IS_BIG_ENDIAN to make sure this part is error free on both little endian or big endian systems?",
      "parentUuid": "9e5affff_b28f216f",
      "range": {
        "startLine": 1321,
        "startChar": 27,
        "endLine": 1321,
        "endChar": 39
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "047bfc3f_7c5c80dd",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1332,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "wrapping needed here as well.",
      "range": {
        "startLine": 1332,
        "startChar": 1,
        "endLine": 1332,
        "endChar": 104
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99858077_35504733",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1332,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "047bfc3f_7c5c80dd",
      "range": {
        "startLine": 1332,
        "startChar": 1,
        "endLine": 1332,
        "endChar": 104
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfbde3c2_9d0f8cb0",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Is this an operation we do elsewhere? Can we extract it to its own function if so?\n\nPlease discuss whether there other opportunities for this strategy as well with respect to the code that follows.",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f262f7e2_3ba3c9ba",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfbde3c2_9d0f8cb0",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc716c10_986d5285",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-22T08:36:53Z",
      "side": 1,
      "message": "how many max children that can be added in an entity association PDR ? as per the spec ? without a check for that adding more children here could result in a spec violation right ?",
      "range": {
        "startLine": 1367,
        "startChar": 1,
        "endLine": 1370,
        "endChar": 62
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "335ae1d8_6062b87c",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "yes it should be a violation. I have not come across the maximum value but the num of children is of type uint8 so I think we cannot have more than 255 children. Adding a check here needs further discussion because -\n1. just doing if(children\u003cmax_children) here or in the calling function is not enough, we need to return an error back to PLDM\n2. This API return uint32_t so how can we return error back to PLDM to indicate that the new entity is not added and the association PDR is not modified?",
      "parentUuid": "cc716c10_986d5285",
      "range": {
        "startLine": 1367,
        "startChar": 1,
        "endLine": 1370,
        "endChar": 62
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ecc70ee_0e21abcd",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-04-02T12:41:28Z",
      "side": 1,
      "message": "please dont mark things as resolved without getting consensus.\n\nusing uint32_t as return type was your design choice right ? its not a hard and fast rule to just have uint32_t as return type. Yes, the API needs to be changed, so that it can return an ERROR back to the consumers stating that (cannot assume that this API always works right ? since there could be a spec violation)",
      "parentUuid": "335ae1d8_6062b87c",
      "range": {
        "startLine": 1367,
        "startChar": 1,
        "endLine": 1370,
        "endChar": 62
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed61e7c6_3da8dfbe",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1370,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-12T05:40:00Z",
      "side": 1,
      "message": "I can address this now because we have decided to change the return type of the function. So now we will return PLDM_ERROR error trace if the number of children is more than 255.",
      "parentUuid": "3ecc70ee_0e21abcd",
      "range": {
        "startLine": 1367,
        "startChar": 1,
        "endLine": 1370,
        "endChar": 62
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59411f72_ead94bba",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1473,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "You must add tests to validate all caller-provided values. There is an opportunity for a trivial NULL deref, for instance, as there\u0027s no test for the validity of `event_data_op`.\n\nPlease audit the other parameters for the same problem.",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13f30349_c7ea7d6a",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1473,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "I am checking event_data_op and other parameters with an assert and early return for NULL cases. Also added a check for the value of event_data_op in the unit tests",
      "parentUuid": "59411f72_ead94bba",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "691aa1b7_5c4a5807",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1480,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Why do we know this cast is valid? What assurance do we have that the type is in-bounds of the buffer pointed-to by the `data` member?\n\nAn error must be returned if this is not a valid construction.\n\nPlease audit the rest of the patch for this concern and fix all other instances.",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac66cee1_641ca325",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1480,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "used pldm_platform_pdr_hdr_validate to check if the header will be in-bound. I did not see this function used inside pdr.c anywhere else, but I thought this meets the use case.",
      "parentUuid": "691aa1b7_5c4a5807",
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "372b352a_e593529b",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1491,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "Please extract this condition to a static function that returns `bool` to improve readability.",
      "range": {
        "startLine": 1487,
        "startChar": 7,
        "endLine": 1491,
        "endChar": 35
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f0a20a9_1cccabf3",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1491,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "372b352a_e593529b",
      "range": {
        "startLine": 1487,
        "startChar": 7,
        "endLine": 1491,
        "endChar": 35
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9087d77c_d9c4c454",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-22T02:19:35Z",
      "side": 1,
      "message": "This needs error handling.",
      "range": {
        "startLine": 1493,
        "startChar": 1,
        "endLine": 1498,
        "endChar": 5
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47c03869_09e14d36",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-03-26T20:48:03Z",
      "side": 1,
      "message": "if the PDR is not added to the existing entity association PDR then the updated record will be returned as 0. If the called PLDM function see that updated record handle is 0 we can log an error there. I feel we dont need to do any error handling for this section inside LIBPLDM",
      "parentUuid": "9087d77c_d9c4c454",
      "range": {
        "startLine": 1493,
        "startChar": 1,
        "endLine": 1498,
        "endChar": 5
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e75dc30_a0c523c5",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-03-28T00:15:27Z",
      "side": 1,
      "message": "You were doing a dynamic memory allocation in `pldm_entity_association_pdr_add_contained_entity_to_remote_pdr()`, which may fail.",
      "parentUuid": "47c03869_09e14d36",
      "range": {
        "startLine": 1493,
        "startChar": 1,
        "endLine": 1498,
        "endChar": 5
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2625bae8_95fa7fe4",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-16T06:49:47Z",
      "side": 1,
      "message": "this is removed with the latest patchset",
      "parentUuid": "1e75dc30_a0c523c5",
      "range": {
        "startLine": 1493,
        "startChar": 1,
        "endLine": 1498,
        "endChar": 5
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7918e8af_9efb6114",
        "filename": "src/pdr.c",
        "patchSetId": 18
      },
      "lineNbr": 1498,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2625bae8_95fa7fe4",
      "range": {
        "startLine": 1493,
        "startChar": 1,
        "endLine": 1498,
        "endChar": 5
      },
      "revId": "46ab6ee42ef69161f60ad4422ffcb8813ef12929",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}