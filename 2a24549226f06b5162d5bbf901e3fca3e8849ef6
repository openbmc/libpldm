{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d21e55cc_3c1587d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "Hi Thu, I have a problem with the decode API\u0027s handling of the `event_data` buffer. I don\u0027t think it\u0027s a particularly safe API, so I\u0027m marking this as -1 for now. We can discuss how to fix it.\n\nThere\u0027s also an issue of trying to define a struct with a flexible array member that is not the last member of the struct. That must also be fixed.\n\nOther than that I\u0027ve tried to clarify where you do and don\u0027t need to check the return value of the `pldm_msgbuf_insert()` and `pldm_msgbuf_extract()` APIs. Checking their return value is only necessary if the following code dereferences the pointer under which the extracted value was placed. There\u0027s no need to check the return code if the pointer is not dereferenced, which helps improve readability.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b2e393c_a260d81d",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 13
      },
      "lineNbr": 1035,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "Are you trying to put a flexible array in the middle of a struct definition? Because we really must not do that. Per the standard they must be the last member of a struct. Defining a flexible array member with a length of 1 is undefined behaviour, defining one in the middle of the struct is too much.\n\nEither order `event_data_integrity_checksum` before `event_data` (the order of the members in the struct is less relevant now we use the msgbuf abstraction internally rather than casting packed structs), or remove `event_data_integrity_checksum` entirely.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "591dbfde_c9fd7421",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 13
      },
      "lineNbr": 1035,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Yes. I planed to create a flexible array in the middle of a struct definition. I based on the response data in DSP0248 of PollForPlatformEventMessage command to create the struct.\nAbout moving event_data_integrity_checksum before event_data, I don\u0027t think it is reasonable we should not change the order of struct fields which reflect response data.\n\nI thinks there are two options for this issue:\nOption 1: Remove event_data_integrity_checksum fields (as your comment).\nOption 2: I will removed this struct. We can do this because\n1. After refactor the code to use msgbuf extract/insert we don\u0027t use type casting.\n2. In the old code, this struct is packed structs and the response message is also packed data. If we change the struct to non-packed struct, we can\u0027t use type casting with response message payload. So removing this struct is reasonable.\n\nLet discuss which option should we choose. I will chose option 1.",
      "parentUuid": "6b2e393c_a260d81d",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da8adae_d0c3d511",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 13
      },
      "lineNbr": 1035,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T23:37:40Z",
      "side": 1,
      "message": "I\u0027d prefer we do 2 and not add to the ABI surface of the library if we don\u0027t have to.\n\nThe struct definition can never be correct in its current form if `event_data_size` is greater than 1. We cannot add this struct in its current form.",
      "parentUuid": "591dbfde_c9fd7421",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65a05ec7_e4d9697b",
        "filename": "include/libpldm/platform.h",
        "patchSetId": 13
      },
      "lineNbr": 1035,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-27T16:21:11Z",
      "side": 1,
      "message": "Removed the added struct.",
      "parentUuid": "8da8adae_d0c3d511",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98c77de6_28a7d919",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2118,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "Because `pldm_msgbuf_insert_data()` ensures an overflow will never occur in practice we can batch the tests up. That allows the code to be written as follows while still being correct:\n\n```\n    pldm_msgbuf_insert_data(buf, format_version);\n    pldm_msgbuf_insert_data(buf, transfer_operation_flag);\n    pldm_msgbuf_insert_data(buf, data_transfer_handle);\n    pldm_msgbuf_insert_data(buf, event_id_to_acknowledge);\n    \n    return pldm_msgbuf_destroy(buf);\n```",
      "range": {
        "startLine": 2098,
        "startChar": 0,
        "endLine": 2118,
        "endChar": 33
      },
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7a1b74d_b26bef57",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2118,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Updated.",
      "parentUuid": "98c77de6_28a7d919",
      "range": {
        "startLine": 2098,
        "startChar": 0,
        "endLine": 2118,
        "endChar": 33
      },
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2dda5cf_b0f106a7",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2145,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test is necessary because we dereference `completion_code` below on 2148.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b005dd7d_48cf226f",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2145,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Updated.",
      "parentUuid": "e2dda5cf_b0f106a7",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3691a752_90c4a47d",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2153,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test is not necessary as we do not dereference `tid` in the code below.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6d8a403_83a3b956",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2153,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Removed the checking.",
      "parentUuid": "3691a752_90c4a47d",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14213024_2bacaa72",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2158,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test is necessary because we dereference `event_id` on line 2161 below.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d54ee145_6a1ff0a5",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2158,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Updated.",
      "parentUuid": "14213024_2bacaa72",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c488025_30201678",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2166,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test isn\u0027t necessary as we do not dereference `next_data_transfer_handle` in the code below.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73eb52c8_2657b8ce",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2166,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "4c488025_30201678",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30b181b1_cbc94401",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2171,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test is necessary because we dereference `transfer_flag on lines 2193 and 2194 below.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dd386e6_0f426786",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2171,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "30b181b1_cbc94401",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf1454c5_ff5db4eb",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2176,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test is not necessary as we do not dereference `event_class` in the code below.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbcaa68d_4db81168",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2176,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Removed the checking.",
      "parentUuid": "bf1454c5_ff5db4eb",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05222ac4_855c6e01",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2181,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "This test is necessary because we dereference `event_data_size` on line 2185 below.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "147d8946_8142ce81",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2181,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "05222ac4_855c6e01",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ff9e919_6bc6e688",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2186,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "How do we know the caller-provided `event_data` buffer is large enough to contain the extracted event data? It must be at least `event_data_size`, but the caller doesn\u0027t know the value of `event_data_size` before calling the function.",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "305e9a5d_92643987",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2186,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "event_data will be inited with payload_length size before send to decode functions. payload_length is known value of one response message.\nI also added checking\n\tif (*event_data_size \u003e payload_length) {\n\t\treturn PLDM_ERROR_INVALID_DATA;\n\t}\nbefore extract event_data.",
      "parentUuid": "9ff9e919_6bc6e688",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef9e3817_17a12895",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2186,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T23:49:06Z",
      "side": 1,
      "message": "Who is responsible for allocating the `event_data` buffer though? Is the only caller `libpldm` itself where we can guarantee it\u0027s the correct size? If so, why is this function part of the public API of the library? If not, and consumers of `libpldm` are expected to call the function, then you have to assume they will use it incorrectly. It doesn\u0027t do anything to mitigate failure to pay attention to the requirement.\n\nHere\u0027s a good resource on API design - Rusty\u0027s API scale:\n\n1. [How Do I Make This Hard to Misuse?](https://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html)\n2. [What If I Don\u0027t Actually Like My Users?](https://ozlabs.org/~rusty/index.cgi/tech/2008-04-01.html)\n\nI think at best this scores a `3. Read the documentation and you\u0027ll get it right.`\n\n\u003e    People only read instructions after they\u0027ve already tied themselves into a knot. Then they skim them for keywords and don\u0027t read your warnings. I don\u0027t give an example of this; if this is the best an interface can get do, it\u0027s in trouble.\n\n\"after they\u0027ve already tied themselves into a knot\" in this case is the discovery of memory corruption at runtime, in which case they\u0027ve already lost.\n\nLet\u0027s figure out how to do better.\n\nOne approach would be to pass the size of the caller-provided buffer as an argument and not conflate that with `payload_size`.\n\nAnother option would be to pass a double pointer (`void **event_data`) and have the implementation heap-allocate the required space (`*event_data \u003d malloc(event_data_size);`)",
      "parentUuid": "305e9a5d_92643987",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d85b0d31_b0000420",
        "filename": "src/platform.c",
        "patchSetId": 13
      },
      "lineNbr": 2186,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-27T16:21:11Z",
      "side": 1,
      "message": "I updated the function to pass double point void **event_data to functions.",
      "parentUuid": "ef9e3817_17a12895",
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bc3a23c_22a2d1c5",
        "filename": "tests/libpldm_platform_test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1224,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-26T00:01:50Z",
      "side": 1,
      "message": "Either don\u0027t initialise these at all, or initialise them to zero. Otherwise it\u0027s difficult to tell whether the test succeeded?",
      "range": {
        "startLine": 1221,
        "startChar": 0,
        "endLine": 1224,
        "endChar": 43
      },
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7767c513_c40a54e1",
        "filename": "tests/libpldm_platform_test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1224,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-04-26T08:01:12Z",
      "side": 1,
      "message": "Updated.",
      "parentUuid": "2bc3a23c_22a2d1c5",
      "range": {
        "startLine": 1221,
        "startChar": 0,
        "endLine": 1224,
        "endChar": 43
      },
      "revId": "2a24549226f06b5162d5bbf901e3fca3e8849ef6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}