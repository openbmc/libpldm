{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cc84caa6_1a55cdbb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Fewer comments this time, looks like we\u0027re converging on something we can merge!",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b42695c_c1859b27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "Half-way through the review, will post any more comments by EOD.",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d321ff4_6268e321",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:24:09Z",
      "side": 1,
      "message": "Thanks Tom. I didn\u0027t see this before I posted my changes so I\u0027ll address your feedback tomorrow.",
      "parentUuid": "6b42695c_c1859b27",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4616aeff_76cd5299",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "These response codes don\u0027t have documentation around them, consider adding them?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e92f66cb_3b63cfaa",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "Documenting response codes should probably be in a separate patch from this one - there is enough going on here.",
      "parentUuid": "4616aeff_76cd5299",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccefde3f_ddec7ed8",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "How is the error handled if there any registered transports, since the return is void?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd8379f0_aa18834b",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "At this stage it isn\u0027t. I guess we could change the return type, check for registered transports and fail if there are any.",
      "parentUuid": "ccefde3f_ddec7ed8",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f70e08c_ebdb38b3",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "Let\u0027s take the forward-looking approach and make it return an int.",
      "parentUuid": "cd8379f0_aa18834b",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "439379ed_d607660e",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 134,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "Better to call this parameter core or pldm_core, variable name pldm seemed vague over here.",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aba02960_96da539c",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 134,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "I think you\u0027re right, and that we should actually generalise your point. I think we change the function names to all be prefixed with `pldm_requester`. From there I think we can switch the parameter name to `ctx` (context) to keep things brief:\n\n```\nstruct pldm_requester *pldm_requester_init(void);\nint pldm_requester_destroy(struct pldm_requester *ctx);\npldm_requester_rc_t pldm_requester_register_transport(struct pldm_requester *ctx, struct pldm_transport *transport);\n...\n```\n\netc.\n\nAudit the rest of the API to address this.\n\nPS: Also I\u0027d `s/core/instance/` in the documentation.",
      "parentUuid": "439379ed_d607660e",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c4a66ba_41624650",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "Use cases like dynamic device discovery, means removing unregistering individual transports, is it in the scope?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0895c27b_0ac48904",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "It would be straightforward to add a function to unregister individual transports, so this can be added if and when we need it? \n\nWhile this is a trivial example, I\u0027d rather not add in code paths now that we don\u0027t use just because we might need it later. Then we run the risk of defining an API now that is not suitable or buggy in some way (as it\u0027s not used now) and having to redefine/change/fix it later when we do need it.",
      "parentUuid": "7c4a66ba_41624650",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10890a93_8a16408d",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "I agree with Rashmica here. We can add that API when we have a specific use for it. For now we just need to convince ourselves that it\u0027s possible to implement in the future, and I can\u0027t see any reason why it wouldn\u0027t be.",
      "parentUuid": "0895c27b_0ac48904",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fccce119_3e6953b9",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 164,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "What is async msg, in the scope of sync API?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a6196dd_68a65176",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 164,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "Right, I see how this is confusing. I wanted to make it clear that we accept not just PLDM request messages but any PLDM message if the Rq bit is one, which are called \u0027asynchronous notifications\u0027 in the PLDM spec. \n\nSo it\u0027s async in terms of the PLDM spec rather than how the consumer uses the API.\n\nDoes my change - \"PLDM request msg or async notification\" - make that clearer? Or do you think we need to be even more explicit and mention the Rq bit?",
      "parentUuid": "fccce119_3e6953b9",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "735a0894_8bd3b08d",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "That\u0027s fair given that messages can be a variable length, but they do have a fixed-length component - the PLDM header. That\u0027s 3 bytes, so what\u0027s the behaviour if req_msg_len is less than 3? Can we instead state that we\u0027ll return an error in that case?\n\nAdjust the remainder of the documentation based on the decision here.",
      "range": {
        "startLine": 166,
        "startChar": 54,
        "endLine": 167,
        "endChar": 53
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0d50d38_cb4c797c",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "+1 \n\nI guess we should return PLDM_REQUESTER_NOT_REQ_MSG \u003d -4, if it is less than 3+ bytes. \n\nIn the scope of this function, we need to call out when we will have behavior undefined, otherwise appropriate pldm_requester_codes will be returned.",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bccab989_d208dcc8",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "That seems like a reasonable check to add in. \n\n\u003e  Can we instead state that we\u0027ll return an error in that case?\nI\u0027m not sure it\u0027s an instead of situation here though. The behaviour is still undefined in the case where the size given is bigger than the pldm message?",
      "parentUuid": "735a0894_8bd3b08d",
      "range": {
        "startLine": 166,
        "startChar": 54,
        "endLine": 167,
        "endChar": 53
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b91bbf6d_d7010b75",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "\u003e I guess we should return PLDM_REQUESTER_NOT_REQ_MSG \u003d -4, if it is less than 3+ bytes.\n\nGood point. Done.\n\n\u003e In the scope of this function, we need to call out when we will have behavior undefined, otherwise appropriate pldm_requester_codes will be returned.\n\nCan you clarify what you mean? Haven\u0027t I done that?",
      "parentUuid": "c0d50d38_cb4c797c",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efdb1317_ea8a9911",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bccab989_d208dcc8",
      "range": {
        "startLine": 166,
        "startChar": 54,
        "endLine": 167,
        "endChar": 53
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc192e89_2ea38653",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "Why return PLDM_REQUESTER_INSTANCE_ID_MISMATCH, since the expectation is only for a matching TID and InstanceId?\n\nThe value this API provides is instance_id check compared to pldm_recv_msg_any?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9adb4c60_6a9118df",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "\u003e Why return PLDM_REQUESTER_INSTANCE_ID_MISMATCH, since the expectation is only for a matching TID and InstanceId?\n\nGood catch. \n\n\u003e The value this API provides is instance_id check compared to pldm_recv_msg_any?\n\nYep. An app that sends a singular request and waits for the response would likely use pldm_recv_msg. An app that sends multiple requests off before getting responses might want to use pldm_recv_msg_any.",
      "parentUuid": "fc192e89_2ea38653",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f9e90ce_7a8a9b67",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "The key point of this API is the pushing the responsibility of maintaining a queue of unprocessed messages into the library. If the caller wishes to maintain the queue themselves they can use `pldm_recv_msg_any()` as `@Rashmica Gupta` pointed out.\n\nThe current behaviour does not implement this queue and simply discards the message on IID mismatch. `@Rashmica Gupta` has written the documentation such that we can define a useful behaviour in the future (retaining and queuing the messages) while still allowing for the current behaviour of discarding mismatching messages.",
      "parentUuid": "fc192e89_2ea38653",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daed0da4_f55f06a0",
        "filename": "include/libpldm/requester/transport-mctp-demux.h",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Still need to remove the underscore.",
      "range": {
        "startLine": 2,
        "startChar": 8,
        "endLine": 2,
        "endChar": 9
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d38afd63_bb51ba6b",
        "filename": "include/libpldm/requester/transport-mctp-demux.h",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "daed0da4_f55f06a0",
      "range": {
        "startLine": 2,
        "startChar": 8,
        "endLine": 2,
        "endChar": 9
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "123dab62_e56511ba",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "The function prototype needs to declare its arguments as `void`, i.e.\n\n```\nstruct pldm_requester *pldm_init(void)\n{\n...\n```",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "082e0783_5b95f2d7",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "123dab62_e56511ba",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7886b16b_c51f3c20",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "A trick you can use here is that `sizeof()` can infer the type from a variable, so instead of passing the type directly and having the same on both the left and right of the assignment, we can rewrite this as:\n\n```\nstruct pldm_requester *pldm \u003d calloc(sizeof(*pldm), 1);\n```\n\nThe other part of the trick is that `sizeof()` is guaranteed not to evaluate the expression, only its type, which means we\u0027re not actually dereferencing an undefined pointer value there.\n\nThe other benefit is that if the type of `pldm` changes you don\u0027t have a memory safety hazard, the allocation will always be the right size of the type of the variable (i.e. deals with the case where you somehow end up with different types on the left and right of the assignment operator).\n\nHOWEVER:\n\n(see next comment)",
      "range": {
        "startLine": 22,
        "startChar": 45,
        "endLine": 22,
        "endChar": 66
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab9e1812_9ce73333",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7886b16b_c51f3c20",
      "range": {
        "startLine": 22,
        "startChar": 45,
        "endLine": 22,
        "endChar": 66
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f6fc987_156fe5d6",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "The final trick is that this is redundant, as if `!pldm` holds then it\u0027s inferred that `pldm \u003d\u003d NULL`, in which case we can also write `return pldm`. With that we can collapse the implementation to:\n\n```\nstruct pldm_requester *pldm_init(void)\n{\n    return calloc(sizeof(struct pldm_requester), 1);\n}\n```",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 25,
        "endChar": 13
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71cd7972_8149f62e",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 25,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Thanks for explaining that. This is much easier to read as well.",
      "parentUuid": "4f6fc987_156fe5d6",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 25,
        "endChar": 13
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa2e6046_8e28e6b8",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 112,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Need to be careful here as this becomes a tight loop if `pldm_recv_msg()` doesn\u0027t block.\n\nI expect we actually need to introduce a `pldm_wait()` analogous to e.g. `sd_bus_wait()`: https://www.man7.org/linux/man-pages/man3/sd_bus_wait.3.html",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "164540f7_3710a5b8",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 112,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa2e6046_8e28e6b8",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fbb862a_ceb3dc7d",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 178,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-02-07T07:01:54Z",
      "side": 1,
      "message": "why is this not a function?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af2e01d8_5d7e0b16",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 178,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-08T05:47:36Z",
      "side": 1,
      "message": "This takes in a function with arbitrary type so it has to be a macro.\n\nOr did you mean \u0027why does this macro exist\u0027? It exists because the setup and teardown required to implement the old API in terms of the new API was the same for the four send/recv functions. This makes it clear that we\u0027re doing the same thing in each function as well as reduces the code you need to read to understand what is happening.",
      "parentUuid": "9fbb862a_ceb3dc7d",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a663373_4c1d8891",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 178,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "Can you please add this explanation in the source comment above the `#define`?",
      "parentUuid": "af2e01d8_5d7e0b16",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea525576_ca233cc7",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Add another newline below this one just to separate the comment below from the macro body",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d96adc80_c0dfdbe2",
        "filename": "src/requester/pldm.c",
        "patchSetId": 11
      },
      "lineNbr": 220,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea525576_ca233cc7",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a0ce74e_816b49fe",
        "filename": "src/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "This should match the file path",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 23
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22b05486_b23580fd",
        "filename": "src/requester/pldm.h",
        "patchSetId": 11
      },
      "lineNbr": 1,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a0ce74e_816b49fe",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 23
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a1d45c7_afcdf5ff",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 41,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Compilers will warn about assignment vs comparison these days, so let\u0027s avoid yoda conditions and use the more natural formulation:\n\n```\nif (fd \u003d\u003d -1)\n{\n...\n```\n\nAudit the rest of the file for this also.",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 13
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f32b26d_160cde1d",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 41,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a1d45c7_afcdf5ff",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 13
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90665339_d49abe2f",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Given the commentary about `pldm_wait()` elsewhere, I wonder if we make this more generic and take a `struct pldm_transport *` here and hoist ourselves out in the implementation with `transport_to_demux()`.\n\nThis would allow us to have a generic implementation of `pldm_wait()` by having backends optionally supply an `init_pollfd()` function pointer in `struct pldm_transport`.",
      "range": {
        "startLine": 62,
        "startChar": 49,
        "endLine": 62,
        "endChar": 74
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05bd7d48_5f561b4c",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:24:09Z",
      "side": 1,
      "message": "Thoughts on what I\u0027ve added (pldm_wait_for_message)?",
      "parentUuid": "90665339_d49abe2f",
      "range": {
        "startLine": 62,
        "startChar": 49,
        "endLine": 62,
        "endChar": 74
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b95334e_b8bb6b97",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "`pldm_transport_mctp_demux_get_eid()` (currently missing `_demux`)",
      "range": {
        "startLine": 70,
        "startChar": 11,
        "endLine": 70,
        "endChar": 38
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af134688_eb620bc0",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b95334e_b8bb6b97",
      "range": {
        "startLine": 70,
        "startChar": 11,
        "endLine": 70,
        "endChar": 38
      },
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ed3de8e_9b7d3b5d",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Unnecessary assignment, `ctx` is a local.",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "892c3aca_40eb8dc9",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3ed3de8e_9b7d3b5d",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7bcd861_4478c300",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 227,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Maybe add a comment here that the `dup()` is so we can unconditionally close the fd in `pldm_transport_mctp_demux_destroy()` as the held fd is then always managed by the implementation.",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6d7b0f3_d6a0c0cb",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 227,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7bcd861_4478c300",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a832b53d_a1144841",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-06T22:27:57Z",
      "side": 1,
      "message": "Is `-1` reasonable here?",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e224160c_d1a61f82",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-07T10:10:22Z",
      "side": 1,
      "message": "I thought so given that other functions that return fds (eg open, socket) return -1 on error. Or we could change the return type to pldm_requester_rc_t and return the new error code I was thinking we could have (PLDM_REQUESTER_INVALID_SETUP) which I accidentally pushed in my last patch.",
      "parentUuid": "a832b53d_a1144841",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "652e27ae_30935fa1",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T00:08:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e224160c_d1a61f82",
      "revId": "e3ae76ef82d6cdcc8738f0ff4acbb9bf1e761d46",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}