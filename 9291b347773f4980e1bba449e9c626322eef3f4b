{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3bb868a5_e7e9a60c",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-18T00:27:33Z",
      "side": 1,
      "message": "This shouldn\u0027t be a pointer, rather a proper `struct variable field` object. Just populate the `ptr` member with the pointer into the message buffer, and then populate the `length` member appropriately.",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a3339c_b5eeb2c8",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-18T03:09:36Z",
      "side": 1,
      "message": "Acknowledged. Please help review my edit. At first I removed the `uint32_t data_length;` field to avoid duplication with the `length` field in the variable_field struct. But `pldm_msgbuf_extract` does not work with `size_t` so it needs casting and breaks the macro with `error: lvalue required as unary ‘\u0026’ operand`, which led me to directly using `pldm__msgbuf_extract_uint32`. I think this is not good, so now I define a local uint32_t var to hold the data length from extraction and assign it back to `length` for use. Both ways seem to make the function be aware of the data type of data length (an element of the struct), I don\u0027t know if I should put data_length back to the struct.",
      "parentUuid": "3bb868a5_e7e9a60c",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98bcc6d2_b38dcb29",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-18T04:13:23Z",
      "side": 1,
      "message": "Are you interested in working on adding e.g. a `pldm_msgbuf_extract_uint32_size()` API? I was also considering that recently after hitting similar limitations with the existing msgbuf APIs. I think that would make the code more ergonomic.",
      "parentUuid": "c6a3339c_b5eeb2c8",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6442c4e2_ba3e56b9",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-18T06:05:22Z",
      "side": 1,
      "message": "\u003e #define pldm_msgbuf_extract_uint32_size(ctx, dst)                                   \\\n\tpldm__msgbuf_extract_uint32(ctx, (void *)\u0026(dst))\n\t\nDo you mean the above? I think it still requires the encode/decode API to know beforehand about the type of an element in the struct, which can possibly be changed after spec update.",
      "parentUuid": "98bcc6d2_b38dcb29",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20b85a9c_c972a89d",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-19T01:39:14Z",
      "side": 1,
      "message": "\u003e I think it still requires the encode/decode API to know beforehand about the type of an element in the struct, which can possibly be changed after spec update.\n\nThe fanciness to elide the type from the API using the `_Generic` implementation for `pldm_msbguf_extract()` was purely about libpldm programming ergonomics rather than an attempt to deal with spec changes. We know the size of the type we wish to extract because the type of the struct member provides that information. Spec changes to message field types will always be disruptive in some fashion. I\u0027m not concerned about spec changes here.\n\nFor some data in PLDM messages, such as strings, libpldm\u0027s abstractions change them from an abstract field in a message to a concrete buffer in memory on a computer system. In C, the specified type representing an object size is `size_t`, so where possible we should represent buffer sizes using `size_t` in libpldm\u0027s API. However, the object size of `size_t` doesn\u0027t necessarily map to the object size of the length type the DMTF have chosen to encode in a given message, so we will always need to specify the latter.\n\nSo what I was proposing is really a family of new `msgbuf` APIs, such as:\n\n```\nint pldm_msgbuf_extract_uint32_as_size(struct pldm_msgbuf *ctx, size_t *sz);\n```\n\nA rough implementation might look like:\n\n```\nint pldm_msgbuf_extract_uint32_as_size(struct pldm_msgbuf *ctx, size_t *sz)\n{\n    uint32_t length;\n    int rc;\n    \n    if (!sz) {\n        ...\n    }\n    \n    rc \u003d pldm_msgbuf_extract(ctx, length);\n    if (rc) {\n        ...\n    }\n    \n    *sz \u003d length;\n    \n    return 0;\n}\n```\n\nThat is obviously incomplete, and I\u0027d like to take into consideration the improvements in https://gerrit.openbmc.org/c/openbmc/libpldm/+/78866/1. Are you interested writing a patch to properly implement and test `pldm_msgbuf_extract_uint32_as_size()`? For reference on expectations, here\u0027s a patch introducing a new `msgbuf` API (`pldm_msgbuf_span_until()`):\n\nhttps://gerrit.openbmc.org/c/openbmc/libpldm/+/78873/1",
      "parentUuid": "6442c4e2_ba3e56b9",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c374e718_6d399b6e",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-19T03:46:02Z",
      "side": 1,
      "message": "I can try it. How should I easily apply changes upon your existing patches without having to update them every time you push new changes? Btw, I can\u0027t find the command to quickly cherry-pick the whole relation chain, do you have any suggestion? Thanks.",
      "parentUuid": "20b85a9c_c972a89d",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4ce969_d1edc205",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-19T03:53:35Z",
      "side": 1,
      "message": "\u003e I can try it.\n\nGreat!\n\n\u003e How should I easily apply changes upon your existing patches without having to update them every time you push new changes?\n\nHah, well, the best way to sort that out is to get them merged. Are you able to review them?\n\n\u003e Btw, I can\u0027t find the command to quickly cherry-pick the whole relation chain, do you have any suggestion?\n\nHit the `Download` button and copy the `Branch` line:\n\nhttps://gerrit.openbmc.org/Documentation/user-review-ui.html#download",
      "parentUuid": "c374e718_6d399b6e",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e2c417b_a17c7885",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2025-03-19T04:05:08Z",
      "side": 1,
      "message": "Thank you, that helps.\n\n\u003e Are you able to review them?\n\nWill try my best on what is in my capability.",
      "parentUuid": "4f4ce969_d1edc205",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "692d9ab8_799730dc",
        "filename": "include/libpldm/base.h",
        "patchSetId": 11
      },
      "lineNbr": 363,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-03-19T04:07:34Z",
      "side": 1,
      "message": "\u003e Will try my best on what is in my capability.\n\nThanks!",
      "parentUuid": "5e2c417b_a17c7885",
      "revId": "9291b347773f4980e1bba449e9c626322eef3f4b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}