{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9839b44_42b81c44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-16T08:30:34Z",
      "side": 1,
      "message": "@arj we have modified the API design by adding some functionality to PLDM. \nWe will now check if the parent entity is present in the entity association PDR inside PLDM and call pldm_entity_association_pdr_add_contained_entity_to_remote_pdr if the parent entity is present. If it is not present we call pldm_entity_association_pdr_create_new and add both parent and child entity to the association PDR.\n\nEarlier pldm_entity_association_pdr_add_contained_entity_to_remote_pdr  and pldm_entity_association_pdr_create_new were static function , with this new change they are not.",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2150c7f2_0e9e12eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Hi Varsha,\n\nFirstly, this is so much more readable than previous patchsets, thank you for continuing to rework it!\n\nThat said, I still have a number of concerns. See my comments inline.",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b8800b_8919cbfc",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "What assurance do we have that the addition can\u0027t overflow?\n\nDo you need an additional check for the overflow condition?",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2610ce5_93a71461",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 31,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "This API is not required with the latest change",
      "parentUuid": "75b8800b_8919cbfc",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62c63a4d_c1df30b6",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2610ce5_93a71461",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "384d4536_94eb31ec",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "My preferred style for libpldm is not to mix code and variable declarations. Please declare the variables at the top of the function before any further statements (i.e. not like how you have done here, or might do in C++).",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1343,
        "endChar": 37
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "809dba6e_86bc421c",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "384d4536_94eb31ec",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1343,
        "endChar": 37
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd0ef8de_118a42b3",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "809dba6e_86bc421c",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1343,
        "endChar": 37
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce9adf7_314b6134",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1352,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Searching over the records for a specific handle seems like something we should lift out though, mainly to start building a vocabulary over the implementation. `pldm_pdr_find_record_by_handle()`? Make it static for now.",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1352,
        "endChar": 2
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0252e93_ed3cf6bb",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1352,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "I found it hard implementing this comment because inside the static function prev will always be set but not used or initialized but bot used or set but never read.\nPlease suggest",
      "parentUuid": "9ce9adf7_314b6134",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1352,
        "endChar": 2
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b927ac_86373a70",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1352,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "You need to show me what your implementation was in order for me to make any sensible feedback. Please paste the code in a markdown code-block.",
      "parentUuid": "a0252e93_ed3cf6bb",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1352,
        "endChar": 2
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d980df8_3006a004",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1352,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-08T02:25:06Z",
      "side": 1,
      "message": "static bool pldm_pdr_find_record_by_handle(pldm_pdr_record *record,\n                                           pldm_pdr_record *prev,\n                                           uint32_t record_handle)\n{\n        if (!record || !prev) {\n                return false;\n        }\n        while (record !\u003d NULL) {\n                if (record-\u003erecord_handle \u003d\u003d record_handle) {\n                        return true;\n                }\n                prev \u003d record;\n                record \u003d record-\u003enext;\n        }\n        return false;\n}\n\nAdding a function like above makes prev unused inside this API. We do need prev in the caller function so we cannot remove the variable. Compiler complains of \"set but never read\". I was not sure how to best resolve this issue so I added a check on prev inside the while loop. If this is not ok, can you please suggest how to overcome the compile failure or if I can override the check during compilation?",
      "parentUuid": "75b927ac_86373a70",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1352,
        "endChar": 2
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f17c1a21_9c784e54",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1352,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-08T04:42:46Z",
      "side": 1,
      "message": "If you need prev in the caller then you need to pass a pointer-to-pointer right?",
      "parentUuid": "4d980df8_3006a004",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1352,
        "endChar": 2
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bae13f30_f85ffd46",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1352,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T03:41:15Z",
      "side": 1,
      "message": "yes, thank you",
      "parentUuid": "f17c1a21_9c784e54",
      "range": {
        "startLine": 1341,
        "startChar": 1,
        "endLine": 1352,
        "endChar": 2
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "465a187a_bcc24030",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1362,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Okay, some alarm bells here. The processor _has_ to do arithmetic in its own (host, `h`) endianness by definition, therefore this should be `le16toh()` right? `htole16()` and `le16toh()` are _not_ the same as `bswap()`.\n\nMore broadly, this sets off alarm-bells for the whole implementation of the PDR data structures - we should not be storing them in the wire format. However, fixing that is a _much_ bigger change than what you\u0027re trying to achieve with this patch.\n\nPlease read this for some context on my opinions: [Representations and Design Boundaries with Endianness](https://amboar.github.io/notes/2023/06/19/representations-and-design-boundaries-with-endianness.html)",
      "range": {
        "startLine": 1362,
        "startChar": 27,
        "endLine": 1362,
        "endChar": 34
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6064e32e_bfd117b1",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1362,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "To fix this bug I have remove the endian conversion at malloc and covert it only when the value needs to be added to the new record directly",
      "parentUuid": "465a187a_bcc24030",
      "range": {
        "startLine": 1362,
        "startChar": 27,
        "endLine": 1362,
        "endChar": 34
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa101a6d_7092a9ba",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1362,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6064e32e_bfd117b1",
      "range": {
        "startLine": 1362,
        "startChar": 27,
        "endLine": 1362,
        "endChar": 34
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78609793_be1766cf",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1364,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Okay, so this is not a particularly interesting case, but things start to get more complex below as we acquire more resources.\n\nPlease use `goto` for resource cleanup; this will reduce the chance of leaks as much as possible given the constraints of C.\n\nIf you\u0027re after an example of what I\u0027m suggesting, check the use of `goto`s in this patch:\n\nhttps://github.com/amboar/culvert/commit/502ba2008e642fb3188d74f1b57cef41685b46bc",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27324359_037f1081",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1364,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "Adding a goto to free this resource is causing malloc failure. Not sure why adding a goto can be problem , any suggestions?",
      "parentUuid": "78609793_be1766cf",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f29d4fb5_3df9ff24",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1364,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Can you please add more details about what you mean by that? How did you determine that gotos were the cause of a malloc failure? Please paste all evidence somewhere we can reason about it (test cases, log output, the actual patch you wrote to implement the goto approach, anything else relevant).",
      "parentUuid": "27324359_037f1081",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1edca49_bbccfafd",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1364,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-08T02:25:06Z",
      "side": 1,
      "message": "I figured out the issue with my implementation. Added a goto.",
      "parentUuid": "f29d4fb5_3df9ff24",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b139a7a_9452d8b0",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1364,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-08T04:42:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1edca49_bbccfafd",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82bb3677_499ab910",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1371,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "You\u0027ve done an endian conversion on `record-\u003esize` on line 1362, but not here. Regardless of which is correct (and whatever the case, the endian conversion on 1362 is wrong), there is a bug due to the inconsistency.\n\nThis is why I\u0027d rather that all wire-format accesses be done via the `msgbuf` APIs. Admittedly, we would need to make them more ergonomic (add new APIs) for this specific case.",
      "range": {
        "startLine": 1371,
        "startChar": 28,
        "endLine": 1371,
        "endChar": 40
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86b6d2b9_94e1667b",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1371,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "@arj one of your review comments suggest that I should be using the pldm_msg_buf for the record-\u003edata starting from the header. I did that and also used pldm_msgbuf_insert to insert the data to new_record. Therefore, we dont need to worry about incorrect endian conversion.",
      "parentUuid": "82bb3677_499ab910",
      "range": {
        "startLine": 1371,
        "startChar": 28,
        "endLine": 1371,
        "endChar": 40
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aefaec23_aa9d3f84",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1371,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "I\u0027m not convinced by the reasoning here yet, however I\u0027m marking this as done as the context is lost in the most recent patchset. I\u0027ll make further comments on endian correctness as I see fit.",
      "parentUuid": "86b6d2b9_94e1667b",
      "range": {
        "startLine": 1371,
        "startChar": 28,
        "endLine": 1371,
        "endChar": 40
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa8e4f9_07cc7865",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1376,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Why is this cast valid? What assurance do we have that the object pointed-to by `data` is of the appropriate size and doesn\u0027t represent another type?\n\nPlease add necessary runtime checks for errors and assertions for invariants to support your case",
      "range": {
        "startLine": 1376,
        "startChar": 28,
        "endLine": 1376,
        "endChar": 64
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29ed7fc1_cb932b25",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1376,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "This line is not present with the latest change",
      "parentUuid": "1fa8e4f9_07cc7865",
      "range": {
        "startLine": 1376,
        "startChar": 28,
        "endLine": 1376,
        "endChar": 64
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f05e838_8a997849",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1376,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29ed7fc1_cb932b25",
      "range": {
        "startLine": 1376,
        "startChar": 28,
        "endLine": 1376,
        "endChar": 64
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e149a25b_3e181748",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1387,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "I expect this is incorrect wrt endianness as well.",
      "range": {
        "startLine": 1387,
        "startChar": 10,
        "endLine": 1387,
        "endChar": 21
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b62fc2e_fc18acad",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1387,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "new change does not contain this conversion",
      "parentUuid": "e149a25b_3e181748",
      "range": {
        "startLine": 1387,
        "startChar": 10,
        "endLine": 1387,
        "endChar": 21
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a97ae69_8593390e",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1387,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b62fc2e_fc18acad",
      "range": {
        "startLine": 1387,
        "startChar": 10,
        "endLine": 1387,
        "endChar": 21
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0a7e232_a3f30b12",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1388,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "As is this? Is it in host endianness or LE? I feel this is all quite confused.",
      "range": {
        "startLine": 1388,
        "startChar": 10,
        "endLine": 1388,
        "endChar": 28
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "524b5aa8_4fc305f4",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1388,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "new change does not contain this conversion",
      "parentUuid": "f0a7e232_a3f30b12",
      "range": {
        "startLine": 1388,
        "startChar": 10,
        "endLine": 1388,
        "endChar": 28
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34052286_eef1f092",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1388,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "524b5aa8_4fc305f4",
      "range": {
        "startLine": 1388,
        "startChar": 10,
        "endLine": 1388,
        "endChar": 28
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03b2a687_a33d107b",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1392,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Okay, together with the endianness issues above this starts to build the case for implement PDR header handling in the `msgbuf` APIs, as helpers.\n\nLet\u0027s discuss how this might look. Currently I think the buffer should encapsulate the entire encoded message size, and the `msgbuf` helper for the PDR header should encode it into that buffer. That way you can continue to use the same `struct pldm_msgbuf` instance to continue encoding the rest of the entry.",
      "range": {
        "startLine": 1389,
        "startChar": 1,
        "endLine": 1392,
        "endChar": 50
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f14ea21_782ae87c",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1392,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "took this suggestion and used msgbuf on the entire record including the header",
      "parentUuid": "03b2a687_a33d107b",
      "range": {
        "startLine": 1389,
        "startChar": 1,
        "endLine": 1392,
        "endChar": 50
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7260019_120b5e62",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1392,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f14ea21_782ae87c",
      "range": {
        "startLine": 1389,
        "startChar": 1,
        "endLine": 1392,
        "endChar": 50
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "353ab3f6_852a9dcd",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1397,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Please create a `#define` for the size and implement it in terms of a literal value. That way we avoid open-coding a `sizeof()` and can eventually drop the `__attribute__((packed))` without impact here.",
      "range": {
        "startLine": 1397,
        "startChar": 28,
        "endLine": 1397,
        "endChar": 70
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7563440_9cad5eb0",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1397,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "The new change does not require this to be addressed",
      "parentUuid": "353ab3f6_852a9dcd",
      "range": {
        "startLine": 1397,
        "startChar": 28,
        "endLine": 1397,
        "endChar": 70
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee46e5e0_fc7bd296",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1397,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7563440_9cad5eb0",
      "range": {
        "startLine": 1397,
        "startChar": 28,
        "endLine": 1397,
        "endChar": 70
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96027f4b_d27b5e9d",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1417,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Why are we bounce-buffering these through `val_uint{8,16}` if we\u0027re not using `pldm_msgbuf_insert()`? Also if you\u0027re not using a corresponding `pldm_msgbuf_insert()` then the endianness incoherent, so that must be fixed.\n\nTogether this suggests we might need something like `pldm_msgbuf_memcpy()` (where we would avoid endian conversion but continue to enforce buffer limits).",
      "range": {
        "startLine": 1406,
        "startChar": 1,
        "endLine": 1417,
        "endChar": 53
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f5f4edc_aea2ffcb",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1417,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "Used pldm_msgbuf_insert",
      "parentUuid": "96027f4b_d27b5e9d",
      "range": {
        "startLine": 1406,
        "startChar": 1,
        "endLine": 1417,
        "endChar": 53
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "716036cc_cac1db12",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1417,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f5f4edc_aea2ffcb",
      "range": {
        "startLine": 1406,
        "startChar": 1,
        "endLine": 1417,
        "endChar": 53
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2562ce95_85f82a37",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1422,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Is this limit called out in the spec? I assume it is, or is implied by some specific section?",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7574fb02_77d8c21e",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1422,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "num_children is of type uint8. Added a check here so we don\u0027t have undefined behaviour when we call this API to add another child if the number of children is already 255. This is not checked anywhere else. The SPEC only specifies that the type is uint8",
      "parentUuid": "2562ce95_85f82a37",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e580696e_eb0e4b56",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1422,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7574fb02_77d8c21e",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07958893_3d90decd",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1438,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "You _must_ test the return value of this function. The return value determines whether what you\u0027ve done is coherent. If it\u0027s not then there\u0027s no sensible way forward and you must return the error (and do appropriate resource cleanup).\n\nPlease audit the rest of the patch for the issue.",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8351fb1e_c6cf1680",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1438,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07958893_3d90decd",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe34b0f3_264d2502",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1438,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8351fb1e_c6cf1680",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9de575b_e17338fd",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1443,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "Is there a reason not to reuse the variables we\u0027ve already declared?",
      "range": {
        "startLine": 1442,
        "startChar": 1,
        "endLine": 1443,
        "endChar": 35
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e185441_b8fa402f",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1443,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-04-30T03:09:38Z",
      "side": 1,
      "message": "reused the variable with new change.",
      "parentUuid": "a9de575b_e17338fd",
      "range": {
        "startLine": 1442,
        "startChar": 1,
        "endLine": 1443,
        "endChar": 35
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7727233a_15cce78a",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1443,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e185441_b8fa402f",
      "range": {
        "startLine": 1442,
        "startChar": 1,
        "endLine": 1443,
        "endChar": 35
      },
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61497d99_1a806e11",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1481,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-17T08:27:43Z",
      "side": 1,
      "message": "I\u0027m going to hold off reviewing this one, as I suspect contains many of the issues identified above.",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d3e01b_40c84a96",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1481,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-04-30T04:25:32Z",
      "side": 1,
      "message": "Same again.",
      "parentUuid": "61497d99_1a806e11",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c796dfa_db42d3ab",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1481,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-08T02:25:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1d3e01b_40c84a96",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2e8303a_8482e7cc",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1481,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-08T04:42:46Z",
      "side": 1,
      "message": "Again, Some of the commentary above applies to this function also.",
      "parentUuid": "8c796dfa_db42d3ab",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf33b4b_73c13a43",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1481,
      "author": {
        "id": 1000393
      },
      "writtenOn": "2024-05-09T03:41:15Z",
      "side": 1,
      "message": "Took care of it",
      "parentUuid": "e2e8303a_8482e7cc",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d7c1422_59e89cdf",
        "filename": "src/pdr.c",
        "patchSetId": 23
      },
      "lineNbr": 1481,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-05-09T05:01:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecf33b4b_73c13a43",
      "revId": "e59b67ece1411849dbf3f8a9a49b1ce685386935",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}