{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5a3eae4c_a802c23c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T02:47:58Z",
      "side": 1,
      "message": "Hello! Nice work; I have some pretty minor comments remaining. Thanks for iterating on the patch!",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16cd6b76_38fcf18b",
        "filename": "include/libpldm/firmware_update.h",
        "patchSetId": 14
      },
      "lineNbr": 642,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T02:47:58Z",
      "side": 1,
      "message": "I understand what you mean, but I think what you\u0027ve written could be confusing to some. Can we rewrite this as:\n\n\u003e The \"Length of ComponentVersionString\" field is 1 byte, so \"ComponentVersionString\" can be at most 255 characters. Allocate memory for it and append 1 byte for null termination ...",
      "range": {
        "startLine": 642,
        "startChar": 4,
        "endLine": 642,
        "endChar": 36
      },
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6002bd33_4b51fdf4",
        "filename": "include/libpldm/firmware_update.h",
        "patchSetId": 14
      },
      "lineNbr": 642,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-28T08:49:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16cd6b76_38fcf18b",
      "range": {
        "startLine": 642,
        "startChar": 4,
        "endLine": 642,
        "endChar": 36
      },
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8233c0dc_c00f96eb",
        "filename": "src/dsp/firmware_update.c",
        "patchSetId": 14
      },
      "lineNbr": 1183,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T02:47:58Z",
      "side": 1,
      "message": "This needs to be `return pldm_msgbuf_span_remaining(buf, (void **)\u0026data-\u003eptr, \u0026data-\u003elength);` so the subsequent iteration can decode the subsequent table entry.",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad842047_52352964",
        "filename": "src/dsp/firmware_update.c",
        "patchSetId": 14
      },
      "lineNbr": 1183,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-28T08:49:48Z",
      "side": 1,
      "message": "I think this might not work since the `data`\u0027s ptr is const, and the `variable_field data` has been initilized by `decode_get_downstream_firmware_params_resp()`, use `pldm_msgbuf_span_remaining()` would return `-EINVAL` caused by the data verification in the function:\n```\npldm_msgbuf_span_remaining(struct pldm_msgbuf *ctx, void **cursor, size_t *len)\n{\n\tassert(ctx);\n\n\tif (!ctx-\u003ecursor || !cursor || *cursor || !len) { \u003c\u003c trigger `*cursor`\n\t\treturn pldm_msgbuf_status(ctx, EINVAL);\n\t}\n\t...\n}\n```\n\nThis leads to two seperate problem:\n1. `ptr` in `variable_field` is a const pointer.\n  - `ptr` cannot be assigned to a new address.\n2. `pldm_msgbuf_span_remaining()` assumes the `cursor` should point to `NULL`.\n  - `variable_field data` has been initilized.\n  \nDo you have any thought about this? And please let me know if I was wrong.",
      "parentUuid": "8233c0dc_c00f96eb",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcd5c9bd_bc2a349b",
        "filename": "src/dsp/firmware_update.c",
        "patchSetId": 14
      },
      "lineNbr": 1183,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-02T06:27:23Z",
      "side": 1,
      "message": "\u003e I think this might not work since the data\u0027s ptr is const,\n\nYes, but we\u0027re defining that - we can change it so it isn\u0027t `const`?\n\n\u003e the variable_field data has been initilized by decode_get_downstream_firmware_params_resp(), use pldm_msgbuf_span_remaining() would return -EINVAL caused by the data verification in the function\n\nProbably the least effort thing to do there is to set the pointer to `NULL` before the call:\n\n```\n/* Update the span */\ndata-\u003eptr \u003d NULL;\nreturn pldm_msgbuf_span_remaining(buf, (void **)\u0026data-\u003eptr, \u0026data-\u003elength);\n```\n\nIf this becomes a broader problem we can add another `msgbuf` API.",
      "parentUuid": "ad842047_52352964",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5fc9e92_7e23c5b0",
        "filename": "src/dsp/firmware_update.c",
        "patchSetId": 14
      },
      "lineNbr": 1183,
      "author": {
        "id": 1002120
      },
      "writtenOn": "2024-07-09T10:35:07Z",
      "side": 1,
      "message": "\u003e Yes, but we\u0027re defining that - we can change it so it isn\u0027t const?\n\nChanging the `ptr` into a non-const pointer causes many errors and warnings, including the stable APIs, such as\n```\n../src/dsp/firmware_update.c:374:34: error: assignment discards ‘const’ qualifier from pointer target type [-Werror\u003ddiscarded-qualifiers]\n  374 |         package_version_str-\u003eptr \u003d\n\nor\n\n../tests/dsp/firmware_update.cpp:2020:16: error: invalid conversion from ‘const uint8_t*’ {aka ‘const unsigned char*’} to ‘uint8_t*’ {aka ‘unsigned char*’} [-fpermissive]\n 2020 |         .ptr \u003d reinterpret_cast\u003cconst uint8_t*\u003e(versionsStr),\n\n```\n\nAlso, assigning the `ptr` to `NULL` is not acceptable too.\n```\n../src/dsp/firmware_update.c: In function ‘decode_downstream_device_parameter_table_entry’:\n../src/dsp/firmware_update.c:1184:19: error: assignment of member ‘ptr’ in read-only object\n 1184 |         data-\u003eptr \u003d NULL;\n```\n\nIt looks like this change would cause many side effects, I personally recommand that let the users to calculate the offset on themself by the macro `PLDM_DOWNSTREAM_DEVICE_PARAMETER_ENTRY_MIN_LEN`, `active_comp_ver_str_len`, and `pending_comp_ver_str_len` in this change.",
      "parentUuid": "fcd5c9bd_bc2a349b",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d455e78e_7328b807",
        "filename": "src/dsp/firmware_update.c",
        "patchSetId": 14
      },
      "lineNbr": 1183,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-07-10T07:07:20Z",
      "side": 1,
      "message": "Unfortunately your reply above isn\u0027t making a lot of sense to me.\n\n\u003e Changing the ptr into a non-const pointer causes many errors and warnings, including the stable APIs\n\nThis function is literally annotated with `LIBPLDM_ABI_TESTING`. Changes to it are not going to affect stable APIs - given that it\u0027s not yet even merged into the code-base, it can\u0027t even affect the _implementation_ of stable APIs (let alone break them). It\u0027s not clear to me what changes you made to get the effect you\u0027ve reported in the output above.\n\n\u003e I personally recommand that let the users to calculate the offset on themself by the macro PLDM_DOWNSTREAM_DEVICE_PARAMETER_ENTRY_MIN_LEN, active_comp_ver_str_len, and pending_comp_ver_str_len in this change\n\nSorry, but most definitely no. That kind of API design falls into the [What If I Don\u0027t Actually Like My Users?](https://ozlabs.org/~rusty/index.cgi/tech/2008-04-01.html) category as far as I\u0027m concerned, it\u0027s just far too easy for it to go wrong and cause CVEs.\n\nlibpldm exists to provide ergonomic and (as much as we can) safe decoding of PLDM messages. Let\u0027s please try to keep that true for our users.",
      "parentUuid": "e5fc9e92_7e23c5b0",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5f75b33_0901013c",
        "filename": "src/msgbuf.h",
        "patchSetId": 14
      },
      "lineNbr": 726,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T02:47:58Z",
      "side": 1,
      "message": "Can you add a double-underscore after the `pldm` prefix, so `pldm__msgbuf_extract_array_void()`? I\u0027m using that as an indicator that it shouldn\u0027t be called directly under normal circumstances (\"it looks weird, and most code shouldn\u0027t look weird\").",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c13a5e1_37b56591",
        "filename": "src/msgbuf.h",
        "patchSetId": 14
      },
      "lineNbr": 726,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-28T08:49:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5f75b33_0901013c",
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17928751_1122b837",
        "filename": "src/msgbuf.h",
        "patchSetId": 14
      },
      "lineNbr": 766,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T02:47:58Z",
      "side": 1,
      "message": "This needs to be `uint8_t *dst`",
      "range": {
        "startLine": 766,
        "startChar": 57,
        "endLine": 766,
        "endChar": 66
      },
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "292b507b_40c2ea34",
        "filename": "src/msgbuf.h",
        "patchSetId": 14
      },
      "lineNbr": 766,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-28T08:49:48Z",
      "side": 1,
      "message": "Oops, missed it, thanks for reminding. Done.",
      "parentUuid": "17928751_1122b837",
      "range": {
        "startLine": 766,
        "startChar": 57,
        "endLine": 766,
        "endChar": 66
      },
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad75ce40_745851aa",
        "filename": "src/msgbuf.h",
        "patchSetId": 14
      },
      "lineNbr": 969,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-06-26T02:47:58Z",
      "side": 1,
      "message": "`pldm__msgbuf_insert_array_void()` (double underscore again).",
      "range": {
        "startLine": 969,
        "startChar": 0,
        "endLine": 969,
        "endChar": 5
      },
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6f9bfd1_4e55e5dd",
        "filename": "src/msgbuf.h",
        "patchSetId": 14
      },
      "lineNbr": 969,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2024-06-28T08:49:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad75ce40_745851aa",
      "range": {
        "startLine": 969,
        "startChar": 0,
        "endLine": 969,
        "endChar": 5
      },
      "revId": "0ed4278a2440b09d50053d8b0612300cd7806dc4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}