{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eac25edd_faf51981",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-23T05:22:14Z",
      "side": 1,
      "message": "Hi Kasun, thanks for the updates. I have a few more queries.",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f527dc78_f038f2a0",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 24,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-23T05:22:14Z",
      "side": 1,
      "message": "Do you mind if we keep these constants in the implementation (i.e. `src/rde.c`) until we have a strong motivation to expose them in the public headers?",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8079dd2d_8efe1bdc",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 24,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2023-08-23T18:16:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f527dc78_f038f2a0",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5907b9f3_13785f67",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 116,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-23T05:22:14Z",
      "side": 1,
      "message": "I appreciate that this is an improvement over the previous approach that invoked UB, but what was the reasoning behind avoiding the strategy I suggested on PS5?",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7ea1f11_e8d2af29",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 116,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2023-08-23T18:16:35Z",
      "side": 1,
      "message": "I did not understand it fully. In your suggestion we have,\n\n```\nstruct pldm_rde_varstring {\n    uint8_t string_format;\n    uint8_t string_length_bytes;\n#ifndef __cplusplus\n    char string_data[]\n#endif\n}\n```\n\n```\nchar *pldm_rde_varstring_data(struct pldm_rde_varstring *ctx)\n{\n    return ctx-\u003estring_data;\n}\n```\n\nFor my understanding;\n\n1. For C++ compilers, string_data property will be missing. So how does this work with a C++ compiler? \n\n2. Is there an advantage of doing it as above vs simply using a uint8_t *string_data and pointing it to the starting location of the string in a given buffer?",
      "parentUuid": "5907b9f3_13785f67",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31a7cbf7_e764a3c1",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 116,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-23T21:58:22Z",
      "side": 1,
      "message": "\u003e 1. For C++ compilers, string_data property will be missing. So how does this work with a C++ compiler?\n\nThe library is a C library and must be compiled with a C compiler (and not a C++ compiler). The library uses features of the C standard that are not part of the subset of C allowed by C++.\n\n`pldm_rde_varstring_data()` is a function provided by the library, therefore it\u0027s a function that\u0027s compiled with a C compiler, and has access to the `string_data` member.\n\nC++ has access to `pldm_rde_varstring_data()` as a function in the library, and so it can retrieve the pointer by invoking the function.\n\n\u003e 2. Is there an advantage of doing it as above vs simply using a uint8_t *string_data and pointing it to the starting location of the string in a given buffer?\n\nIt saves an extra allocation and indirection, and is more cache friendly for short strings.",
      "parentUuid": "d7ea1f11_e8d2af29",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "914be5b5_6a085042",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 116,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2023-08-24T04:31:43Z",
      "side": 1,
      "message": "Thanks for the clarification. Updated the code.\n\nThe compiler doesn\u0027t allow me to put struct pldm_rde_varstring as a property at the end of struct pldm_rde_negotiate_redfish_parameters_resp. So I removed pldm_rde_negotiate_redfish_parameters_resp struct definition for the moment since it\u0027s not really used.",
      "parentUuid": "31a7cbf7_e764a3c1",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "792d59ad_a01b203d",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 116,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-24T05:15:30Z",
      "side": 1,
      "message": "\u003e I removed pldm_rde_negotiate_redfish_parameters_resp struct definition for the moment since it\u0027s not really used.\n\nOkay, yes, it\u0027s best to avoid defining things that aren\u0027t yet used. Otherwise we back ourselves into a corner if we need to change the structure down the track.\n\n\u003e The compiler doesn\u0027t allow me to put struct pldm_rde_varstring as a property at the end of struct pldm_rde_negotiate_redfish_parameters_resp. \n\nAh, so that my approach prevents embedding is a significant problem. We should probably switch back to your approach of using the pointer. Sorry for the noise there.",
      "parentUuid": "914be5b5_6a085042",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d1a52cb_62f3473b",
        "filename": "include/libpldm/rde.h",
        "patchSetId": 10
      },
      "lineNbr": 116,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2023-08-24T07:11:55Z",
      "side": 1,
      "message": "Ack. I reverted it back.",
      "parentUuid": "792d59ad_a01b203d",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1686fac3_214f7289",
        "filename": "src/rde.c",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-23T05:22:14Z",
      "side": 1,
      "message": "Why not test this before we extract the feature support? That way we would not be doing unnecessary work.",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aef157d3_94164ac4",
        "filename": "src/rde.c",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2023-08-23T18:16:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1686fac3_214f7289",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48e9a641_a1327527",
        "filename": "src/rde.c",
        "patchSetId": 10
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-08-23T05:22:14Z",
      "side": 1,
      "message": "Why do we extract to the `feature_support` local rather than passing through `\u0026mc_feature_support-\u003evalue` to `pldm_msgbuf_extract()` on line 72? The latter approach would make the local variable unnecessary.",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc181517_79810f3b",
        "filename": "src/rde.c",
        "patchSetId": 10
      },
      "lineNbr": 80,
      "author": {
        "id": 1001138
      },
      "writtenOn": "2023-08-23T18:16:35Z",
      "side": 1,
      "message": "As a habit I try to avoid passing pointers of packed array properties. Changed it.",
      "parentUuid": "48e9a641_a1327527",
      "revId": "96de7f98b7c337ddc4fa6d4581fb93ae5805076a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}