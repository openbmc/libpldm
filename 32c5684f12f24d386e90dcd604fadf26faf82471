{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6b9f0219_8cc137e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-31T06:42:56Z",
      "side": 1,
      "message": "It would be nice to have some more words here about the problem and some of the implementation hazards.",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13cd4c6a_afd5c489",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-06-03T00:26:16Z",
      "side": 1,
      "message": "Does this commit support changing Max block size of an MCTP interface?\nWhich currently is 255 for SMBus.",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6bcc41e_e1f1939f",
        "filename": "src/transport/af-mctp.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-06-03T00:34:26Z",
      "side": 1,
      "message": "Which is the advantage of setting send_buf_size \u003d\u003d req_msg_len? as my understanding, mctp driver already support split the request message to difference packet to send thru the bus base on the Max supported block size.",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eeebbff_e8e04ed0",
        "filename": "src/transport/af-mctp.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-05T00:35:56Z",
      "side": 1,
      "message": "We need to set the socket buffer size so the kernel doesn\u0027t error out when we try to send a message that exceeds the current size of the socket buffer. This problem exists well before (and is separate to) the MTU for the MCTP link. This is purely a socket problem, not an MCTP problem.",
      "parentUuid": "c6bcc41e_e1f1939f",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a66bb98_72ab4081",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-31T06:42:56Z",
      "side": 1,
      "message": "Is size_t the right type? `man 7 socket` says:\n\n\u003e The socket options listed below can be set by using setsockopt(2) and read with getsockopt(2) with the socket level set to SOL_SOCKET for all sockets.  Unless otherwise noted, optval is a pointer to an int.\n\nThe documentation for `SO_SNDBUF` doesn\u0027t seem to note anything in particular about the sizes.\n\nSee the `Socket options` and `SO_SNDBUF` sections of https://man7.org/linux/man-pages/man7/socket.7.html",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f92aeef0_249b73ed",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-16T05:13:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a66bb98_72ab4081",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b032913_518ae907",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-31T06:42:56Z",
      "side": 1,
      "message": "I think we have to be careful about this comparison. From the `SO_SNDBUF` entry in `man 7 socket`:\n\n       SO_SNDBUF\n              Sets or gets the maximum socket send buffer in bytes.  The\n              kernel doubles this value (to allow space for bookkeeping\n              overhead) when it is set using setsockopt(2), and this\n              doubled value is returned by getsockopt(2).  The default\n              value is set by the /proc/sys/net/core/wmem_default file\n              and the maximum allowed value is set by the\n              /proc/sys/net/core/wmem_max file.  The minimum (doubled)\n              value for this option is 2048.\n\nSpecifically, my concern is the wording about the doubling of the value (\"for bookkeeping overhead\").\n\nhttps://man7.org/linux/man-pages/man7/socket.7.html",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "169e3493_21f59933",
        "filename": "src/transport/mctp-demux.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-16T05:13:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b032913_518ae907",
      "revId": "32c5684f12f24d386e90dcd604fadf26faf82471",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}