{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "09cc8024_b14fe8b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "I think there are a couple of small fixes we need. I\u0027ve commented where necessary.",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffa766df_d5287952",
        "filename": "include/libpldm/requester/instance-id.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "I think we need to clarify the returned error values are defined in terms of errno, for each function declared here.",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc809b37_040a5f69",
        "filename": "include/libpldm/requester/instance-id.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "I think we want to wrap this up in an `#if ...` like so:\n\n```\n#if defined(__STDC_HOSTED__)\n    /* Declarations above */\n#endif\n```\n\nThis way people integrating it into a freestanding environment will become aware that they\u0027re missing the implementation.",
      "range": {
        "startLine": 14,
        "startChar": 1,
        "endLine": 69,
        "endChar": 25
      },
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14cf1752_3936a09c",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "I think I\u0027d prefer we have the caller pass through the object and this function just populates it. This gives the caller control of whether the object storage is on the stack or the heap. Freestanding environments tend to want tight control of heap allocations, hence it\u0027s better if the API(s) cater to that.\n\nWhile this implementation doesn\u0027t work in a freestanding environment, we want the API itself to be applicable in both hosted and freestanding contexts.\n\nGiven this, we also should move the definition of `struct pldm_instance_id` into `include/libpldm/requester/instance-id.h` and adjust the function prototype to `int pldm_instance_id_init(struct pldm_instance_id *ctx, const char *dbpath)`",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68045884_e2923a09",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T23:20:50Z",
      "side": 1,
      "message": "Actually, disregard that. On reflection I think I got the trade-offs wrong. Specifically:\n\nThe struct members are implementation specific. When it comes to supporting some allocator in a freestanding environment, the content of the struct will necessarily be different. That would mean we have multiple ABIs for the one API, which isn\u0027t great for maintenance. It isn\u0027t changing one ABI to another linearly, it\u0027s maintaining multiple concurrently. Let\u0027s avoid that for now using the strategy you already have.\n\nHowever, I\u0027d like some more stringent tests on the provided arguments:\n\n```\nif (!ctx) {\n    return -EINVAL;\n}\n\n/*\n * Make sure the provided pointer was initialised to NULL. In the future if we\n * stabilise the ABI this allows the caller to potentially pass a valid pointer to \n * a struct they\u0027ve allocated\n */\nif (*ctx) {\n    return -EINVAL;\n}\n\n*ctx \u003d calloc(1, sizeof(**ctx));\nif (!*ctx) {\n    return -ENOMEM;\n}\n```\n\nNote the switch to `-ENOMEM` for the `calloc()` error value and fixing the ordering of the parameters to `calloc()`",
      "parentUuid": "14cf1752_3936a09c",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a527aaa0_04b861ee",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T23:28:58Z",
      "side": 1,
      "message": "We at least want to add:\n\n```\n*ctx \u003d NULL;\n```\n\nafter the free so there\u0027s no visible pointer to an invalid object. However, it\u0027s probably better to use an internal variable and structure the code as follows:\n\n```\nstruct pldm_instance_id *lctx;\n...\n\nlctx \u003d calloc(...);\n\n...\n\n*ctx \u003d lctx;\n\nreturn 0;\n```",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fca0e2c_0ee6469a",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "As above regarding the function prototype.",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84f31278_78ab1a04",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T23:20:50Z",
      "side": 1,
      "message": "Ignore this.",
      "parentUuid": "2fca0e2c_0ee6469a",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "762b8bc9_8c2bc316",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "With the suggestions above we must drop the free() as well.",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "903df6fe_0c3ba96b",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T23:20:50Z",
      "side": 1,
      "message": "Ignore this.",
      "parentUuid": "762b8bc9_8c2bc316",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c264b91_165cc3c2",
        "filename": "src/requester/instance-id.c",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-18T08:13:57Z",
      "side": 1,
      "message": "I think I need convincing that removing the remaining checks in the sketch implementation is the right thing to do:\n\nhttps://gist.github.com/amboar/b8e997de57b88222d010c99ace80bf03#file-libpldm_iid-c-L154-L160\n\nIn both cases we could `return -EPROTO;`\n\nThis will signal to the caller that something is drastically wrong with the database rather than silently carrying on.",
      "revId": "4c033c851ca3ead67bc6b01182c356feedd8a39f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}