{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "acb3ef08_97a5bfd7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-15T00:33:17Z",
      "side": 1,
      "message": "Hi John, nice work. I have a couple of queries inline.",
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e6adf53_e53ed546",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 836,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-15T00:33:17Z",
      "side": 1,
      "message": "This doesn\u0027t seem right? The fact that this compiles suggests like I need to fix up msgbuf sooner rather than later.",
      "range": {
        "startLine": 836,
        "startChar": 1,
        "endLine": 836,
        "endChar": 6
      },
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2e326b7_d0ccf707",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 836,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-15T02:14:07Z",
      "side": 1,
      "message": "... and if fixing the msgbuf APIs is something you\u0027re able to help with, let me know!",
      "parentUuid": "5e6adf53_e53ed546",
      "range": {
        "startLine": 836,
        "startChar": 1,
        "endLine": 836,
        "endChar": 6
      },
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2edc4285_14a307be",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 836,
      "author": {
        "id": 1002038
      },
      "writtenOn": "2025-08-15T15:22:37Z",
      "side": 1,
      "message": "Ack. Sure. Let me know if anything I can help with!",
      "parentUuid": "e2e326b7_d0ccf707",
      "range": {
        "startLine": 836,
        "startChar": 1,
        "endLine": 836,
        "endChar": 6
      },
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97836354_10ea6087",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 836,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-18T01:06:33Z",
      "side": 1,
      "message": "The issue is we cast away the `const` qualifier in the `pldm_msgbuf_init_errno()` constructor, which was always a hack: msgbuf was initially only conceived to decode received buffers, but it is obviously useful for encoding buffers to send as well, as a concept.\n\nReally we need separate constructors for each type, where the decode constructor takes a const-qualified pointer, and the encode constructor takes a pointer which is not const-qualified.\n\nSo we could either:\n\n1. Define a separate msgbuf structs, decode with a const-qualified member, encode with a member that is not const-qualified, and fix the extract/insert APIs to take the appropriate type, or\n2. Introduce a tagged union over whether the pointer is const-qualified or not.\n\nI think I prefer that we encode the const property in the type system so misuse yields a compile error, though perhaps there are other approaches. Possibly we could use a pointer-type-equivalence check?",
      "parentUuid": "2edc4285_14a307be",
      "range": {
        "startLine": 836,
        "startChar": 1,
        "endLine": 836,
        "endChar": 6
      },
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c95d2ebc_58540297",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 877,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-08-15T00:33:17Z",
      "side": 1,
      "message": "Can we please declare this with the other variables at the top of the function body?",
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7dd96a2d_0777c332",
        "filename": "src/dsp/base.c",
        "patchSetId": 1
      },
      "lineNbr": 877,
      "author": {
        "id": 1002038
      },
      "writtenOn": "2025-08-15T15:22:37Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "c95d2ebc_58540297",
      "revId": "1497e524d7126c6c4dcb632deb782aca9bae7620",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}