{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "416db9d0_339f8986",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 14
      },
      "lineNbr": 123,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T04:57:56Z",
      "side": 1,
      "message": "Missed this one? `pldm_requester_init()`",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18e4d106_4e7ac166",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 14
      },
      "lineNbr": 123,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-10T05:13:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "416db9d0_339f8986",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "746b6912_5c3ce958",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 14
      },
      "lineNbr": 161,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-10T04:57:56Z",
      "side": 1,
      "message": "Hmm, probably should rephrase this. Maybe:\n\n\u003e Waits for a PLDM event.",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f04ec70e_3a89a6c9",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 14
      },
      "lineNbr": 161,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-02-10T05:13:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "746b6912_5c3ce958",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62099eb9_b43263b7",
        "filename": "src/requester/pldm.c",
        "patchSetId": 14
      },
      "lineNbr": 6,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-13T00:28:13Z",
      "side": 1,
      "message": "Without further effort this will to compile if the environment doesn\u0027t set `PLDM_HAS_POLL`. This needs to be:\n\n```\n#ifdef PLDM_HAS_POLL\n#include \u003cpoll.h\u003e\n#endif\n```",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f818274c_95fe0ad2",
        "filename": "src/requester/pldm.c",
        "patchSetId": 14
      },
      "lineNbr": 59,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-13T00:28:13Z",
      "side": 1,
      "message": "Similarly we need a fixup for this. How about this above the definition of `pldm_requester_poll(...)`:\n\n```\n#ifndef PLDM_HAS_POLL\nstruct pollfd {\n    int   fd;         /* file descriptor */\n    short events;     /* requested events */\n    short revents;    /* returned events */\n};\n\nstatic inline int poll(struct pollfd *fds, int nfds, int timeout)\n{\n    int i;\n    \n    for (i \u003d 0; i \u003c nfds; i++) {\n        fds[i].revents \u003d 0;\n    }\n    \n    return 0;\n}\n#endif\n```",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1ea215b_26fa2287",
        "filename": "src/requester/pldm.c",
        "patchSetId": 14
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-13T00:28:13Z",
      "side": 1,
      "message": "I think returning an error here is leaking an implementation detail. You have to know that the registered transport supports polling before calling `pldm_requester_poll()`. If the transport doesn\u0027t support polling I think we can return success, because we would then want the caller to call back into the API to keep ticking things along.",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7f95c13_b8a8a945",
        "filename": "src/requester/pldm.c",
        "patchSetId": 14
      },
      "lineNbr": 77,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-13T00:28:13Z",
      "side": 1,
      "message": "I don\u0027t think this is right - a timeout shouldn\u0027t alias to an actual error (see line 71 above). I think for now we just ignore `pollfd.revents` and return `PLDM_REQUESTER_SUCCESS` unless `poll()` returns `-1`. This means it\u0027s a requirement on the transport `recv()` callback that it returns e.g. `PLDM_REQUESTER_RECV_FAIL` when no message is present. This way we can at least try a `recv()` as long as `poll()` doesn\u0027t return an error.",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1d4634c_82f27c23",
        "filename": "src/requester/transport-mctp-demux.c",
        "patchSetId": 14
      },
      "lineNbr": 121,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-02-13T00:28:13Z",
      "side": 1,
      "message": "I think we should sanity-check `length` before we call `malloc()`, otherwise we\u0027re trying to `malloc()` something pretty arbitrary.",
      "revId": "b080edebecd22f1e4072b838ea321f92df5ce8a6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}