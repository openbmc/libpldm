{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "607122a7_e363f8e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-16T12:33:52Z",
      "side": 1,
      "message": "Hi Thu, I\u0027m sorry but unless you provide a particularly convincing argument, I can\u0027t accept this change. We instead need to convert consumers to the newer transport and instance ID APIs provided by libpldm, and eventually define an explicit requester API once we\u0027ve fixed all the remaining issues.",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a25df292_333bc7b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-18T05:33:58Z",
      "side": 1,
      "message": "Reducing this to -1 as there\u0027s a potential way forward that doesn\u0027t break the existing APIs.",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f12a499c_784390d0",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-16T12:33:52Z",
      "side": 1,
      "message": "You\u0027re simultaneously breaking the this API _and_ trying to fix the behaviour of a deprecated function. Please switch pldmtool and any other applications to use the async functions defined in the new transport API.\n\nhttps://github.com/openbmc/libpldm/blob/main/include/libpldm/transport.h#L26-L79",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd87cfa3_d441689d",
        "filename": "include/libpldm/requester/pldm.h",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-05-16T12:56:12Z",
      "side": 1,
      "message": "I will remove the code changing in this API. Let discuss about pldm_transport_send_recv_msg().",
      "parentUuid": "f12a499c_784390d0",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e27e15a_23630b3b",
        "filename": "include/libpldm/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-16T12:33:52Z",
      "side": 1,
      "message": "Sorry, but no, that\u0027s muddling the intent of this API. This is a *transport* API, not a *requester* API. The behaviour of the transport API mustn\u0027t encode the mechanics of retries and timeouts.\n\nPlease read this blog post:\n\nhttps://amboar.github.io/notes/2023/03/28/motivating-a-new-scheme-for-pldm-instance-id-management-in-openbmc.html\n\nThe requester API does not yet exist. There\u0027s a lot of work still to do, because a requester API should also abstract over the instance ID lifecycle as well as handling timeouts and retries. But we can\u0027t do that as the encode and decode functions all require instance IDs as an argument. We must fix that before we can provide a sensible requester API.\n\nUntil that\u0027s all sorted out consumers of libpldm must themselves implement a requester API by composing the transport and instance ID APIs now provided by libpldm.\n\nFinally, again, you\u0027re breaking the API. That\u0027s not immediately acceptable - if we need to change the prototype we need to declare one with a new symbol name, otherwise we\u0027re immediately breaking all consumers. I plan to enable `abi-compliance-checker` in CI soon so I don\u0027t have to keep repeating this.\n\nhttps://lvc.github.io/abi-compliance-checker/",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbdfb0c8_d5af2e98",
        "filename": "include/libpldm/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-05-16T12:56:12Z",
      "side": 1,
      "message": "I agree with you that we should not add retry mechanism to this API.\nBut about timeout, I think the API need the time out for the while loop.\nI wonder how the API handle the case which there is no response from the terminus?",
      "parentUuid": "9e27e15a_23630b3b",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12e0eb18_4e7b5bdb",
        "filename": "include/libpldm/transport.h",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-17T01:13:39Z",
      "side": 1,
      "message": "DSP0240 1.1.0 Table 6 defines PT3max as 6 seconds. How do you feel about exploiting that as a well-defined upper-bound without requiring new parameters to the function prototype? We don\u0027t retry, we just wait 6 seconds and then return e.g. `-ETIMEDOUT`?",
      "parentUuid": "cbdfb0c8_d5af2e98",
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23ae9046_49f355fc",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-05-16T12:16:46Z",
      "side": 1,
      "message": "Why int?  Any reason not to do size_t?",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 24
      },
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a45c468_dda42709",
        "filename": "src/transport/transport.c",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-05-16T12:24:06Z",
      "side": 1,
      "message": "Because the type of number-of-request-retries in https://github.com/openbmc/pldm/blob/master/meson_options.txt#L14 is int. That why I used int.\nIt seem the range of number-of-request-retries is 2 to 30. Let me change it to uint8_t.",
      "parentUuid": "23ae9046_49f355fc",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 24
      },
      "revId": "7be7069980773090ad7d22bc45f5776ea7a505be",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}