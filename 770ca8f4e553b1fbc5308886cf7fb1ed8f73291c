{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "582556c4_ec3ea085",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "I don\u0027t think we need a `Summary:` header here.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1abf266c_d26af486",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "582556c4_ec3ea085",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7a32766_642a05c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Is this the expected structure? Should we be using e.g. an IANA number here to differentiate OEMs? Maybe I should look at the IBM OEM stuff.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b735709_e01d40f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T03:36:33Z",
      "side": 1,
      "message": "Other than the IANA related to firmware update, I don\u0027t see any consistent way of adding IANA to PLDM OEM commands.  The existing IBM OEM code doesn\u0027t do it.\n\nLike I mentioned earlier, we\u0027re likely going to need to support OEM commands for vendors that we (the OpenBMC project) are not going to be able to dictate what their command set looks like.  What does it look like going forward to handle that use case?",
      "parentUuid": "a7a32766_642a05c6",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb14ac9a_f2530731",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-26T05:28:45Z",
      "side": 1,
      "message": "This wasn\u0027t a blocking complaint, I was just thinking out loud and trying to educate myself.",
      "parentUuid": "9b735709_e01d40f0",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccbb7d5c_81407d32",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Slightly frustrating that DSP0242 is yet to be published. It would be nice to contrast what you have to what\u0027s specified there.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ccabb0c_50a8864f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T03:36:33Z",
      "side": 1,
      "message": "We can certainly transition to using DSP0242 once it becomes available if satisfies the needs (I don\u0027t have visibility to it).",
      "parentUuid": "ccbb7d5c_81407d32",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6918b2fb_abb501f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-26T05:28:45Z",
      "side": 1,
      "message": "Yeah I don\u0027t have any visibility either. Hopefully it\u0027s not too far away so we can avoid further OEM implementations of the concept.",
      "parentUuid": "0ccabb0c_50a8864f",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae893e03_e939a382",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Hi Delphine, thanks for the patch. I have a few requests to get this in shape for merging. We might need to coordinate with IBM to get some logistical problems resolved with the implementation, as it must be possible to build and install the library with both `oem-ibm` and `oem-meta` enabled simultaneously.\n\nA request not directly dealt with by the inline comments is that you also need to provide some test cases demonstrating expected behaviours for the positive and negative cases.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a3adfc0_f75cf37d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:24:05Z",
      "side": 1,
      "message": "(marking this as unresolved as we need the test cases)",
      "parentUuid": "ae893e03_e939a382",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74b6cd58_3bc889af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T03:36:33Z",
      "side": 1,
      "message": "\u003e it must be possible to build and install the library with both oem-ibm and oem-meta enabled simultaneously.\n\nWhy is this a problem?  The libpldm doesn\u0027t have the routing, right?  It is up to the pldmd to call the appropriate functions based on which device / OEM it is communicating with, right?\n\nMy reading is that PLDM doesn\u0027t explicitly have an IANA field, or similar, in OEM commands.  We have flexibility in the Meta ones where we could certainly define an OEM command that ends up with the {IANA + secondary command number} embedded as an early part of the payload but I don\u0027t think there is any way to do that natively in PLDM.\n\nIt is quite possible to need to enable multiple OEM command sets on a BMC.  Suppose, for example, that we have two different NIC vendors both using PLDM but with their own set of OEM commands.  We would need to support both of those OEM sets at once because either NIC could be attached to the BMC.",
      "parentUuid": "1a3adfc0_f75cf37d",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ec4a74f_c685d4de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-26T05:28:45Z",
      "side": 1,
      "message": "I think you\u0027re conflating two of my concerns here but in your defense I didn\u0027t properly state my motivation. The comment about enabling them both at once related to the header file collision and not the lack of an IANA separator for OEM commands (though I do think that is an oversight in the PLDM spec and I\u0027m not what the behaviour is expected to be at runtime - your NIC example makes an excellent point).",
      "parentUuid": "74b6cd58_3bc889af",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dc07d91_78870629",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "I think we\u0027re a bit inconsistent with its application, but can you please add a SPDX license marker and your copyright to the top of the file?",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac754204_cb1749a6",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Please use LIBPLDM_OEM_META_FILE_IO_H as the guard.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93252cae_4751e45a",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T03:36:33Z",
      "side": 1,
      "message": "Do we need header guards or can we just use `#pragma once`?",
      "parentUuid": "ac754204_cb1749a6",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ba21cdb_429d7944",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-26T05:28:45Z",
      "side": 1,
      "message": "I prefer we deviate the least we can achieve from the C standard. `#pragma once` isn\u0027t standardised so I\u0027d prefer to avoid it.",
      "parentUuid": "93252cae_4751e45a",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01987e83_5109c2cc",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Isn\u0027t this specific to Meta? Should we include that in the names of the types and constants?",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c90db425_28c8ec19",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01987e83_5109c2cc",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42e32095_0f3f76c0",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "As above?",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9597501_341598ae",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42e32095_0f3f76c0",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d24a7a13_81bb96a3",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Please do not add further `__attribute__((packed))` structs. We\u0027ve done a bunch of work to move away from that. You should be able to solve that by removing `__attribute__((packed))` here and using the `msgbuf` abstraction in the implementation of `decode_write_file_io_req()`",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3d420bb_2d025476",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d24a7a13_81bb96a3",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9d12ff_cd690aa9",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Again, I think we probably want to include the name of the OEM in the symbol.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "409fabaa_66b0557d",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e9d12ff_cd690aa9",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1745f73a_3574473c",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Fix the comment as well after you rename the header guard.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29e04023_a908a7bf",
        "filename": "include/libpldm/oem/meta/libpldm/file_io.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1745f73a_3574473c",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2924307_7f9d417e",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "I think we\u0027re a bit inconsistent with its application, but can you please add a SPDX license marker and your copyright to the top of the file?",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c93a65e_a7acfbd3",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "It needs to be possible to build libpldm with both `oem-ibm` and `oem-meta` enabled simultaneously. That can\u0027t work well if both install the same header file.",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d39b9ca_e0b36a24",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T03:36:33Z",
      "side": 1,
      "message": "Agreed.  We should probably install the header file in a way that doesn\u0027t lose the `oem/meta` portions.\n\nMaybe the IBM ones aren\u0027t currently doing that?  We should probably transition them as such.",
      "parentUuid": "6c93a65e_a7acfbd3",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94682815_e5b96257",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-26T05:28:45Z",
      "side": 1,
      "message": "\u003e Maybe the IBM ones aren\u0027t currently doing that?\n\nThey aren\u0027t\n\n\u003e We should probably transition them as such.\n\nYep, I would like Manoj or someone from IBM to follow up on that.",
      "parentUuid": "6d39b9ca_e0b36a24",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3818d225_86222b0e",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94682815_e5b96257",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10d78a3d_7bb0955b",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "The patch must first be merged with the function marked as `LIBPLDM_ABI_TESTING`. Only once it\u0027s merged - and once you\u0027ve subsequently demonstrated its use in an application depending on the library - do we consider changing it to `LIBPLDM_ABI_STABLE` and capturing it in the ABI dump.\n\nSee the process described here:\n\nhttps://github.com/openbmc/libpldm#development",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84004983_7520f94d",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10d78a3d_7bb0955b",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50c7b55_e8d831d9",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-23T23:23:34Z",
      "side": 1,
      "message": "Firstly, C is less strict than C++ and doesn\u0027t require explicit casting to or from `void *` types.\n\nHowever, that should not be necessary anyway as you should use the `msgbuf` abstraction to implement this function:\n\nhttps://github.com/openbmc/libpldm/commit/c63f63a2d9d7d25b21b76a1a6098ee1a3176be7e",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "214bdf6b_710bd0ad",
        "filename": "src/oem/meta/file_io.c",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1001618
      },
      "writtenOn": "2023-10-27T03:18:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b50c7b55_e8d831d9",
      "revId": "770ca8f4e553b1fbc5308886cf7fb1ed8f73291c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}