{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d6817ab_9762c558",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-04-06T07:41:11Z",
      "side": 1,
      "message": "Why `src` is added to the include directory?",
      "revId": "c7643626c23f281f731e9ad8bc93df2c9924adde",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99eefdb5_ad031aa9",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-06T08:26:55Z",
      "side": 1,
      "message": "the msgbuf abstraction is entirely internal to the library. it should never be exposed to the user, so its headers live under `src/` and not under `include/`. More info here:\n\nhttps://github.com/openbmc/docs/blob/master/anti-patterns.md#placing-internal-headers-in-a-parallel-subtree",
      "parentUuid": "5d6817ab_9762c558",
      "revId": "c7643626c23f281f731e9ad8bc93df2c9924adde",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49bd894c_5f70b9c4",
        "filename": "meson.build",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-04-06T09:20:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "99eefdb5_ad031aa9",
      "revId": "c7643626c23f281f731e9ad8bc93df2c9924adde",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f3ef0bc_219f825a",
        "filename": "src/msgbuf.h",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-04-06T07:41:11Z",
      "side": 1,
      "message": "Why do we need the condition to check if end !\u003d NULL, end is initialised in the previous step.",
      "revId": "c7643626c23f281f731e9ad8bc93df2c9924adde",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67f507cc_3d045b1b",
        "filename": "src/msgbuf.h",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-04-06T08:26:55Z",
      "side": 1,
      "message": "because the value of end is the result of an addition that can overflow",
      "parentUuid": "7f3ef0bc_219f825a",
      "revId": "c7643626c23f281f731e9ad8bc93df2c9924adde",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b1d7f9d_f4a13bee",
        "filename": "src/msgbuf.h",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2023-04-06T09:20:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "67f507cc_3d045b1b",
      "revId": "c7643626c23f281f731e9ad8bc93df2c9924adde",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}