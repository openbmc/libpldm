{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4f3082fd_7e65b933",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Hi Matt, I\u0027ve left some initial queries in the headers. I figure I can take a closer look at the implementation once we have consensus on the header discussions.",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c08c592e_71065865",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Must we encode them at this stage? Can we instead pass back a pointer to an array of a concrete type (`struct pldm_descriptor`?) rather than an opaque buffer? I prefer we keep the marshalling in the message codec APIs and avoid spreading it around if possible.",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 68
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d34b4e1d_5ef2b989",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-11-26T04:35:22Z",
      "side": 1,
      "message": "OK, I\u0027ll have a look at using the structures from https://gerrit.openbmc.org/c/openbmc/libpldm/+/75733 .",
      "parentUuid": "c08c592e_71065865",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 68
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47c6e2d2_bfd533ae",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "I\u0027ve done that now.",
      "parentUuid": "d34b4e1d_5ef2b989",
      "range": {
        "startLine": 63,
        "startChar": 1,
        "endLine": 63,
        "endChar": 68
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eb7e5e2_8a4ac104",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Can we please switch these throughout to negative errnos as discussed in comments on other patches?",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3373ae71_214d9849",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-11-26T04:35:22Z",
      "side": 1,
      "message": "Can do. I think any -ve errno would be translated into a generic `PLDM_ERROR`. \n\nNote that `firmware_data()`/`verify()`/`activate()` will still return specific status codes since they have meaning, so there\u0027ll be a bit of variation in the API there.",
      "parentUuid": "9eb7e5e2_8a4ac104",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c46fe1_6b3a245c",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T23:49:29Z",
      "side": 1,
      "message": "Yeah, that\u0027s fine I think, so long as the documentation calls it out.",
      "parentUuid": "3373ae71_214d9849",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4ca891e_afc2a354",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19c46fe1_6b3a245c",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "777277d9_9964fdaa",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Maybe it\u0027s worth adding a `PLDM_FD_DEFINE_P()` macro in the same sense as `PLDM_MSG_DEFINE_P()`?",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a573b184_84a215c8",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-11-26T04:35:22Z",
      "side": 1,
      "message": "Can do. It would be nice to have a macro working with C too, unsure if there\u0027s any way to cast there in a way that that clang-tidy will be happy with (without the placement new).",
      "parentUuid": "777277d9_9964fdaa",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5e8d086_2bd96640",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T23:49:29Z",
      "side": 1,
      "message": "Yeah, defining something for C is fine. I hadn\u0027t done it as I didn\u0027t want to expose anything in the public headers that didn\u0027t have an immediate use. The clang-tidy warning is specific to `reinterpret_cast\u003c\u003e()`, C-style casts in C code should be fine.",
      "parentUuid": "a573b184_84a215c8",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89960cd_f8365ac8",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 227,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "In my use case I\u0027m putting the backing storage and `struct pldm_fd*` into an separate external struct, so will think about the best way to do that.",
      "parentUuid": "d5e8d086_2bd96640",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b79a095_045be640",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 261,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "I prefer we don\u0027t propagate the `pldm_requester_rc_t` type either, and again defer to negative errnos. Do you mind fixing it throughout? Hopefully it doesn\u0027t cause too much grief in the implementation.",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "606f81b4_e8e95ef2",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 261,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-11-26T04:35:22Z",
      "side": 1,
      "message": "Negative errno makes sense here, `pldm_requester_rc_t` was a bit arbitrary, I\u0027ll change it.",
      "parentUuid": "3b79a095_045be640",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4aa292ef_98b87f89",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 261,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "606f81b4_e8e95ef2",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64f39ba5_49149cdf",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Should we be using TIDs instead?",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 270,
        "endChar": 54
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7975cb0_aad5a9b4",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-11-26T04:35:22Z",
      "side": 1,
      "message": "Probably? That said, I suspect most users would end up translating back to MCTP EID themselves (as pldmd firmware update does)",
      "parentUuid": "64f39ba5_49149cdf",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 270,
        "endChar": 54
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b6c8cc0_6e48def5",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T23:49:29Z",
      "side": 1,
      "message": "Yeah, I just prefer to keep non-PLDM concepts out of the APIs as much as we can. The transport APIs do provide transport-specific mapping functions. Maybe it\u0027s worth some thought about whether we should separate those out so there\u0027s less impact from the meson `transport` build switch?",
      "parentUuid": "b7975cb0_aad5a9b4",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 270,
        "endChar": 54
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ba64a85_9d55a67a",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b6c8cc0_6e48def5",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 270,
        "endChar": 54
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f996a022_46f56927",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 294,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Same query here.",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 294,
        "endChar": 55
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1b877e8_628ee583",
        "filename": "include/libpldm/firmware_fd.h",
        "patchSetId": 10
      },
      "lineNbr": 294,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f996a022_46f56927",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 294,
        "endChar": 55
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb5a1450_ebe06c3b",
        "filename": "include/libpldm/libpldm-sizes.h.in",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "What\u0027s the motivation for the `libpldm-` prefix in the basename of the file given it\u0027s already namespaced under the `libpldm/` directory?",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57d56b76_cad5bd11",
        "filename": "include/libpldm/libpldm-sizes.h.in",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "I think I\u0027d missed there was already a directory, have moved it.",
      "parentUuid": "eb5a1450_ebe06c3b",
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b676901_255b8e8b",
        "filename": "include/libpldm/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 41,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2024-11-26T02:01:18Z",
      "side": 1,
      "message": "Maybe try adding them to the `dependencies` argument to the `compiler.sizeof()` call?",
      "range": {
        "startLine": 41,
        "startChar": 14,
        "endLine": 41,
        "endChar": 36
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f58c9aab_132aff14",
        "filename": "include/libpldm/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 41,
      "author": {
        "id": 1001129
      },
      "writtenOn": "2024-12-09T03:38:46Z",
      "side": 1,
      "message": "I tried a few things there, but didn\u0027t manage to get it to work. Will have a look further.",
      "parentUuid": "5b676901_255b8e8b",
      "range": {
        "startLine": 41,
        "startChar": 14,
        "endLine": 41,
        "endChar": 36
      },
      "revId": "e6f78510493367fa429bb7900b214dc07388e576",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}